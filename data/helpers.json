[{"id":"1","category":["Arrays"],"name":"AddToArr","title":"Adds the specified element in 1 dim array","description":"","_keywords":"добавить элемент в массив\nadd element to array\nadd item to array\npush element to array\npush item to array","usage":"Sub Example()\n    Dim arr(): arr = Array(\"item1\", \"item2\")\n    Call AddToArr(arr, \"item3\")\n    Debug.Print(arr(2)) ' item3\nEnd Sub","file":"1.bas","demo":""},{"id":"2","category":["Arrays"],"name":"GetArrLength","title":"Gets length of the specified array","description":"Returns number","_keywords":"получить длину массива\nполучить количество элементов в массиве\nполучить количество элементов массива\nget array length\nget length of array\nget array size","usage":"Sub Example()\n    Dim arr(): arr = Array(\"item1\", \"item2\")\n    Debug.Print(GetArrLength(arr)) ' 2\nEnd Sub","file":"2.bas","demo":""},{"id":"3","category":["Transformation","Arrays"],"name":"Rng2Array","title":"Converts range to array","description":"Returns 1-dim array contains all values from passed range\n\nAll the values from the range would be converted to string","_keywords":"конвертировать диапазон в массив\nконвертация диапазона в массив\nconvert range to array\ntransform range to array","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim rng As Range: Set rng = ws.Range(\"A1:A10\")\n    Dim arr() As String: arr = Rng2Array(rng)\n    ' paste array on the worksheet\n    ws.Range(\"A1\").Resize(Ubound(arr) + 1, 1).Value = Application.Transponse(arr)\nEnd Sub","file":"3.bas","demo":""},{"id":"4","category":["Arrays"],"name":"IsInArray","title":"Checks if array contains the specified element","description":"Returns `True` or `False`","_keywords":"проверить наличие элемента в массиве\ncheck if element exist in array\ncheck if item exist in array\ncheck if array includes element\ncheck if array includes item","usage":"Sub Example()\n    Dim arr(): arr = Array(\"item1\", \"item2\")\n    Debug.Print(IsInArray(arr, \"item2\")) ' True\n    Debug.Print(IsInArray(arr, \"item3\")) ' False\nEnd Sub","file":"4.bas","demo":""},{"id":"5","category":["Arrays"],"name":"FilterArr","title":"Filters 1 or 2 dim array","description":"Item in array pass filtering if it equals passed element\n\nReturns 1-dim array with all individual values, which passed the filtering","_keywords":"фильтрация массива\nотфильтровать массив\nfilter array","usage":"Sub Example()\n    Dim arr(), filteredArr()\n\n    arr = Array(1, 2, 3, 1, 1, 2)\n    ' filtering 1-dimensional array\n    filteredArr = FilterArr(arr, 1)\n    Debug.Print (Join(filteredArr, \", \")) ' 1, 1, 1\n\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' column B contains numbers: 1, 3, 1\n    arr = ws.Range(\"A1:B3\")\n\n    ' filtering 2nd column of 2-dimensional array (range)\n    filteredArr = FilterArr(arr, 1, 2)\n    Debug.Print (Join(filteredArr, \", \")) ' 1, 1\nEnd Sub","file":"5.bas","demo":""},{"id":"6","category":["Arrays"],"name":"FilterArr","title":"Filters 1 or 2 dim array using callback checker-function","description":"`CheckItem` callback function will check each item in array\n\nIn case of 2-dim array you need to specify `elementPos` - item's number in a row, which will be used as item to filter\n\nItem in array pass filtering if the `CheckItem` function will return `True`\n\nReturns 1-dim array with all <u>individual values</u>, which passed the filtering","_keywords":"фильтрация массива с помощью функции\nотфильтровать массив через функцию\nфильтрация массива\nотфильтровать массив\nfilter array with callback\nfilter array through callback\nfilter array using callback\nfilter array","usage":"Function CheckItem(ByVal item) As Boolean\n    ' callback checker-function will check each item in array\n    ' filtering will pass numbers from 2 to 4\n    CheckItem = CBool(item >= 2 And item <= 4)\nEnd Function\n\nSub Example()\n    Dim arr(), filteredArr()\n\n    arr = Array(1, 0, 1, 2, 4, 5, 10, 3, 1)\n    ' filtering 1-dimensional array\n    filteredArr = FilterArr(arr, \"CheckItem\")\n    Debug.Print (Join(filteredArr, \", \")) ' 2, 4, 3\n\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' column B contains numbers: 1, 3, 1\n    arr = ws.Range(\"A1:B3\")\n\n    ' filtering 2nd column of 2-dimensional array (range)\n    filteredArr = FilterArr(arr, \"CheckItem\", 2)\n    Debug.Print (Join(filteredArr, \", \")) ' 3\nEnd Sub","file":"6.bas","demo":""},{"id":"7","category":["Arrays"],"name":"Filter2DArr","title":"Filters 2-dim array using an arbitrary number of filtering criteria","description":"The resulting array will contain all the rows of the original 2-dim array, whose values in the columns correspond to all the passed filtering criteria\n\nEach filtering criteria is a string in the following format:\n\n`column number=pattern`, eg. `2=##.01.####`\n\nCheck the pattern format in the [documentation](https://docs.microsoft.com/ru-ru/dotnet/visual-basic/language-reference/operators/like-operator#pattern-options)\n\nReturns 2-dim array with all rows, which passed the filtering","_keywords":"фильтрация массива\nотфильтровать массив\nfilter array","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' column A contains names: \"Ivan\", \"Alex\", \"Ivan\"\n    ' column B contains birth dates: \"10.01.1992\", \"25.03.1991\", \"13.02.1994\"\n     Dim arr(): arr = ws.Range(\"A1:B3\")\n\n    ' filtering 2-dimensional array (range)\n    ' we want to get anly rows with all men with name Ivan, born in January\n    ' only first row match all criteria\n    Dim filteredArr(): filteredArr = Filter2DArr(arr, \"1=Ivan\", \"2=##.01.####\")\n\n    Dim count&: count = GetArrLength(filteredArr) ' @(id 2)\n    Debug.Print (count) ' 1\nEnd Sub","file":"7.bas","demo":""},{"id":"8","category":["Arrays"],"name":"SortArr","title":"Sorts 1-dim array","description":"Parameters:\n- `arr` (**variant array**) - array to sort\n- `isDesc` (**boolean**) - sorting order\n- if `True` - descending order, from larger to smaller `<`\n- if `False` - ascending order, from smaller to larger `>`\n\nReturns sorted 1-dim array","_keywords":"сортировка массива\nотсортировать массив\nsort array","usage":"Sub Example()\n    Dim arr(): arr = Array(-5, 3, 18, 1, 0, 4, 1, 5)\n    Dim isDesc As Boolean: isDesc = True\n     ' sorting 1-dimensional array by descending order\n    Call SortArr(arr, isDesc)\n    Debug.Print(Join(arr, \", \")) ' 18, 5, 4, 3, 1, 1, 0, -5\nEnd Sub","file":"8.bas","demo":""},{"id":"9","category":["Arrays"],"name":"SortArr","title":"Sorts 2-dim array by specified column N","description":"Parameters:\n- `arr` (**variant array**) - array to sort\n- `N` (**long**) - column to sort rows\n- `isDesc` (**boolean**) - sorting order\n- if `True` - descending order, from larger to smaller `<`\n- if `False` - ascending order, from smaller to larger `>`\n\nReturns sorted 2-dim array","_keywords":"сортировка массива\nотсортировать массив\nsort array","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' column A contains names: \"Ivan\", \"Alex\", \"Petr\"\n    ' column B contains average score: 4.4, 4.2, 4.3\n    Dim arr(): arr = ws.Range(\"A1:B3\")\n\n    Dim isDesc As Boolean: isDesc = True\n    ' sorting 2-dimensional array (range) by descending order in 2nd column (avg. score) \n    Call SortArr(arr, 2, isDesc)\n\n    ' paste sorted array on the worksheet\n    ws.Range(\"A1\").Resize(UBound(arr, 1), UBound(arr, 2)).Value = arr\nEnd Sub","file":"9.bas","demo":""},{"id":"10","category":["Arrays"],"name":"GetUniqueArr","title":"Get 1-dim array without duplicate values","description":"Returns 1-dim array contains only unique items","_keywords":"получить массив без повторов\nполучить массив без дубликатов\nполучить массив без дублей\nget array without duplicates\nget unique array","usage":"Sub Example()\n    Dim arr(): arr = Array(1, 2, 3, 1, 1, 2)\n    ' filtering 1-dimensional array\n    Dim uniqueArr(): uniqueArr = GetUniqueArr(arr)\n    Debug.Print (Join(uniqueArr, \", \")) ' 1, 2, 3\nEnd Sub","file":"10.bas","demo":""},{"id":"11","category":["Arrays"],"name":"GetIndexOf","title":"Get index of specified element in 1-dim array","description":"Returns number\n\nIf element was not found returns `-1`","_keywords":"найти индекс элемента в массиве\nполучить индекс элемента в массиве\nget element position in array\nget element index in array\nget position of element in array\nget index of element in array","usage":"Sub Example()\n    Dim arr(): arr = Array(1, 2, 3, 1, 1, 2)\n    Debug.Print (GetIndexOf(arr, 3)) ' 2\nEnd Sub","file":"11.bas","demo":""},{"id":"12","category":["Workbooks and worksheets"],"name":"IsWbOpen","title":"Checks if specified workbook is open","description":"Returns `True` or `False`","_keywords":"проверить открыта ли книга\nпроверить открыт ли файл\ncheck if workbook open\ncheck if file open","usage":"Sub Example()\n    Debug.Print (IsWbOpen(\"data.xlsx\")) ' Returns True if data.xlsx is currently open\nEnd Sub","file":"12.bas","demo":""},{"id":"13","category":["Workbooks and worksheets"],"name":"IsWsExists","title":"Checks if specified worsheet exists in the workbook","description":"Returns `True` or `False`","_keywords":"проверить существует ли вкладка\nпроверить наличие листа в книге\nпроверить наличие листа в файле\ncheck if sheet exist\ncheck if worksheet exist","usage":"Sub Example()\n    Debug.Print (IsWsExists(ThisWorkbook, \"Sheet1\")) ' True if Sheet1 exist in ThisWorkbook\nEnd Sub","file":"13.bas","demo":""},{"id":"14","category":["User input","Data validation"],"name":"VerifyPassword","title":"Prompts you to enter a password and checks its correctness","description":"<u>Warning:</u>  password **is not** a secret, it stored inside the macros\n\nThe purpose of the check is to prevent the macro from running when accidentally called\n\nReturns `True` or `False`","_keywords":"ввод пароля\nпроверить пароль\nverify password input\ncheck password input","usage":"Sub Example()\n    If Not VerifyPassword() Then Exit Sub\n    Debug.Print (\"If password correct continue run the macros...\")\nEnd Sub","file":"14.bas","demo":""},{"id":"15","category":["Date and time"],"name":"GetDateSeparator","title":"Gets date separator based on user region settings (locale)","description":"","_keywords":"получить разделитель дат\nget date separator\nget date delimiter","usage":"Sub Example()\n    Dim separator$: separator = GetDateSeparator()\n    Debug.Print (separator) ' dot / slash\nEnd Sub","file":"15.bas","demo":""},{"id":"16","category":["Date and time"],"name":"GetMonthName","title":"Gets month name by it number in year","description":"Returns month name","_keywords":"получить имя месяца по номеру\nполучить название месяца по номеру\nget month by index\nget month by number\nget month name by index\nget month name by number","usage":"Sub Example()\n    Debug.Print (GetMonthName(5)) ' Мay\nEnd Sub","file":"16.bas","demo":""},{"id":"17","category":["Date and time"],"name":"GetMonthNum","title":"Gets month number in year by its name","description":"Returns month number in year","_keywords":"получить номер месяца по имени\nполучить индекс месяца по имени\nget month index by name\nget month number by name","usage":"Sub Example()\n    Debug.Print (GetMonthNum(\"May\")) ' 5\nEnd Sub","file":"17.bas","demo":""},{"id":"18","category":["Date and time"],"name":"GetWeekday","title":"Gets weekday name by date","description":"Returns the name of weekday","_keywords":"получить день недели по дате\nget weekday by date\nget day name by date","usage":"Sub Example()\n    Dim weekdayName$: weekdayName = GetWeekday(CDate(\"11.07.2022\"))\n    Debug.Print (weekdayName) ' monday\nEnd Sub","file":"18.bas","demo":""},{"id":"19","category":["Date and time"],"name":"GetWeekNum","title":"Gets week number in year by date","description":"Returns number","_keywords":"получить номер недели по дате\nget week index by date\nget week number by date","usage":"Sub Example()\n    Dim weekNum&: weekNum = GetWeekNum(CDate(\"11.07.2022\"))\n    Debug.Print (weekNum) ' 29\nEnd Sub","file":"19.bas","demo":""},{"id":"20","category":["Date and time"],"name":"GetDateByDayNum","title":"Gets text representation of the date in the specified format by number of the day in year","description":"Returns string","_keywords":"получить дату по номеру дня в году\nget date by day index\nget date by day number","usage":"Sub Example()\n    Dim num&: num = 32\n    Dim year&: year = 2022\n    Dim d As Date: d = CStr(GetDateByDayNum(num, year, \"dd.mm.yyyy\"))\n    Debug.Print (d) ' 01.02.2022\nEnd Sub","file":"20.bas","demo":""},{"id":"21","category":["Transformation","Date and time"],"name":"UnixTime2Date","title":"Converts Unix 13-digit timestamp to date","description":"Returns date","_keywords":"конвертировать unix time в дату\nконвертация unix time в дату\nконвертировать юникс время в дату\nконвертация юникс время в дату\nconvert unix time to date\ntransform unix time to date","usage":"Sub Example()\n    Dim d As Date: d = UnixTime2Date(\"1443852054000\")\n    Debug.Print (d) ' 03.10.2015 6:00:54\nEnd Sub","file":"21.bas","demo":""},{"id":"22","category":["File system"],"name":"CreateFolder","title":"Creates a folder in specified location with specified name","description":"If folder with specified name already exists, a new one will not created\n\nReturns `True` or `False`","_keywords":"создать папку\nсоздать дирректорию\ncreate folder\ncreate directory","usage":"Sub Example()\n    Dim hasCreated As Boolean\n    hasCreated = CreateFolder(ThisWorkbook.path, \"New folder\")\n    Debug.Print (hasCreated) ' True if New folder was created in specified location\nEnd Sub","file":"22.bas","demo":""},{"id":"23","category":["File system","User input"],"name":"GetFilePaths","title":"Allows to select files in dialog window","description":"Returns array with paths to all the selected files\n\nIf nothing was selected returns an empty array","_keywords":"получить путь к файлу\nвыбрать файл в диалоговом окне\nget file path from dialog\nselect file\nchoose file","usage":"Sub Example()\n    Dim allowMulti As Boolean: allowMulti = True\n    Dim paths() As String\n    paths = GetFilePaths(\"Select macro enabled Excel files\", \"*.xlsm; *.xlsb\", , allowMulti)\n    Debug.Print (paths(0)) ' path to the 1st selected file\n    Debug.Print (paths(1)) ' path to the 2nd selected file\nEnd Sub","file":"23.bas","demo":""},{"id":"24","category":["VB project","Export"],"name":"ExportVBProject","title":"Exports VBProject modules from the selected Excel workbook","description":"VBProject modules will be saved in `macros` folder next to selected Excel workbook","_keywords":"сохранить VB проект\nэкспортировать VB\nсохранить макрос\nэкспортировать макрос\nsave VB project\nexport VB project\nsave VBA\nexport VBA","usage":"Sub Example()\n    Call ExportVBProject()\nEnd Sub","file":"24.bas","demo":""},{"id":"25","category":["File system","User input"],"name":"GetFolderPath","title":"Allows to select folder in dialog window","description":"Returns path to the selected folder\n\nIf nothing was selected returns an empty string","_keywords":"получить путь к папке\nвыбрать папку в диалоговом окне\nget folder path from dialog\nget directory path from dialog\nselect folder\nchoose folder\nselect directory\nchoose directory","usage":"Sub Example()\n    Dim path$: path = GetFolderPath(\"Select folder\")\n    Debug.Print (path) ' path to selected folder\nEnd Sub","file":"25.bas","demo":""},{"id":"26","category":["File system"],"name":"ReadTxtFile","title":"Gets file's content from the specified txt file","description":"Returns string","_keywords":"получить содержимое файла\nполучить содержимое txt файла\nпрочитать файл\nпрочитать txt файл\nread file\nread txt file","usage":"Sub Example()\n    Dim content$: content = ReadTxtFile(\"C:\\folder\\filename.txt\")\n    Debug.Print (content)\nEnd Sub","file":"26.bas","demo":""},{"id":"27","category":["File system"],"name":"ReadTxtFile","title":"Gets file's content in specified encoding from the specified txt file","description":"Returns file's content\n\n`utf-8` encoding used by default","_keywords":"получить содержимое файла в определенной кодировке\nполучить содержимое txt файла в определенной кодировке\nпрочитать файл в определенной кодировке\nпрочитать txt файл в определенной кодировке\nread file in particular encoding\nread txt file in particular encoding","usage":"Sub Example()\n    Dim content$: content = ReadTxtFile(\"C:\\folder\\filename.txt\", \"windows-1251\")\n    Debug.Print (content)\nEnd Sub","file":"27.bas","demo":""},{"id":"28","category":["File system"],"name":"SaveToTxtFile","title":"Writes content in txt file in specified encoding and save the file in specified location","description":"`utf-8` encoding used by default","_keywords":"сохранить текст в файл\nсохранить текст в txt файл\nзаписать текст в файл\nзаписать текст в txt файл\nwrite text to file\nwrite text to txt file","usage":"Sub Example()\n    Call SaveToTxtFile(\"some content\", ThisWorkbook.Path, \"filename.txt\", \"windows-1251\")\nEnd Sub","file":"28.bas","demo":""},{"id":"29","category":["Text","File system"],"name":"GetFileName","title":"Extracts the name with the extension from the file path","description":"Returns string","_keywords":"получить имя файла из пути к нему\nизвлечь имя файла из пути к нему\nget file name form path","usage":"Sub Example()\n    Debug.Print (GetFileName(\"C:\\folder\\filename.txt\")) ' filename.txt\nEnd Sub","file":"29.bas","demo":""},{"id":"30","category":["Formatting"],"name":"AddBorders","title":"Adds borders to range","description":"","_keywords":"добавить границы у диапазона\nдобавить границы ячейке\nadd borders to range\nadd borders to cell","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1:B3\")\n    Call AddBorders(rng)\nEnd Sub","file":"30.bas","demo":""},{"id":"31","category":["Formatting"],"name":"IsColored","title":"Checks if range is colored","description":"Range has been colored if its text or background color is differ from default\n\nReturns `True` or `False`","_keywords":"проверить окрашен ли диапазон\nпроверить цвет заливки\nпроверить цвет текста\nпроверить дефолт\ncheck if range has not default color\ncheck if cell has not default color\ncheck if range colored\ncheck if cell colored","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Debug.Print (IsColored(rng)) ' True if interior or font color is differ from default\nEnd Sub","file":"31.bas","demo":""},{"id":"32","category":["Formatting"],"name":"SetFontColor","title":"Sets text color for specified range","description":"Color could be specified in different formats:\n- Excel Long\n- [Rgb](https://ru.wikipedia.org/wiki/RGB)\n- [Hex](https://ru.wikipedia.org/wiki/HTML-%D1%86%D0%B2%D0%B5%D1%82%D0%B0)","_keywords":"покрасить текст в диапазоне\nпокрасить текст в ячейке\nset font color in range\nset text color in range\nset font color in cell\nset text color in cell","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Call SetFontColor(rng, 10140829) ' Long\n    Call SetFontColor(rng, RGB(157, 188, 154)) ' Rgb\n    Call SetFontColor(rng, \"#9dbc9a\") ' Hex\nEnd Sub","file":"32.bas","demo":""},{"id":"33","category":["Formatting"],"name":"SetBackColor","title":"Sets background color for specified range","description":"Color could be specified in different formats:\n- Excel Long\n- [Rgb](https://ru.wikipedia.org/wiki/RGB)\n- [Hex](https://ru.wikipedia.org/wiki/HTML-%D1%86%D0%B2%D0%B5%D1%82%D0%B0)","_keywords":"изменить фон диапазона\nизменить фон ячейки\nset fore color in range\nset fore color in cell\nset background color in range\nset background color in cell","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Call SetBackColor(rng, 10140829) ' Long\n    Call SetBackColor(rng, RGB(157, 188, 154)) ' Rgb\n    Call SetBackColor(rng, \"#9dbc9a\") ' Hex\nEnd Sub","file":"33.bas","demo":""},{"id":"34","category":["Formatting","Copy"],"name":"CopyRowFormat","title":"Copies the format from the specified row and applies it to a range of rows (from ... to ...)","description":"","_keywords":"копировать формат строки\ncopy row formatting\ncopy rows formatting","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' copy format from 1st row on the worksheet number 1\n    ' and apply it to a range of rows (from 2 to 4)\n    Call CopyRowFormat(ws, 1, ws, 2, 4)\nEnd Sub","file":"34.bas","demo":""},{"id":"35","category":["Formatting","Copy"],"name":"CopyColumnFormat","title":"Copies the format from the specified column and applies it to a range of columns (from ... to ...)","description":"","_keywords":"копировать формат столбца\nкопировать формат колонки\ncopy column formatting\ncopy columns formatting","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' copy format from 1st column on the worksheet number 1\n    ' and apply it to a range of columns (from 2 to 4)\n    Call CopyColumnFormat(ws, 1, ws, 2, 4)\nEnd Sub","file":"35.bas","demo":""},{"id":"36","category":["Formatting"],"name":"IsColoredLike","title":"Checks if range's background is colored in specified color","description":"Color could be specified in different formats:\n- Excel Long\n- [Rgb](https://ru.wikipedia.org/wiki/RGB)\n- [Hex](https://ru.wikipedia.org/wiki/HTML-%D1%86%D0%B2%D0%B5%D1%82%D0%B0)\n\nReturns `True` or `False`","_keywords":"проверить окрашен ли диапазон\nпроверить цвет заливки\ncheck if range colored\ncheck range color\ncheck range background color\ncheck cell color\ncheck cell background color","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    ' Long\n    Debug.Print (IsColoredLike(rng, 10140829)) ' True if rng has such background color\n    ' Rgb\n    Debug.Print (IsColoredLike(rng, RGB(157, 188, 154))) ' True if rng has such background color\n    ' Hex\n    Debug.Print (IsColoredLike(rng, \"#9dbc9a\")) ' True if rng has such background color\nEnd Sub","file":"36.bas","demo":""},{"id":"37","category":["Transformation","Formatting"],"name":"Rgb2Long","title":"Converts RGB color to a Long Excel value","description":"Full analog of the built-in function [RGB](https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/rgb-function)\n\nReturns number","_keywords":"конвертировать rgb в long\nконвертация rgb в long\nконвертировать rgb в number\nконвертация rgb в number\nconvert rgb to long\ntransform rgb to long\nconvert rgb to number\ntransform rgb to number","usage":"Sub Example()\n    Debug.Print (Rgb2Long(157, 188, 154)) ' 10140829\n    Debug.Print(RGB(157, 188, 154)) ' 10140829\nEnd Sub","file":"37.bas","demo":""},{"id":"38","category":["Transformation","Formatting"],"name":"Hex2Long","title":"Converts HEX color to Long Excel value","description":"Returns number","_keywords":"конвертировать hex в rgb\nconvert hex to rgb\ntransform hex to rgb","usage":"Sub Example()\n    Debug.Print (Hex2Long(\"#9dbc9a\")) ' 10140829\nEnd Sub","file":"38.bas","demo":""},{"id":"39","category":["User forms"],"name":"GetSelectedRadioBtn","title":"Finds selected radio button inside the specified frame on the specified user form","description":"Returns instance if a class `MSforms.OptionButton`","_keywords":"получить выбранную радиокнопку\nнайти выбранную радиокнопку\nнайти выбранный переключатель\nget selected radiobutton in frame\nget selected radiobutton in form\nget active radiobutton in frame\nget active radiobutton in form","usage":"Private Sub CommandButton1_Click()\n    Dim radio As MSforms.OptionButton: Set radio = GetSelectedRadioBtn(\"Frame1\")\n    Debug.Print (radio.Name) ' OptionButton1\n    Unload Me\nEnd Sub","file":"39.bas","demo":""},{"id":"40","category":["HTTP"],"name":"HttpQuery","title":"Executes HTTP query","description":"Parameters:\n- `url` (**string**) - resource path\n- `method`? (**string**) - HTTP method\n  - GET (default)\n  - POST\n- `contentType`? (**string**) - type requested content (see [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type) for more details)\n- `reqBody`? (**string**) - request body (only for POST requests)\n\nReturns the server response as a text or as a collection of JSON objects (for JSON content type)","_keywords":"выполнить http запрос к API\nвыполнить сетевой запрос к API\nhttp query to API\nget post http query","usage":"Sub Example()\n    Const API_URL$ = \"https://jsonplaceholder.typicode.com/todos\"\n    Dim res As Object, json As Object\n        \n    Set res = HttpQuery(API_URL, \"application/json\")\n\n    If res Is Nothing Or res.Count = 0 Then\n        Debug.Print (\"Empty server response\")\n        Exit Sub\n    End If\n\n    Select Case TypeName(res)\n        Case \"Collection\"\n            For Each json In res\n                Debug.Print (\"ID: \" & json(\"id\") & \", Title: \" & json(\"title\") & \", Done: \" & json(\"completed\"))\n            Next json\n        Case \"Dictionary\"\n            Set json = res\n            Debug.Print (\"ID: \" & json(\"id\") & \", Title: \" & json(\"title\") & \", Done: \" & json(\"completed\"))\n        Case Else\n            Debug.Print(res)\n     End Select\nEnd Sub","file":"40.bas","demo":""},{"id":"41","category":["Excel interface"],"name":"ShowInterface","title":"Hides or shows back Excel user interface (scroll bars, tool bars, status bar etc.)","description":"Only the workbook content remains in the screen area","_keywords":"скрыть интерфейс\nпоказать интерфейс\nhide interface\nshow interface","usage":"Sub Example()\n    Call ShowInterface(False) ' hide Excel user interface\n    Call ShowInterface(True) ' show it back\nEnd Sub","file":"41.bas","demo":""},{"id":"42","category":["Transformation","JSON"],"name":"JsonConverter","title":"Converts JSON string to a dictionary","description":"Author: Tim Hall [tim.hall.engr@gmail.com](mailto:tim.hall.engr@gmail.com)\n\nRepository: [https://github.com/VBA-tools/VBA-JSON](https://github.com/VBA-tools/VBA-JSON)\n\nLicense: [MIT](http://www.opensource.org/licenses/mit-license.php)","_keywords":"конвертировать json\nконвертация json\nпарсинг json\nconvert json\nparse json","usage":"","file":"42.bas","demo":""},{"id":"43","category":["Excel interface","Macro progress"],"name":"ShowProcessing","title":"Shows operation execution message in Excel status bar","description":"","_keywords":"скрыть сообщение\nпоказать сообщение\nстатус-бар\nhide message\nshow message\nstatus-bar","usage":"Sub Example()\n    Call ShowProcessing(True) ' show operation execution message in status bar\n    Call ShowProcessing(False) ' hide the message\nEnd Sub","file":"43.bas","demo":""},{"id":"44","category":["File system"],"name":"LogInfo","title":"Writes new line in log file with current timestamp","description":"Message will be written in `Log.txt` file next to the current workbook\n\nThere is a timestamp before each message in the following format: `dd.mm.yyyy hh:mm:ss`\n\nIf there is no `Log.txt ` file it will be created","_keywords":"логгирование\nзапись сообщения в лог файл\nзаписать сообщение в лог файл\nwrite message to log\nlog message","usage":"Sub Example()\n    ' ...\n    Call LogInfo(\"Task 1 completed\")\n    ' …\n    Call LogInfo(\"Task 2 completed\")\nEnd Sub","file":"44.bas","demo":""},{"id":"45","category":["Outlook"],"name":"GetCurrentUserEmail","title":"Gets current user's email from Outlook","description":"Returns string","_keywords":"получить адрес почты\nполучить email адрес текущего пользователя\nget email\nget current user email","usage":"Sub Example()\n    Debug.Print (GetCurrentUserEmail()) ' user@domain.com\nEnd Sub","file":"45.bas","demo":""},{"id":"46","category":["Outlook"],"name":"CreateEmail","title":"Creates email in Outlook behalf of the current user","description":"Parameters:\n- `subject` (**string**) - email theme\n- `body` (**string**) - email content\n- `sendTo` (**string**) - emails TO listed via semicolon `;`\n- `copyTo`? (**string**) - emails CC listed via semicolon `;`\n- `attachmentPath`? (**string**) - path to the attachment\n- `method`? (**string**) - mailing method\n  - Show (default) - the email will be created in a new window, sending manually\n  - Save - the email will be created in the Drafts folder, sending manually\n  - Send - the email will be sent immediately\n- `importance`? (**string**) - importance Outlook flag\n  - Low (default)\n  - Medium\n  - High","_keywords":"отправить письмо\nотправить email\nsend email\ncreate email","usage":"Sub Example()\n    Dim sendTo$: sendTo = \"user1@domain.com; user2@domain.com\"\n    Dim method$: method = \"Show\"\n    Call CreateEmail(\"Some theme\", \"Some content\", sendTo, , , method)\nEnd Sub","file":"46.bas","demo":""},{"id":"47","category":["Outlook"],"name":"CreateAppointment","title":"Creates an appointment current user's Outlook calendar","description":"Parameters:\n- `subject` (**string**) - appointment theme\n- `body` (**string**) - appointment content\n- `startDate` (**date**) - appointment date (in case of `recurrenceType` is not missed this is the start date of the event series)\n- `recurrenceType`? (**string**) - event reccurence type\n  - No (default)\n  - Daily\n  - Weekly\n  - Monthly\n  - Annual","_keywords":"создать событие в календаре\nсоздать событие в календаре\ncreate appointment in calendar\ncreate event in calendar","usage":"Sub Example()\n    Dim startDate As Date: startDate = CDate(\"12.07.2022\")\n    Dim recurrenceType$: recurrenceType = \"Monthly\"\n    Call CreateAppointment(\"Some theme\", \"Some content\", startDate, recurrenceType)\nEnd Sub","file":"47.bas","demo":""},{"id":"48","category":["Transformation","Numbers"],"name":"FixNumbers","title":"Fixes number stored as text error","description":"Converts each cell in the specified range to the number","_keywords":"конвертировать текст в число\nконвертация текст в число\nconvert number stored as text\ntransform number stored as text","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1:B3\")\n    Call FixNumbers(rng)\nEnd Sub","file":"48.bas","demo":""},{"id":"49","category":["Numbers"],"name":"Round","title":"Rounds the specified float number to N digits after the decimal separator","description":"Returns string","_keywords":"округлить число\nокругление числа\nдробь\nround number\nfloat double","usage":"Sub Example()\n    Debug.Print (Round(4.4, 0)) ' 4\n    Debug.Print (Round(4.8, 0)) ' 5\n    Debug.Print (Round(4.226, 2)) ' 4.23\n    Debug.Print (Round(4.45, 1)) ' 4.5\nEnd Sub","file":"49.bas","demo":""},{"id":"50","category":["Numbers"],"name":"GetMax","title":"Gets max value from two specified values","description":"Returns variant","_keywords":"получить максимальное значение\nget maximum value","usage":"Sub Example()\n    Debug.Print (GetMax(-5, 6)) ' 6\n    Debug.Print (GetMax(4.45, 4.5)) ' 4.5\nEnd Sub","file":"50.bas","demo":""},{"id":"51","category":["Excel interface"],"name":"TurnUpdatesOn","title":"Turns off or on the updates of Excel interface (screen updates, formulas calculation, events, status bar, alerts)","description":"This approach speeds up the execution of heavy or resource-consumption operations","_keywords":"отключить обновление\nвключить обновление\nturn updates on\nturn updates off\nturn on turn off","usage":"Sub Example()\n    Call TurnUpdatesOn(False) ' turn off updates of Excel interface\n    Call TurnUpdatesOn(True) ' turn it on\nEnd Sub","file":"51.bas","demo":""},{"id":"52","category":["Cell notes"],"name":"AdjustNotes","title":"Adjusts the size of all cell notes on the worksheet to the size of their contents","description":"It is handy when inserting comments to cells using a macros","_keywords":"ресайз комментариев\nresize notes\nadjust notes","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Call AdjustNotes(ws)\nEnd Sub","file":"52.bas","demo":""},{"id":"53","category":["Data validation"],"name":"HasValidation","title":"Checks if range has Data Validation set in it","description":"Returns `True` or `False`","_keywords":"проверить наличие валидации в диапазоне\nпроверить наличие валидации в ячейке\ncheck if range has data validation\ncheck if cell has data validation\ncheck data validation","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Debug.Print (HasValidation(rng)) ' True if range has Data Validation set in it\nEnd Sub","file":"53.bas","demo":""},{"id":"54","category":["Autofilter"],"name":"ClearFilters","title":"Clears all autofilters in worksheet","description":"","_keywords":"снять фильтры с листа\nочистить фильтры на листе\nclear filters\nturn filters off\nturn off filters","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Call ClearFilters(ws)\nEnd Sub","file":"54.bas","demo":""},{"id":"55","category":["Autofilter"],"name":"TurnFiltersOn","title":"Turns on autofilters on the specified worksheet in the specified headers row","description":"","_keywords":"включить фильтры\nактивировать фильтры\nturn filters on\nturn on filters","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim headerRow&: headerRow = 1\n    Call TurnFiltersOn(ws, headerRow)\nEnd Sub","file":"55.bas","demo":""},{"id":"56","category":["Data validation","Dropdown"],"name":"SetDropDownList","title":"Sets dropdown list in the specified range","description":"Dropdown list - is `Data Validation` with `List` type\n\nSource could be specified in different formats:\n- list of options listed via comma `,`\n- named range from the Name Manager\n- column from the ListObject aka named table","_keywords":"установить выпадающий список\nset dropdown list\nset list\nadd dropdown\nadd list","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Call SetDropDownList(rng, \"да,нет\") ' list of options listed via comma\n    Call SetDropDownList(rng, \"my_list\") ' named range my_list\n    Call SetDropDownList(rng, \"Options[Answers]\") ' column Answers from the named table Options\nEnd Sub","file":"56.bas","demo":""},{"id":"57","category":["Formulas","Copy"],"name":"CopyRowFormulas","title":"Copies formulas from the specified row and applies them to a range of rows (from ... to ...)","description":"","_keywords":"копировать формулы из строки\nкопировать формулы в строке\ncopy row formulas\ncopy rows formulas","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' copy formulas from 1st row on the worksheet number 1 (columns from 3 to 4)\n    ' and apply them to a range of rows (from 2 to 4)\n    Call CopyRowFormulas(ws, 1, 2, 4, 3, 4)\nEnd Sub","file":"57.bas","demo":""},{"id":"58","category":["PowerQuery"],"name":"RefreshPQ","title":"Refreshes PowerQuery by name of the query","description":"There is an option to wait when refresh is done and do something immediately after (see the code)","_keywords":"обновить запрос Power Query\nrefresh query\nrefresh Power Query\nupdate query\nupdate Power Query","usage":"Sub Example()\n    Call RefreshPQ(\"query_name\")\nEnd Sub","file":"58.bas","demo":""},{"id":"59","category":["Workbooks and worksheets"],"name":"ProtectWs","title":"Protect / unprotect the specified worksheet","description":"","_keywords":"снять защиту с листа\nснять пароль с листа\nустановить пароль на лист\nprotect sheet\nprotect worksheet\nunprotect sheet\nunprotect worksheet","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Call ProtectWs(False, ws, \"qwerty\") ' unprotect worksheet\n    Call ProtectWs(True, ws, \"qwerty\")  ' protect worksheet\nEnd Sub","file":"59.bas","demo":""},{"id":"60","category":["Text","RegExp"],"name":"GetRegExpMatches","title":"Gets all regular expression matches from the text","description":"Parameters:\n- `text` (**string**) - text in which to search\n- `pattern` (**string**) - regular expression pattern (see details in the [documentation](https://docs.microsoft.com/en-us/previous-versions//f97kw5ka(v=vs.85)))\n\n[RegExp in VBA](https://docs.microsoft.com/en-us/previous-versions//yab2dx62(v=vs.85))\n\nReturns array with all the matches","_keywords":"проверить текст регулярным выражением\nпроверить текст регуляркой\ncheck text by regular expression\ncheck text by regexp\ncheck text using regular expression\ncheck text using regexp","usage":"Sub Example()\n    Dim text$: text = \"user1@domain2.com; user2@domain2.com; user3@domain1.com\"\n    Dim pattern$: pattern = \"\\w+@domain2\\.\\w+\"\n    Dim matches(): matches = GetRegExpMatches(text, pattern)\n    Debug.Print (matches(0)) ' user1@domain2.com\n    Debug.Print (matches(1)) ' user2@domain2.com\nEnd Sub","file":"60.bas","demo":""},{"id":"61","category":["Text","RegExp"],"name":"RegExpTest","title":"Checks if text matches the specified regular expression pattern","description":"Parameters:\n- `text` (**string**) - text in which to search\n- `pattern` (**string**) - regular expression pattern (see details in the [documentation](https://docs.microsoft.com/en-us/previous-versions//f97kw5ka(v=vs.85)))\n\n[RegExp in VBA](https://docs.microsoft.com/en-us/previous-versions//yab2dx62(v=vs.85))\n\nReturns `True` or `False`","_keywords":"проверить текст регулярным выражением\nпроверить текст регуляркой\ncheck text by regular expression\ncheck text by regexp\ncheck text using regular expression\ncheck text using regexp","usage":"Sub Example()\n    Dim text$: text = \"user1@domain1.com\"\n    Dim pattern$: pattern = \"\\w+@domain1\\.\\w+\"\n    Debug.Print (RegExpTest(text, pattern)) ' True if text matched the pattern\nEnd Sub","file":"61.bas","demo":""},{"id":"62","category":["Text","RegExp"],"name":"GetFirstRegExpMatch","title":"Gets only the 1st regular expression match from the text","description":"Parameters:\n- `text` (**string**) - text in which to search\n- `pattern` (**string**) - regular expression pattern (see details in the [documentation](https://docs.microsoft.com/en-us/previous-versions//f97kw5ka(v=vs.85)))\n\n[RegExp in VBA](https://docs.microsoft.com/en-us/previous-versions//yab2dx62(v=vs.85))\n\nReturns string","_keywords":"проверить текст регулярным выражением\nпроверить текст регуляркой\ncheck text by regular expression\ncheck text by regexp\ncheck text using regular expression\ncheck text using regexp","usage":"Sub Example()\n    Dim text$: text = \"user1@domain2.com; user2@domain2.com; user3@domain1.com\"\n    Dim pattern$: pattern = \"\\w+@domain2\\.\\w+\"\n    Debug.Print (GetFirstRegExpMatch(text, pattern)) ' user1@domain2.com\nEnd Sub","file":"62.bas","demo":""},{"id":"63","category":["Rows and columns"],"name":"GetColumnLeter","title":"Gets column's letter by its number","description":"Returns string","_keywords":"получить букву по номеру колонки\nполучить букву по номеру столбца\nполучить букву по индексу колонки\nполучить букву по индексу столбца\nget column char by column index\nget column char by column number\nget column letter by column index\nget column letter by column number","usage":"Sub Example()\n    Debug.Print (GetColumnLeter(1)) ' A\n    Debug.Print (GetColumnLeter(3)) ' C\n    Debug.Print (GetColumnLeter(8)) ' H\nEnd Sub","file":"63.bas","demo":""},{"id":"64","category":["Rows and columns"],"name":"GetLastRow","title":"Gets number of last filled (not empty) row in the specified column on the specified worksheet","description":"Returns number","_keywords":"получить последнюю строку по номеру колонки\nнайти последнюю строку по номеру колонки\nполучить последнюю строку по индексу колонки\nнайти последнюю строку по индексу колонки\nполучить последнюю строку по номеру столбца\nнайти последнюю строку по номеру столбца\nполучить последнюю строку по индексу столбца\nнайти последнюю строку по индексу столбца\nget last row by column index\nget last row by column number\nfind last row by column index\nfind last row by column number","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Debug.Print (GetLastRow(ws, 1)) ' number of last filled row in column 1 on sheet 1\nEnd Sub","file":"64.bas","demo":""},{"id":"65","category":["Rows and columns"],"name":"GetLastColumn","title":"Gets number of last filled (not empty) column in the specified row on the specified worksheet","description":"Returns number","_keywords":"получить последнюю колонку по номеру строки\nнайти последнюю колонку по номеру строки\nполучить последнюю колонку по индексу строки\nнайти последнюю колонку по индексу строки\nполучить последнюю колонку по номеру строки\nнайти последнюю колонку по номеру строки\nполучить последнюю колонку по индексу строки\nнайти последнюю колонку по индексу строки\nполучить последний столбец по номеру строки\nнайти последний столбец по номеру строки\nполучить последний столбец по индексу строки\nнайти последний столбец по индексу строки\nполучить последний столбец по номеру строки\nнайти последний столбец по номеру строки\nполучить последний столбец по индексу строки\nнайти последний столбец по индексу строки\nget last column by row index\nget last column by row number\nfind last column by row index\nfind last column by row number","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Debug.Print (GetLastColumn(ws, 1)) ' number of last filled column in row 1 on sheet 1\nEnd Sub","file":"65.bas","demo":""},{"id":"66","category":["Rows and columns"],"name":"GetEdgeRows","title":"Gets the numbers of edge rows in the range (from ... to ...)","description":"Returns array with 2 values:\n- `arr(0)` - first row in the range\n- `arr(1)` - last row in the range","_keywords":"получить номера крайних строк в диапазоне\nполучить индексы крайних строк в диапазоне\nнайти номера крайних строк в диапазоне\nнайти индексы крайних строк в диапазоне\nfind first row number in range\nfind last row number in range\nfind first row index in range\nfind last row index in range","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1:B3\")\n    Dim arr() As Long: arr = GetEdgeRows(rng)\n    Debug.Print (arr(0)) ' 1\n    Debug.Print (arr(1)) ' 3\nEnd Sub","file":"66.bas","demo":""},{"id":"67","category":["Rows and columns"],"name":"GetColumnByHeader","title":"Searches for the text in the specified row and returns the number of the column in which it was found","description":"Returns number\n\nReturns `-1` if text was not found in the specified row","_keywords":"получить номер столбца\nполучить индекс столбца\nнайти номер столбца\nнайти индекс столбца\nполучить номер колонки\nполучить индекс колонки\nнайти номер колонки\nнайти индекс колонки\nget column number\nget column index\nfind column number\nfind column index","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim headerRow&: headerRow = 1\n    Debug.Print (GetColumnByHeader(ws, \"Total\", headerRow)) ' number of the column in row 1 on sheet 1 in which the word Total was found\nEnd Sub","file":"67.bas","demo":""},{"id":"68","category":["Rows and columns"],"name":"GetRowByHeader","title":"Searches for the text in the specified column and returns the number of the row in which it was found","description":"Returns number\n\nReturns `-1` if text was not found in the specified column","_keywords":"получить номер строки\nполучить индекс строки\nнайти номер строки\nнайти индекс строки\nget row number\nget row index\nfind row number\nfind row index","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim headerCol&: headerCol = 1\n    Debug.Print (GetRowByHeader(ws, \"Total\", headerCol)) ' number of the row in column 1 on sheet 1 in which the word Total was found\nEnd Sub","file":"68.bas","demo":""},{"id":"69","category":["Text"],"name":"Includes","title":"Checks if string includes substring","description":"Returns `True` or `False`","_keywords":"проверить вхождение подстроки\nпроверить наличие подстроки\ncheck if string includes substring\ncheck if string includes another string","usage":"Sub Example()\n    Debug.Print (Includes(\"username@domain.com\", \"username\")) ' True if string includes substring\nEnd Sub","file":"69.bas","demo":""},{"id":"70","category":["Text"],"name":"GetFirstWordAfter","title":"Gets the 1st word from the text after the specified word","description":"Returns string","_keywords":"получить первое слово после\nнайти первое слово после\nget first word after\nfind first word after","usage":"Sub Example()\n    Debug.Print (GetFirstWordAfter(\"like\", \"I like apples\")) ' apples\nEnd Sub","file":"70.bas","demo":""},{"id":"71","category":["Text","Arrays"],"name":"SplitToChars","title":"Splits the specified string into an array of characters / letters","description":"Returns array of strings","_keywords":"разделить строку на символы\nразбить строку на символы\nsplit string to symbols\nsplit string to chars\nsplit string to characters","usage":"Sub Example()\n    Dim arr() As String: arr = SplitToChars(\"apple\")\n    Debug.Print (Join(arr, \", \")) ' a, p, p, l, e\nEnd Sub","file":"71.bas","demo":""},{"id":"72","category":["Text"],"name":"SliceString","title":"Extracts a substring from the string","description":"Analog of the built-in function [MID](https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/mid-function), but character position starts from `1`","_keywords":"извлечь подстроку\nизвлечить строку из другой строки\nslice string\nfind substring\nget substring","usage":"Sub Example()\n    Debug.Print (SliceString(\"I like apples\", 3, 7)) ' like\n    Debug.Print (SliceString(\"I like apples\", 8)) ' apples\nEnd Sub","file":"72.bas","demo":""},{"id":"73","category":["Transformation","Text"],"name":"Rng2String","title":"Concatenates all values from the range into a text string separated by the specified separator","description":"Returns string","_keywords":"конвертация диапазона в текст\nконвертировать диапазон в текст\nконвертация диапазона в строку\nконвертировать диапазон в строку\nconvert range to text\ntransform range to text\nconvert range to string\ntransform range to string","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1:C1\")\n    Debug.Print (Rng2String(rng, \", \")) ' No, Product, Amount\nEnd Sub","file":"73.bas","demo":""},{"id":"74","category":["Text","RegExp"],"name":"RegExpReplace","title":"Replaces all occurrences of the substring in the original string","description":"Analog of the built-in function [REPLACE](https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/replace-function), but replace is performed using a regular expression\n\nParameters:\n- `text` (**string**) - text in which to search\n- `replacePattern` (**string**) - regular expression pattern (see details in the [documentation](https://docs.microsoft.com/en-us/previous-versions//f97kw5ka(v=vs.85)))\n- `replaceValue` (**string**) - value to which all matches with `replacePattern` will be replaced\n\n[RegExp in VBA](https://docs.microsoft.com/en-us/previous-versions//yab2dx62(v=vs.85))","_keywords":"заменить все\nзаменить всё\nreplace all","usage":"Sub Example()\n    Debug.Print (RegExpReplace(\"$ncrypt$d t$xt\", \"$\", \"e\")) ' encrypted text\nEnd Sub","file":"74.bas","demo":""},{"id":"75","category":["Date and time","Macro progress"],"name":"ClassTimer","title":"Counts the execution time of the functions / procedures","description":"","_keywords":"запуск таймера\nостановить таймер\nвремя выполнения\nrun timer\nstop timer\nexecution time","usage":"Sub Example()\n    Dim myTimer As ClassTimer: Set myTimer = New ClassTimer\n    Call myTimer.Start\n    Application.Wait (Now + TimeValue(\"00:01:15\"))\n    Call myTimer.Finish\n    MsgBox \"Script execution time: \" & myTimer.GetTime(), vbInformation\nEnd Sub","file":"75.cls","demo":""},{"id":"76","category":["User defined functions","Text"],"name":"CONCATIF","title":"Performs concatenation of values in a range by the condition","description":"Analog of the built-in function [CONCAT](https://support.microsoft.com/en-us/office/concat-function-9b1a9a3f-94ff-41af-9736-694cbd6b4ca2#:~:text=The%20CONCAT%20function%20combines%20the,with%20earlier%20versions%20of%20Excel.), but with the ability to set a concatenation condition\n\nParameters:\n- `rngToCheck` (**range**) - range to be checked by pattern (column)\n- `rngToConcat` (**range**) - range to be concatenated (column)\n- `pattern` (**string**) - pattern with which the values from `rngToCheck` will be matched (see details in [documentation](https://docs.microsoft.com/ru-ru/dotnet/visual-basic/language-reference/operators/like-operator#pattern-options))\n- `separator`? (**string**) - separator (space by default)","_keywords":"сцепить если\nконкатенация по условию\nconcatenate if\nconcat if\nconditional concat","usage":"' concatenate all company names which were registered in 2020\n\"=CONCATIF(Companies[Registration date], Companies[Name], \"##.##.2020\",\", \")\"","file":"76.bas","demo":""},{"id":"77","category":["User defined functions","Date and time"],"name":"GETWORKDAYS","title":"Calculates the number of days between 2 dates minus the exception days","description":"The named range with dates that will be excluded when calculating the difference between 2 dates should be called `Holidays`","_keywords":"получить количество рабочих дней между датами\nвычислить кол-во рабочих дней между датами\nget workdays\nget dates diff","usage":"' if we will put all January holidays in Holidays named range, we will receive correct January workdays count\n\"=GETWORKDAYS(\" & Cdate(\"30.01.2022\") & \", \" & Cdate(\"01.01.2022\") & \")\"","file":"77.bas","demo":""},{"id":"78","category":["User input","Data validation"],"name":"ValidateInput","title":"Prompts you to enter a value and checks its correctness using specified pattern","description":"Check the pattern format in the [documentation](https://docs.microsoft.com/ru-ru/dotnet/visual-basic/language-reference/operators/like-operator#pattern-options)\n\nIf entered value match pattern returns the entered data (string)","_keywords":"проверка корректности ввода\nпроверка ввода на соответствие шаблону\ncheck if input valid\ncheck if input match pattern","usage":"Sub Example()\n    Dim inputDate$\n    inputDate = ValidateInput(\"Enter a date\", \"##/##/####\", \"mm/dd/yyyy\", \"Follow the format\", Date)\nEnd Sub","file":"78.bas","demo":""},{"id":"79","category":["Export"],"name":"ExportPictures","title":"Exports all the pictures from the Excel worksheet to the specified folder","description":"All pictures will be saved to the specified folder as `jpg` files","_keywords":"выгрузить изображения\nвыгрузить картинки\nсохранить изображения\nсохранить картинки\nexport pictures\nexport images\nsave pictures\nsave images","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim pathToSave$: pathToSave = \"C:\\folder\\\"\n    Call ExportPictures(ws, pathToSave)\nEnd Sub","file":"79.bas","demo":""},{"id":"80","category":["Comparison"],"name":"CompareTables","title":"Comparison of 2 tables with the same structure (identical headers, quantity and order of columns)","description":"The cells in which differences are found are colored in red, and the difference value is put in the cell note","_keywords":"сравнить таблицы\nсопоставить таблицы\ncompare tables","usage":"","file":"80.bas","demo":""},{"id":"81","category":["Transformation","Arrays"],"name":"Collection2Array","title":"Converts collection to array","description":"Returns array of collection values","_keywords":"конвертация коллекции в массив\nконвертировать коллекцию в массив\nconvert collection to array\ntransform collection to array","usage":"Sub Example()\n    Dim coll As New Collection\n    coll.Add item:=120, Key:=\"Company 1\"\n    coll.Add item:=210, Key:=\"Company 2\"\n    Dim arr() As String: arr = Collection2Array(coll)\n    Debug.Print (Join(arr, \", \")) ' 120, 210\nEnd Sub","file":"81.bas","demo":""},{"id":"82","category":["Data validation","User forms","Dropdown"],"name":"DropdownForm","title":"Drop-down list with autocomplete","description":"This solution works on top of [native drop-down lists](https://support.microsoft.com/en-us/office/create-a-drop-down-list-7693307a-59ef-400a-b769-c5402dce407b)\n\nAutocomplete allows you to find an option from a large drop-down list as you print\n\nYou can select the option from list using keyboard: `↑↓`, `Tab`, `Enter`","_keywords":"выпадающий список с автокомплитом\nвыпадающий список с автозаполнением\nвыпадающий список с поиском\ndropdown с автокомплитом\ndropdown с автозаполнением\ndropdown с поиском\ndropdown\ndropdown with autocomplete\nlist with autocomplete","usage":"Private Sub Worksheet_SelectionChange(ByVal Target As Range)\n    ' If empty cell selected\n    ' And it contains a native drop-down list (data validation with type = list)\n    ' The DropdownForm will be shown\n    If Selection.count = 1 And HasValidation(Target) Then ' @(id 53)\n        If Target.Validation.Type = 3 Then DropdownForm.Show\n    End If\nEnd Sub","file":"82.zip","demo":"82.gif"},{"id":"83","category":["User forms","Macro progress"],"name":"ProgressBar","title":"Progress bar with persentage scale and messages","description":"Displays the task completion process in % + custom text message","_keywords":"прогресс бар\nстатус выполнения\n% выполнения\nпроцент выполнения\nprogress bar","usage":"Sub Example()\n    Call ProgressBar.Update(25, \"Start...\")\n    Application.Wait (Now + TimeValue(\"00:00:02\"))\n    Call ProgressBar.Update(50, \"Half of work done...\")\n    Application.Wait (Now + TimeValue(\"00:00:02\"))\n    Call ProgressBar.Update(75, \"Almost done...\")\n    Application.Wait (Now + TimeValue(\"00:00:02\"))\n    Call ProgressBar.Update(100, \"Done\")\n    Application.Wait (Now + TimeValue(\"00:00:01\"))\n    Unload ProgressBar\nEnd Sub","file":"83.zip","demo":"83.gif"},{"id":"84","category":["Text"],"name":"FillTemplateWithData","title":"Fills in the template with data","description":"Returns a template text (eg. XML) filled with data.\n\nIn the template text, you need to put `%stubs%` in place where you want to insert data.\n\nThe data to be filled in the template must be collected in a dictionary.\n\nValues from the dictionary are converts to a string and inserted into the template instead of `%stubs%`.\n\nThe stub has the format `%key%`, where `key` is the name of the key in the dictionary.\n\nThe root dictionary with data could contains:\n\n- **string values**\n\n  The stubs `%key%` will be replaced with the corresponding values from the root dictionary.\n\n  ```\n  <Node attr1=\"%key1%\" attr2=\"%key2%\" >%key3%</Node>\n  ```\n\n  `key1`, `key2`, `key3` - root dictionary key, contains a string values\n\n- **array of dictionaries** with string values\n\n  Use this if you need to insert several identical blocks, but with different data inside.\n\n  Use *LOOP* block with stubs to indicate the beginning and end of the loop.\n\n  The node inside the *LOOP* block will be repated with the data of each array element (dictionary).\n\n  ```\n  <!-- LOOP EACH %key0% -->\n  <Node attr1=\"%key1%\" attr2=\"%key2%\" >%key3%</Node>\n  <!-- STOP LOOP %key0% -->\n  ```\n  \n  `key0` - root dictionary key, must contains an array of dictionaries with string values\n\n  `key1`, `key2`, `key3` - key of nested dictionary (each elemet of array), contains a string values\n\n- **dictionary** with string values\n\n  Use this if you need to insert any block depending on condition.\n\n  Use *IF* with stubs to indicate the beginning and end of the condition.\n\n  The node inside the *IF* block will be added to the result if root dictionary has the key `key0`.\n\n  ```\n  <!-- IF HAS %key0% -->\n  <Node attr1=\"%key1%\" attr2=\"%key2%\" >%key3%</Node>\n  <!-- END IF %key0% -->\n  ``` \n\n  `key0` - root dictionary key, must contains a dictionary with string values\n\n  `key1`, `key2`, `key3` - key of nested dictionary, contains a string values","_keywords":"заполнить шаблон данными\nзаполнение шаблона данными\nвставка данных вместо заглушек\nвставить данные вместо заглушек\nвставка данных в шаблон\nвставить данные в шаблон","usage":"Const QUOTE_CHR$ = \"&quot;\"\n\n' xml-template.txt\n\n' <?xml version=\"1.0\" encoding=\"windows-1251\"?>\n' <File>\n'     <Document DocId=\"%id%\" DocDate=\"%date%\">\n'         <!-- IF HAS %orderObj% -->\n'         <Order Num=\"%number%\">\n'             <!-- LOOP EACH %itemsArr% -->\n'             <OrderPosition Product=\"%item%\"/>\n'             <!-- STOP LOOP %itemsArr% -->\n'         </Order>\n'         <!-- END IF %orderObj% -->\n'     </Document>\n' </File>\n\nFunction GetMap() As Object\n    ' returns map with data to fill in the template\n    Dim map As Object, obj1 As Object, obj2 As Object\n    Dim arr() As Object, i&\n    \n    Set map = New Scripting.Dictionary\n\n    map(\"id\") = \"1152026\"\n    map(\"date\") = \"30.03.2021\"\n    \n    Set obj1 = New Scripting.Dictionary\n    obj1(\"number\") = \"O-456123\"\n    \n    For i = 1 To 3\n        Set obj2 = New Scripting.Dictionary\n        \n        obj2(\"item\") = \"Товар \" & i\n        \n        If i = 1 Then\n            ReDim arr(0)\n        Else\n            ReDim Preserve arr(UBound(arr) + 1)\n        End If\n        \n        Set arr(UBound(arr)) = obj2\n    Next i\n    \n    obj1(\"itemsArr\") = arr\n    Set map(\"orderObj\") = obj1\n\n    Set GetMap = map\nEnd Function\n\nSub Example()\n    Dim templatePath$: templatePath = ThisWorkbook.Path & Application.PathSeparator & \"xml-template.txt\"\n    Dim savePath$: savePath = ThisWorkbook.Path\n    \n    ' get template\n    Dim template$: template = ReadTxtFile(templatePath) ' @(id 26)\n    ' get all %stubs% from the template\n    Dim stubsArr(): stubsArr = GetStubsArr(template)\n    ' get date to fill in the template\n    Dim dataMap As Object: Set dataMap = GetMap()\n    ' fill in template with data\n    Dim result$: result = FillTemplateWithData(template, stubsArr, dataMap)\n    ' save result to the file\n    Call SaveToTxtFile(result, savePath, \"file.xml\", \"windows-1251\") ' @(id 28)\n    \n    MsgBox \"Template filled in and saved here:\" & vbNewLine & vbNewLine & savePath, vbInformation\nEnd Sub","file":"84.bas","demo":""},{"id":"85","category":["Cell notes"],"name":"SetNote","title":"Sets note in the specified cell","description":"Parameters:\n- `rng` (**range**) - ячейка\n- `flag` (**boolean**)\n  - `True` - добавить комментарий\n  - `False` - удалить комментарий\n- `comment`? (**string**) - текст комментария\n- `isVisible`? (**boolean**) - разделитель, по умолчанию пробел\n  - `True` - всегда виден\n  - `False` - виден при наведении курсора на ячейку (default)","_keywords":"добавить комментарий к ячейке\nустановить комментарий в ячейке\nвставить комментарий к ячейке\nвставка комментария в ячейку\nубрать комментарий к ячейке\nудалить комментарий из ячейки\nadd comment to cell\ninsert comment to cell\nset comment to cell\nremove comment from cell\nreset comment in cell","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"C1\")\n    Call SetNote(rng, True, \"This is cell С1\", True) ' sets note in the C1 cell on sheet 1\n    Call SetNote(rng, False) ' removes note\nEnd Sub","file":"85.bas","demo":""},{"id":"86","category":["VB project","Copy"],"name":"CopyVBProject","title":"Copies VBProject modules from one Excel file to another","description":"File in which we copy must be opened","_keywords":"копировать VB проект\nкопировать макросы\ncopy VB project\ncopy macros","usage":"Sub Example()\n    Dim wb As Workbook: Set wb = Workbooks.Add\n    Call CopyVBProject(ThisWorkbook, wb)\nEnd Sub","file":"86.bas","demo":""},{"id":"87","category":["Workbooks and worksheets"],"name":"BreakLinks","title":"Breaks links in the specified workbook","description":"Workbook's links are placed in `Edit Links` window","_keywords":"удалить связи\nудалить ссылки\nbreak links\nremove links","usage":"Sub Example()\n    Call BreakLinks(ThisWorkbook)\nEnd Sub","file":"87.bas","demo":""},{"id":"88","category":["Date and time"],"name":"IsDateBetween","title":"Checks if the specified date is in a date range","description":"Parameters:\n- `testDate` (**date**) - the date to be checked\n- `startDate` (**date**) - range's start date\n- `endDate` (**date**) - range's end date\n\nReturns `True` or `False`","_keywords":"проверить вхождение даты в диапазон\ncheck if date between two dates\ncheck if range includes date","usage":"Sub Example()\n    Dim testDate As Date: testDate = DateSerial(2022, 3, 3) ' 3 March 2022\n    Call IsDateBetween(testDate, DateSerial(2022, 3, 2), DateSerial(2022, 3, 4)) ' True\nEnd Sub","file":"88.bas","demo":""},{"id":"89","category":["Arrays"],"name":"Filter2DArr","title":"Filters 2-dim array using callback checker-function","description":"`CheckItem` callback function will check each row in 2D array\n\nYou need to specify `elementPos` - item's number in a row, which will be used to filter the row\n\nRow pass filtering if the `CheckItem` function will return `True`\n\nReturns 2-dim array with all the rows, which passed the filtering","_keywords":"фильтрация массива с помощью функции\nотфильтровать массив через функцию\nфильтрация массива\nотфильтровать массив\nfilter array with callback\nfilter array through callback\nfilter array using callback\nfilter array","usage":"Function CheckItem(ByVal item) As Boolean\n    ' callback checker-function will check each item in array\n    CheckItem = CBool(CStr(item) = \"Ivan\")\nEnd Function\n\nSub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' column A contains names: \"Ivan\", \"Alex\", \"Ivan\"\n    ' column B contants birth dates: \"10.01.1992\", \"25.03.1991\", \"13.02.1994\"\n     Dim arr(): arr = ws.Range(\"A1:B3\")\n\n    ' filtering 2-dimensional array (range) base on values in 2nd column\n    ' we want to get only rows with all men with name Ivan\n    Dim filteredArr(): filteredArr = Filter2DArr(arr, \"CheckItem\", 2)\n \n    ' 2 rows match criteria\n    Dim count&: count = GetArrLength(filteredArr) ' @(id 2)\n    Debug.Print (count) ' 2\n    \n    ' paste filtered array on the worksheet\n    Range(\"D1\").Resize(UBound(filteredArr, 1), UBound(filteredArr, 2)).Value = filteredArr\nEnd Sub","file":"89.bas","demo":""},{"id":"90","category":["Text","Arrays"],"name":"SplitToChunks","title":"Splits the specified string into an array of strings of a given length","description":"","_keywords":"разделить строку на части равно длины\nразбить строку на части равно длины\nsplit string to chunks fixed length\nsplit string to chunks fixed length\nsplit string to parts","usage":"Sub Example()\n    Dim arr() As String: arr = SplitToChunks(\"1234567890\", 2)\n    Debug.Print (Join(arr, \", \")) ' 12, 34, 56, 78, 90\nEnd Sub","file":"90.bas","demo":""},{"id":"91","category":["Rows and columns"],"name":"GetColumnNumber","title":"Gets column's number by its letter","description":"Returns number","_keywords":"получить номер столбца по букве столбца\nget column number by column char","usage":"Sub Example()\n    Debug.Print (GetColumnNumbe(\"A\")) ' 1\n    Debug.Print (GetColumnNumbe(\"C\")) ' 3\n    Debug.Print (GetColumnNumbe(\"H\")) ' 8\nEnd Sub","file":"91.bas","demo":""},{"id":"92","category":["Workbooks and worksheets"],"name":"CreateWs","title":"Creates a worksheet in the current workbook","description":"Parameters:\n- `tabName`? (**string**) - worksheet name\n- `tabColor`? (**long**) - tab color\n- `afterWs`? (**worksheet**) - worksheet after which to add a new sheet (by default at the end)\n- `needRecreate`? (**boolean**) - need to rewrite worksheet if already exists (by default False)\n\nReturns worksheet object","_keywords":"создать вкладку\nсоздать рабочий лист\nвставить рабочий лист\nвставить вкладку\nadd sheet\nadd worksheet\nadd tab\ncreate sheet\ncreate worksheet\ncreate tab","usage":"Sub Example()\n   Dim ws As Worksheet: Set ws = CreateWs(\"New sheet\", RGB(255, 0, 0), , True)\nEnd Sub","file":"92.bas","demo":""},{"id":"93","category":["Arrays"],"name":"CombineArrays","title":"Combines 2 arrays","description":"Parameters:\n- `arr1` (**variant array**) - array 1\n- `arr2` (**variant array**) - array 2\n\nReturns the combined array `arr1` + `arr2`","_keywords":"объединить массивы\nсцепить массивы\nmerge arrays\nconcatenate arrays\nconcat arrays","usage":"Sub Example()\n   Dim arr(): arr = CombineArrays(Array(1,2,3), Array(4,5))\n   Dim arrLength&: arrLength = GetArrLength(arr) ' @(id 2)\n   Debug.Print(arrLength) ' 5\nEnd Sub","file":"93.bas","demo":""},{"id":"94","category":["Testing"],"name":"Tests","title":"Adds testing (TDD) to VBA on Windows and Mac","description":"Author: Tim Hall [tim.hall.engr@gmail.com](mailto:tim.hall.engr@gmail.com)\n\nRepository: [https://github.com/VBA-tools/vba-test](https://github.com/VBA-tools/vba-test)\n\nLicense: [MIT](http://www.opensource.org/licenses/mit-license.php)","_keywords":"тестирование vba\nтесты vba\ntesting vba\ntest for vba","usage":"","file":"94.bas","demo":""},{"id":"95","category":["File system"],"name":"Logger","title":"Logs to Immediate Window by default (Ctrl + G), but can attach multiple loggers with callbacks","description":"Author: Tim Hall [tim.hall.engr@gmail.com](mailto:tim.hall.engr@gmail.com)\n\nRepository: [https://github.com/VBA-tools/VBA-Log](https://github.com/VBA-tools/VBA-Log)\n\nLicense: [MIT](http://www.opensource.org/licenses/mit-license.php)","_keywords":"логгирование\nзапись сообщения в лог файл\nзаписать сообщение в лог файл\nwrite message to log\nlog message","usage":"","file":"95.bas","demo":""},{"id":"96","category":["HTTP"],"name":"GetHtmlTable","title":"Retrieves table data from a website to Excel sheet","description":"Author: Jerus Mallari Aquino [https://github.com/Eru-js](https://github.com/Eru-js)\n\nRepository: [https://github.com/Eru-js/vba-webdata](https://github.com/Eru-js/vba-webdata)\n\nLicense: unknown","_keywords":"парсинг html таблицы с web сайта\nparse html table from web","usage":"","file":"96.bas","demo":""},{"id":"97","category":["Debug console"],"name":"ClearDebugConsole","title":"Clears VBE Immediate Window","description":"<u>Note:</u> it is not actually clear the console but shift down previously printed debug info","_keywords":"очистка консоли\nочистка debug окна\nочистка immediate window\nclear console\nclear debug window\nclear debug console\nclear immediate window","usage":"Sub Example()\n   Call ClearDebugConsole\nEnd Sub","file":"97.bas","demo":""}]