[{"id":"1","updated_at":"2023-10-29","category":["Arrays"],"name":"AddToArr","title":"Adds the specified element in 1-dim array","description":"Parameters:\n- `arr` (**variant array**) - 1-dim array\n- `element` (**variant**) - item to be pushed into array\n- `startsFrom` ? (**long**) - start index (0 by default)\n\nReturns **void** (change array in-place)","_keywords":"добавить элемент в массив\nadd element to array\nadd item to array\npush element to array\npush item to array","usage":"Sub Example()\n    Dim arr(): arr = Array(\"item1\", \"item2\")\n    Call AddToArr(arr, \"item3\")\n    Debug.Print(arr(2)) ' item3\nEnd Sub","file":"1.bas","demo":""},{"id":"2","updated_at":"2023-04-08","category":["Arrays"],"name":"GetArrLength","title":"Gets array's length (number of elements)","description":"Parameters:\n- `arr` (**variant array**) - 1-dim array\n\nReturns **number**","_keywords":"получить длину массива\nполучить количество элементов в массиве\nполучить количество элементов массива\nget array length\nget length of array\nget array size","usage":"Sub Example()\n    Dim arr(): arr = Array(\"item1\", \"item2\")\n    Debug.Print(GetArrLength(arr)) ' 2\nEnd Sub","file":"2.bas","demo":""},{"id":"3","updated_at":"2023-09-07","category":["Arrays","Convert"],"name":"Rng2Array","title":"Converts a range to array","description":"Parameters:\n- `rng` (**range**) - instance of Range class\n\nReturns **1-dim variant array** with all <u>individual items</u> from the range","_keywords":"конвертировать диапазон в массив\nконвертация диапазона в массив\nconvert range to array\ntransform range to array","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim rng As Range: Set rng = ws.Range(\"A1:A10\")\n    Dim arr(): arr = Rng2Array(rng)\n    ' paste array on the worksheet\n    ws.Range(\"A1\").Resize(Ubound(arr) + 1, 1).Value = Application.Transponse(arr)\nEnd Sub","file":"3.bas","demo":""},{"id":"4","updated_at":"2023-04-08","category":["Arrays","Assert"],"name":"IsInArray","title":"Checks if array contains the specified element","description":"Parameters:\n- `arr` (**variant array**) - 1-dim array\n- `element` (**variant**) - item to be searched in array\n\nReturns **boolean**","_keywords":"проверить наличие элемента в массиве\ncheck if element exist in array\ncheck if item exist in array\ncheck if array includes element\ncheck if array includes item","usage":"Sub Example()\n    Dim arr(): arr = Array(\"item1\", \"item2\")\n    Debug.Print(IsInArray(arr, \"item2\")) ' True\n    Debug.Print(IsInArray(arr, \"item3\")) ' False\nEnd Sub","file":"4.bas","demo":""},{"id":"5","updated_at":"2023-04-08","category":["Arrays"],"name":"FilterArr","title":"Filters 1 or 2-dim array","description":"Parameters:\n- `arr` (**variant array**) - 1 or 2-dim array\n- `element` (**variant**) - element to check array's items (array's item pass filtering if it equals specified element)\n- `elementPos` ? (**long**) - number of column to filter array / item's number in a row (in case of 2-dim array))\n\nReturns **1-dim variant array** with all <u>individual items</u> passed the filtering","_keywords":"фильтрация массива\nотфильтровать массив\nfilter array","usage":"Sub Example()\n    Dim arr(), filteredArr()\n\n    arr = Array(1, 2, 3, 1, 1, 2)\n    ' filtering 1-dimensional array\n    filteredArr = FilterArr(arr, 1)\n    Debug.Print (Join(filteredArr, \", \")) ' 1, 1, 1\n\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' column B contains numbers: 1, 3, 1\n    arr = ws.Range(\"A1:B3\")\n\n    ' filtering 2nd column of 2-dimensional array (range)\n    filteredArr = FilterArr(arr, 1, 2)\n    Debug.Print (Join(filteredArr, \", \")) ' 1, 1\nEnd Sub","file":"5.bas","demo":""},{"id":"6","updated_at":"2023-04-08","category":["Arrays"],"name":"FilterArr2","title":"Filters 1 or 2 dim array using callback checker-function","description":"Parameters:\n- `arr` (**variant array**) - 1 or 2-dim array\n- `fnName` (**string**) -  name of Function that will check every value in array, function must return `True` to include the value in the result\n- `elementPos` ? (**long**) - number of column to filter array / item's number in a row (in case of 2-dim array)\n\nReturns **1-dim variant array** with all <u>individual items</u> passed the filtering","_keywords":"фильтрация массива с помощью функции\nотфильтровать массив через функцию\nфильтрация массива\nотфильтровать массив\nfilter array with callback\nfilter array through callback\nfilter array using callback\nfilter array","usage":"Function IsValuePass(ByVal arrValue) As Boolean\n    ' callback function will check each item in array\n    ' pass numbers from 2 to 4\n    IsValuePass = CBool(arrValue >= 2 And arrValue <= 4)\nEnd Function\n\nSub Example()\n    Dim arr(), filteredArr()\n\n    arr = Array(1, 0, 1, 2, 4, 5, 10, 3, 1)\n    ' filtering 1-dimensional array\n    filteredArr = FilterArr2(arr, \"IsValuePass\")\n    Debug.Print (Join(filteredArr, \", \")) ' 2, 4, 3\n\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' column B contains numbers: 1, 3, 1\n    arr = ws.Range(\"A1:B3\")\n\n    ' filtering 2nd column of 2-dimensional array (range)\n    filteredArr = FilterArr2(arr, \"IsValuePass\", 2)\n    Debug.Print (Join(filteredArr, \", \")) ' 3\nEnd Sub","file":"6.bas","demo":""},{"id":"7","updated_at":"2023-04-08","category":["Arrays"],"name":"Filter2DArr","title":"Filters 2-dim array using multiple filtering criterias","description":"Parameters:\n- `arr` (**variant array**) - 2-dim array\n- `args` (**string array**) - 1-dim array contains filtering criterias, each filtering criteria is a **string** in the following format: `column_number=pattern`, see [documentation](https://docs.microsoft.com/ru-ru/dotnet/visual-basic/language-reference/operators/like-operator#pattern-options). <u>Example:</u> `2=##.01.####` - 2nd column's value in every row should be a date in January\n\nReturns **2-dim variant array** with all rows from the original 2-dim array passed all the filtering criterias","_keywords":"фильтрация массива\nотфильтровать массив\nfilter array","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' column A contains names: \"Ivan\", \"Alex\", \"Ivan\"\n    ' column B contains birth dates: \"10.01.1992\", \"25.03.1991\", \"13.02.1994\"\n     Dim arr(): arr = ws.Range(\"A1:B3\")\n\n    ' filtering 2-dimensional array (range)\n    ' we want to get anly rows with all men with name Ivan, born in January\n    ' only first row match all criteria\n    Dim filteredArr(): filteredArr = Filter2DArr(arr, \"1=Ivan\", \"2=##.01.####\")\n\n    Dim count&: count = GetArrLength(filteredArr) ' @dependency: 2.bas\n    Debug.Print (count) ' 1\nEnd Sub","file":"7.bas","demo":""},{"id":"8","updated_at":"2023-04-08","category":["Arrays"],"name":"SortArr","title":"Sorts 1-dim array","description":"Parameters:\n- `arr` (**variant array**) - 1-dim array\n- `isDesc` (**boolean**) - sorting order\n  - `True` - descending order, from larger to smaller\n  - `False` - ascending order, from smaller to larger (default)\n\nReturns sorted **1-dim variant array**","_keywords":"сортировка массива\nотсортировать массив\nsort array","usage":"Sub Example()\n    Dim arr(): arr = Array(-5, 3, 18, 1, 0, 4, 1, 5)\n    Dim isDesc As Boolean: isDesc = True\n     ' sorting 1-dimensional array by descending order\n    Call SortArr(arr, isDesc)\n    Debug.Print(Join(arr, \", \")) ' 18, 5, 4, 3, 1, 1, 0, -5\nEnd Sub","file":"8.bas","demo":""},{"id":"9","updated_at":"2023-04-08","category":["Arrays"],"name":"Sort2DArr","title":"Sorts 2-dim array by specified column N","description":"Parameters:\n- `arr` (**variant array**) - 2-dim array\n- `N` (**long**) - number of column to sort array / item's number in a row\n- `isDesc` (**boolean**) - sorting order\n- `True` - descending order, from larger to smaller\n- `False` - ascending order, from smaller to larger (default)\n\nReturns sorted **2-dim variant array**","_keywords":"сортировка массива\nотсортировать массив\nsort array","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' column A contains names: \"Ivan\", \"Alex\", \"Petr\"\n    ' column B contains average score: 4.4, 4.2, 4.3\n    Dim arr(): arr = ws.Range(\"A1:B3\")\n\n    Dim isDesc As Boolean: isDesc = True\n    ' sorting 2-dimensional array (range) by descending order in 2nd column (avg. score) \n    Call Sort2DArr(arr, 2, isDesc)\n\n    ' paste sorted array on the worksheet\n    ws.Range(\"A1\").Resize(UBound(arr, 1), UBound(arr, 2)).Value = arr\nEnd Sub","file":"9.bas","demo":""},{"id":"10","updated_at":"2023-04-08","category":["Arrays"],"name":"GetUniqueArr","title":"Get 1-dim array without duplicate values","description":"Parameters:\n- `arr` (**variant array**) - 1-dim array\n\nReturns **1-dim variant array** contains only unique items","_keywords":"получить массив без повторов\nполучить массив без дубликатов\nполучить массив без дублей\nget array without duplicates\nget unique array","usage":"Sub Example()\n    Dim arr(): arr = Array(1, 2, 3, 1, 1, 2)\n    ' filtering 1-dimensional array\n    Dim uniqueArr(): uniqueArr = GetUniqueArr(arr)\n    Debug.Print (Join(uniqueArr, \", \")) ' 1, 2, 3\nEnd Sub","file":"10.bas","demo":""},{"id":"11","updated_at":"2023-04-08","category":["Arrays"],"name":"GetIndexOf","title":"Get index of specified element in 1 or 2-dim array","description":"Parameters:\n- `arr` (**variant array**) - 1 of 2-dim array\n- `element` (**variant**) - item to be searched in array\n- `elementPos` ? (**long**) - number of column to search item in array / item's number in a row (in case of 2-dim array)\n\nReturns **long** (if element was not found returns -1)","_keywords":"найти индекс элемента в массиве\nполучить индекс элемента в массиве\nget element position in array\nget element index in array\nget position of element in array\nget index of element in array","usage":"Sub Example()\n    Dim arr(): arr = Array(1, 2, 3, 1, 1, 2)\n    Debug.Print (GetIndexOf(arr, 3)) ' 2\nEnd Sub","file":"11.bas","demo":""},{"id":"12","updated_at":"2023-04-08","category":["Assert","Workbooks and worksheets"],"name":"IsWbOpen","title":"Checks if specified workbook is currently open","description":"Parameters:\n- `wbName` (**string**) - name of workbook (file name + extension)\n\nReturns **boolean**","_keywords":"проверить открыта ли книга\nпроверить открыт ли файл\ncheck if workbook open\ncheck if file open","usage":"Sub Example()\n    Debug.Print (IsWbOpen(\"data.xlsx\")) ' Returns True if data.xlsx is currently open\nEnd Sub","file":"12.bas","demo":""},{"id":"13","updated_at":"2023-04-08","category":["Assert","Workbooks and worksheets"],"name":"IsWsExists","title":"Checks if specified worsheet exists in the workbook","description":"Parameters:\n- `wb` (**workbook**) - instance of Workbook class\n- `wsName` (**string**) - name of worksheet\n\nReturns **boolean**","_keywords":"проверить существует ли вкладка\nпроверить наличие листа в книге\nпроверить наличие листа в файле\ncheck if sheet exist\ncheck if worksheet exist","usage":"Sub Example()\n    Debug.Print (IsWsExists(ThisWorkbook, \"Sheet1\")) ' True if Sheet1 exist in ThisWorkbook\nEnd Sub","file":"13.bas","demo":""},{"id":"14","updated_at":"2023-04-10","category":["Convert","File system"],"name":"GetFileExtension","title":"Extracts file's extension from the file path","description":"Parameters:\n- `filePath` (**string**) - path to the file\n\nReturns **string**","_keywords":"получить расширение файла из пути к нему\nизвлечь расширение файла из пути к нему\nget file extension from path","usage":"Sub Example()\n    Debug.Print (GetFileExtension(\"C:\\folder\\filename.txt\")) ' .txt\nEnd Sub","file":"14.bas","demo":""},{"id":"15","updated_at":"2023-04-08","category":["Date and time"],"name":"GetDateSeparator","title":"Gets system date separator","description":"It depends on current user's region settings (locale)\n\nReturns **string**","_keywords":"получить разделитель дат\nget date separator\nget date delimiter","usage":"Sub Example()\n    Dim separator$: separator = GetDateSeparator()\n    Debug.Print (separator) ' dot / slash\nEnd Sub","file":"15.bas","demo":""},{"id":"16","updated_at":"2023-04-08","category":["Date and time"],"name":"GetMonthName","title":"Gets month name by its number in year","description":"Parameters:\n- `monthNum` (**long**) - number of the month in year\n\nReturns **string**","_keywords":"получить имя месяца по номеру\nполучить название месяца по номеру\nget month by index\nget month by number\nget month name by index\nget month name by number","usage":"Sub Example()\n    Debug.Print (GetMonthName(5)) ' Мay\nEnd Sub","file":"16.bas","demo":""},{"id":"17","updated_at":"2023-04-08","category":["Date and time"],"name":"GetMonthNum","title":"Gets month number in year by its name","description":"Parameters:\n- `monthName` (**string**) - name of the month\n\nReturns **long**","_keywords":"получить номер месяца по имени\nполучить индекс месяца по имени\nget month index by name\nget month number by name","usage":"Sub Example()\n    Debug.Print (GetMonthNum(\"May\")) ' 5\nEnd Sub","file":"17.bas","demo":""},{"id":"18","updated_at":"2023-04-08","category":["Date and time"],"name":"GetWeekday","title":"Gets weekday name by date","description":"Parameters:\n- `d` (**date**) - any date\n\nReturns **string** (name of weekday)","_keywords":"получить день недели по дате\nget weekday by date\nget day name by date","usage":"Sub Example()\n    Dim weekdayName$: weekdayName = GetWeekday(CDate(\"11.07.2022\"))\n    Debug.Print (weekdayName) ' monday\nEnd Sub","file":"18.bas","demo":""},{"id":"19","updated_at":"2023-04-08","category":["Date and time"],"name":"GetWeekNum","title":"Gets week number in year by date","description":"Parameters:\n- `d` (**date**) - any date\n\nReturns **long** (number of week)","_keywords":"получить номер недели по дате\nget week index by date\nget week number by date","usage":"Sub Example()\n    Dim weekNum&: weekNum = GetWeekNum(CDate(\"11.07.2022\"))\n    Debug.Print (weekNum) ' 29\nEnd Sub","file":"19.bas","demo":""},{"id":"20","updated_at":"2023-04-08","category":["Date and time"],"name":"GetDateByDayNum","title":"Gets formatted date string by number of the day in year","description":"Parameters:\n- `dayNum` (**long**) - number of the day in year\n- `yearNum` (**long**) - year\n- `dateFormat` ? (**string**) - date format, see [documentation](https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/format-function-visual-basic-for-applications#date-symbols)\n\nReturns **string**","_keywords":"получить дату по номеру дня в году\nget date by day index\nget date by day number","usage":"Sub Example()\n    Dim dayNum&: dayNum = 32\n    Dim yearNum&: yearNum = 2022\n    Dim d As Date: d = CStr(GetDateByDayNum(dayNum, yearNum, \"dd.mm.yyyy\"))\n    Debug.Print (d) ' 01.02.2022\nEnd Sub","file":"20.bas","demo":""},{"id":"21","updated_at":"2023-04-08","category":["Convert","Date and time"],"name":"UnixTime2Date","title":"Converts Unix 13-digit timestamp to a date","description":"Parameters:\n- `unixDate` (**string**) - timestamp in Unix format (13-digit)\n\nReturns **date**","_keywords":"конвертировать unix time в дату\nконвертация unix time в дату\nконвертировать юникс время в дату\nконвертация юникс время в дату\nconvert unix time to date\ntransform unix time to date","usage":"Sub Example()\n    Dim d As Date: d = UnixTime2Date(\"1443852054000\")\n    Debug.Print (d) ' 03.10.2015 6:00:54\nEnd Sub","file":"21.bas","demo":""},{"id":"22","updated_at":"2023-04-08","category":["File system"],"name":"CreateFolder","title":"Creates a folder (directory)","description":"Parameters:\n- `dirPath` (**string**) - path to the exist folder\n- `dirName` (**string**) - folder name to be created\n\nIf such folder already exists, a new one will not created\n\nReturns **boolean**","_keywords":"создать папку\nсоздать дирректорию\ncreate folder\ncreate directory","usage":"Sub Example()\n    Dim hasCreated As Boolean\n    hasCreated = CreateFolder(ThisWorkbook.path, \"New folder\")\n    Debug.Print (hasCreated) ' True if New folder was created in specified location\nEnd Sub","file":"22.bas","demo":""},{"id":"23","updated_at":"2023-04-08","category":["File system","User input"],"name":"GetFilePaths","title":"Allows to select files in dialog window","description":"Parameters:\n- `titleMessage` (**string**) - message to show on dialog's header\n- `extensionFilters` ? (**string**) - allowed file extensions in the following format: `*.ext1; *.ext2`\n- `defaultPath` ? (**string**) - start path from which we start to select files\n- `allowMulti` ? (**boolean**) - flag which allows to select multiple files, `False` by default\n\nReturns **1-dim string array** with paths to all the selected files (if nothing was selected returns an empty array)","_keywords":"получить путь к файлу\nвыбрать файл в диалоговом окне\nget file path from dialog\nselect file\nchoose file","usage":"Sub Example()\n    Dim allowMulti As Boolean: allowMulti = True\n    Dim paths() As String\n    paths = GetFilePaths(\"Select macro enabled Excel files\", \"*.xlsm; *.xlsb\", , allowMulti)\n    Debug.Print (paths(0)) ' path to the 1st selected file\n    Debug.Print (paths(1)) ' path to the 2nd selected file\nEnd Sub","file":"23.bas","demo":""},{"id":"24","updated_at":"2023-04-08","category":["Export","VB project"],"name":"ExportVBProject","title":"Exports VBProject modules from an Excel workbook","description":"Function asks to select an Excel file with macros `.xlsm` or `.xlsb` and saves all VBProject modules from the file in `./macros` folder next to selected Excel file (folder will be created if it doesn't exist)","_keywords":"сохранить VB проект\nэкспортировать VB\nсохранить макрос\nэкспортировать макрос\nsave VB project\nexport VB project\nsave VBA\nexport VBA","usage":"Sub Example()\n    Call ExportVBProject()\nEnd Sub","file":"24.bas","demo":""},{"id":"25","updated_at":"2023-04-08","category":["File system","User input"],"name":"GetFolderPath","title":"Allows to select folder (directory) in dialog window","description":"Parameters:\n- `titleMessage` (**string**) - message to show on dialog's header\n- `defaultPath` ? (**string**) - start path from which we start to select folder\n\nReturns **string** contains a path to the selected folder (if nothing was selected returns an empty string)","_keywords":"получить путь к папке\nвыбрать папку в диалоговом окне\nget folder path from dialog\nget directory path from dialog\nselect folder\nchoose folder\nselect directory\nchoose directory","usage":"Sub Example()\n    Dim path$: path = GetFolderPath(\"Select folder\")\n    Debug.Print (path) ' path to selected folder\nEnd Sub","file":"25.bas","demo":""},{"id":"26","updated_at":"2023-04-08","category":["File system"],"name":"ReadTxtFile","title":"Gets text file's content","description":"Parameters:\n- `filePath` (**string**) - path to the text file\n\nReturns **string**","_keywords":"получить содержимое файла\nполучить содержимое txt файла\nпрочитать файл\nпрочитать txt файл\nread file\nread txt file","usage":"Sub Example()\n    Dim content$: content = ReadTxtFile(\"C:\\folder\\filename.txt\")\n    Debug.Print (content)\nEnd Sub","file":"26.bas","demo":""},{"id":"27","updated_at":"2023-04-08","category":["File system"],"name":"ReadTxtFile","title":"Gets text file's content in specified encoding","description":"Parameters:\n- `filePath` (**string**) - path to the text file\n- `encoding` (**string**) - encoding in which the file will be read, `utf-8` by default, see [documentation](https://learn.microsoft.com/en-us/sql/ado/reference/ado-api/charset-property-ado?view=sql-server-ver16)\n\nReturns **string**","_keywords":"получить содержимое файла в определенной кодировке\nполучить содержимое txt файла в определенной кодировке\nпрочитать файл в определенной кодировке\nпрочитать txt файл в определенной кодировке\nread file in particular encoding\nread txt file in particular encoding","usage":"Sub Example()\n    Dim content$: content = ReadTxtFile(\"C:\\folder\\filename.txt\", \"windows-1251\")\n    Debug.Print (content)\nEnd Sub","file":"27.bas","demo":""},{"id":"28","updated_at":"2023-04-08","category":["File system"],"name":"Save2TxtFile","title":"Saves data in text file in specified encoding","description":"Parameters:\n- `text` (**string**) - file content\n- `filePath` (**string**) - path to save a text file\n- `fileName` (**string**) - name + extension\n- `encoding` (**string**) - encoding in which the file will be read, `utf-8` by default, see [documentation](https://learn.microsoft.com/en-us/sql/ado/reference/ado-api/charset-property-ado?view=sql-server-ver16)\n\nReturns **string** (path to saved file)","_keywords":"сохранить текст в файл\nсохранить текст в txt файл\nзаписать текст в файл\nзаписать текст в txt файл\nwrite text to file\nwrite text to txt file","usage":"Sub Example()\n   Debug.Print (Save2TxtFile(\"some content\", ThisWorkbook.Path, \"filename.txt\", \"windows-1251\")) ' path to saved file\nEnd Sub","file":"28.bas","demo":""},{"id":"29","updated_at":"2023-04-08","category":["Convert","File system"],"name":"GetFileName","title":"Extracts the name + extension from the file path","description":"Parameters:\n- `filePath` (**string**) - path to the file\n\nReturns **string**","_keywords":"получить имя файла из пути к нему\nизвлечь имя файла из пути к нему\nget file name from path","usage":"Sub Example()\n    Debug.Print (GetFileName(\"C:\\folder\\filename.txt\")) ' filename.txt\nEnd Sub","file":"29.bas","demo":""},{"id":"30","updated_at":"2023-04-08","category":["Cells","Formats"],"name":"AddBorders","title":"Adds solid borders to the range","description":"Parameters:\n- `rng` (**range**) - instance of Range class\n\nSolid borders will be added to the specified range (outer + inner)\n\nReturns **void**","_keywords":"добавить границы у диапазона\nдобавить границы ячейке\nadd borders to range\nadd borders to cell","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1:B3\")\n    Call AddBorders(rng)\nEnd Sub","file":"30.bas","demo":""},{"id":"31","updated_at":"2023-04-08","category":["Assert","Cells","Formats"],"name":"IsColored","title":"Checks if range is colored","description":"Parameters:\n- `rng` (**range**) - instance of Range class\n\nRange is considered as colored if its text or background color is differ from default\n\nReturns **boolean**","_keywords":"проверить окрашен ли диапазон\nпроверить цвет заливки\nпроверить цвет текста\nпроверить дефолт\ncheck if range has not default color\ncheck if cell has not default color\ncheck if range colored\ncheck if cell colored","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Debug.Print (IsColored(rng)) ' True if interior or font color is differ from default\nEnd Sub","file":"31.bas","demo":""},{"id":"32","updated_at":"2023-04-08","category":["Cells","Formats"],"name":"SetFontColor","title":"Sets specific font color","description":"Parameters:\n- `rng` (**range**) - instance of Range class\n- `color` (**variant**) - font color\n\n`color` could be specified in different formats:\n- [Excel Long](https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/data-types/long-data-type)\n- [RGB](https://en.wikipedia.org/wiki/RGB)\n- [HEX](https://en.wikipedia.org/wiki/Web_colors)\n\nReturns **void**","_keywords":"покрасить текст в диапазоне\nпокрасить текст в ячейке\nset font color in range\nset text color in range\nset font color in cell\nset text color in cell","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Call SetFontColor(rng, 10140829) ' Long\n    Call SetFontColor(rng, RGB(157, 188, 154)) ' Rgb\n    Call SetFontColor(rng, \"#9dbc9a\") ' Hex\nEnd Sub","file":"32.bas","demo":""},{"id":"33","updated_at":"2023-04-08","category":["Cells","Formats"],"name":"SetBackColor","title":"Sets specific background color","description":"Parameters:\n- `rng` (**range**) - instance of Range class\n- `color` (**variant**) - background / color\n\n`color` could be specified in different formats:\n- [Excel Long](https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/data-types/long-data-type)\n- [RGB](https://en.wikipedia.org/wiki/RGB)\n- [HEX](https://en.wikipedia.org/wiki/Web_colors)\n\nReturns **void**","_keywords":"изменить фон диапазона\nизменить фон ячейки\nset fore color in range\nset fore color in cell\nset back color in range\nset back color in cell\nset background color in range\nset background color in cell","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Call SetBackColor(rng, 10140829) ' Long\n    Call SetBackColor(rng, RGB(157, 188, 154)) ' Rgb\n    Call SetBackColor(rng, \"#9dbc9a\") ' Hex\nEnd Sub","file":"33.bas","demo":""},{"id":"34","updated_at":"2023-09-07","category":["Formats","Rows and columns"],"name":"CopyRowFormats","title":"Applies specified row's format to a range of rows (from ... to ...)","description":"Parameters:\n- `fromWs` (**worksheet**) - instance of Worksheet class (source)\n- `fromRow` (**long**) - row number (source)\n- `targetWs` (**worksheet**) - instance of Worksheet class (target)\n- `targetRowFrom` (**long**) - start row number (target)\n- `targetRowTo` (**long**) - end row number (target)\n\nReturns **void**","_keywords":"копировать формат строки\ncopy row formatting\ncopy rows formatting","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' copy format from 1st row on the worksheet number 1\n    ' and apply it to a range of rows (from 2 to 4)\n    Call CopyRowFormats(ws, 1, ws, 2, 4)\nEnd Sub","file":"34.bas","demo":""},{"id":"35","updated_at":"2023-04-08","category":["Formats","Rows and columns"],"name":"CopyColumnFormats","title":"Applies specified column's format to a range of columns (from ... to ...)","description":"Parameters:\n- `fromWs` (**worksheet**) - instance of Worksheet class (source)\n- `fromCol` (**long**) - column number (source)\n- `targetWs` (**worksheet**) - instance of Worksheet class (target)\n- `targetColFrom` (**long**) - start column number (target)\n- `targetColTo` (**long**) - end column number (target)\n\nReturns **void**","_keywords":"копировать формат столбца\nкопировать формат колонки\ncopy column formatting\ncopy columns formatting","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' copy format from 1st column on the worksheet number 1\n    ' and apply it to a range of columns (from 2 to 4)\n    Call CopyColumnFormats(ws, 1, ws, 2, 4)\nEnd Sub","file":"35.bas","demo":""},{"id":"36","updated_at":"2023-04-08","category":["Assert","Cells","Formats"],"name":"IsColoredLike","title":"Checks if range's background is colored in specific color","description":"Parameters:\n- `rng` (**range**) - instance of Range class\n- `color` (**variant**) - background color\n\n`color` could be specified in different formats:\n- [Excel Long](https://learn.microsoft.com/en-us/dotnet/visual-basic/language-reference/data-types/long-data-type)\n- [RGB](https://en.wikipedia.org/wiki/RGB)\n- [HEX](https://en.wikipedia.org/wiki/Web_colors)\n\nReturns **boolean**","_keywords":"проверить окрашен ли диапазон\nпроверить цвет заливки\ncheck if range colored\ncheck range color\ncheck range background color\ncheck cell color\ncheck cell background color","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    ' Long\n    Debug.Print (IsColoredLike(rng, 10140829)) ' True if rng has such background color\n    ' Rgb\n    Debug.Print (IsColoredLike(rng, RGB(157, 188, 154))) ' True if rng has such background color\n    ' Hex\n    Debug.Print (IsColoredLike(rng, \"#9dbc9a\")) ' True if rng has such background color\nEnd Sub","file":"36.bas","demo":""},{"id":"37","updated_at":"2023-04-08","category":["Convert"],"name":"Rgb2Long","title":"Converts RGB color to a Long Excel value","description":"Parameters:\n- `R` (**long**) - red component\n- `G` (**long**) - green component\n- `B` (**long**) - blue component\n\nFull analog of the built-in function [RGB](https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/rgb-function)\n\nReturns **long**","_keywords":"конвертировать rgb в long\nконвертация rgb в long\nконвертировать rgb в number\nконвертация rgb в number\nconvert rgb to long\ntransform rgb to long\nconvert rgb to number\ntransform rgb to number","usage":"Sub Example()\n    Debug.Print (Rgb2Long(157, 188, 154)) ' 10140829\n    Debug.Print(RGB(157, 188, 154)) ' 10140829\nEnd Sub","file":"37.bas","demo":""},{"id":"38","updated_at":"2023-04-08","category":["Convert"],"name":"Hex2Long","title":"Converts HEX color to a Long Excel value","description":"Parameters:\n- `hexColor` (**string**) - color specified in [HEX](https://ru.wikipedia.org/wiki/HTML-%D1%86%D0%B2%D0%B5%D1%82%D0%B0) format\n\nReturns **long**","_keywords":"конвертировать hex в rgb\nconvert hex to rgb\ntransform hex to rgb","usage":"Sub Example()\n    Debug.Print (Hex2Long(\"#9dbc9a\")) ' 10140829\nEnd Sub","file":"38.bas","demo":""},{"id":"39","updated_at":"2023-04-08","category":["Forms"],"name":"GetSelectedRadioBtn","title":"Finds a selected radio button on a form's frame","description":"Parameters:\n- `frameName` (**string**) - name of the [Frame control](https://learn.microsoft.com/en-us/office/vba/language/reference/user-interface-help/frame-control) which groups all the radio buttons inside\n\nReturns **instance** of MSforms.OptionButton class","_keywords":"получить выбранную радиокнопку\nнайти выбранную радиокнопку\nнайти выбранный переключатель\nget selected radiobutton in frame\nget selected radiobutton in form\nget active radiobutton in frame\nget active radiobutton in form","usage":"Private Sub CommandButton1_Click()\n    Dim radio As MSforms.OptionButton: Set radio = GetSelectedRadioBtn(\"Frame1\")\n    Debug.Print (radio.Name) ' OptionButton1\n    Unload Me\nEnd Sub","file":"39.bas","demo":""},{"id":"40","updated_at":"2023-05-13","category":["Fetch data"],"name":"SendHttpQuery","title":"Sends an HTTP query to the specified endpoint","description":"Parameters:\n- `url` (**string**) - resource path\n- `method` ? (**string**) - HTTP method\n  - GET (default)\n  - POST\n- `contentType` ? (**string**) - type of requested content, see [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type) for details\n- `reqBody` ? (**string**) - request body (only for POST requests)\n\nReturns a **string** or **collection of dictionaries** (in case of `application/json` set as a `contentType`)","_keywords":"отправить http запрос к API\nотправить веб запрос к API\nsend http query to API\nget post http query","usage":"Sub Example()\n    Const API_URL$ = \"https://jsonplaceholder.typicode.com/todos\"\n    Dim res As Object, json As Object\n        \n    Set res = SendHttpQuery(API_URL, , \"application/json\")\n\n    If res Is Nothing Or res.Count = 0 Then\n        Debug.Print (\"Empty server response\")\n        Exit Sub\n    End If\n\n    Select Case TypeName(res)\n        Case \"Collection\"\n            For Each json In res\n                Debug.Print (\"ID: \" & json(\"id\") & \", Title: \" & json(\"title\") & \", Done: \" & json(\"completed\"))\n            Next json\n        Case \"Dictionary\"\n            Set json = res\n            Debug.Print (\"ID: \" & json(\"id\") & \", Title: \" & json(\"title\") & \", Done: \" & json(\"completed\"))\n        Case Else\n            Debug.Print(res)\n     End Select\nEnd Sub","file":"40.bas","demo":""},{"id":"41","updated_at":"2023-04-08","category":["Other"],"name":"ShowInterface","title":"Shows / hide Excel user interface","description":"Parameters:\n- `flag` (**boolean**) - toggles show / hide mode\n  - `True` - show\n  - `False` - hide\n\nIt affects scroll bars, tool bars, status bar etc.\n\nOnly the workbook content remains in the screen area\n\nReturns **void**","_keywords":"скрыть интерфейс\nпоказать интерфейс\nhide interface\nshow interface","usage":"Sub Example()\n    Call ShowInterface(False) ' hide Excel user interface\n    Call ShowInterface(True) ' show it back\nEnd Sub","file":"41.bas","demo":""},{"id":"42","updated_at":"2023-04-08","category":["Convert"],"name":"JsonConverter","title":"Converts JSON string to a VBA dictionary","description":"Author: [tim.hall.engr@gmail.com](mailto:tim.hall.engr@gmail.com)\n\nRepository: [https://github.com/VBA-tools/VBA-JSON](https://github.com/VBA-tools/VBA-JSON)\n\nLicense: [MIT](http://www.opensource.org/licenses/mit-license.php)","_keywords":"конвертировать json\nконвертация json\nпарсинг json\nconvert json\nparse json","usage":"","file":"42.bas","demo":""},{"id":"43","updated_at":"2023-04-08","category":["Macro progress"],"name":"ShowProcessing","title":"Shows a message in Excel status bar","description":"Parameters:\n- `flag` (**boolean**) - toggles show / hide mode\n  - `True` - show\n  - `False` - hide\n\nReturns **void**","_keywords":"скрыть сообщение\nпоказать сообщение\nстатус-бар\nhide message\nshow message\nstatus-bar","usage":"Sub Example()\n    Call ShowProcessing(True) ' show operation execution message in status bar\n    Call ShowProcessing(False) ' hide the message\nEnd Sub","file":"43.bas","demo":""},{"id":"44","updated_at":"2023-04-08","category":["File system","Macro progress"],"name":"LogInfo","title":"Writes a new line in the log file (timestamp incuded)","description":"Parameters:\n- `logMessage` (**string**) - text to be added in the log file\n\nEvery message will be added on a brand new line and will be prefixed with a timestamp in the following format: `dd.mm.yyyy hh:mm:ss`\n\nMessage will be written in `Log.txt` file next to the current Excel workbook (file will be created if it doesn't exist)\n\nReturns **void**","_keywords":"логгирование\nзапись сообщения в лог файл\nзаписать сообщение в лог файл\nwrite message to log\nlog message\nwrite logs","usage":"Sub Example()\n    ' ...\n    Call LogInfo(\"Task 1 completed\")\n    ' …\n    Call LogInfo(\"Task 2 completed\")\nEnd Sub","file":"44.bas","demo":""},{"id":"45","updated_at":"2023-04-08","category":["Outlook"],"name":"GetCurrentUserEmail","title":"Gets current user's email from the Outlook","description":"Returns **string**","_keywords":"получить адрес почты Outlook\nполучить email адрес текущего пользователя\nget email address\nget current user email address","usage":"Sub Example()\n    Debug.Print (GetCurrentUserEmail()) ' user@domain.com\nEnd Sub","file":"45.bas","demo":""},{"id":"46","updated_at":"2023-05-09","category":["Outlook"],"name":"CreateEmail","title":"Creates an email in Outlook on behalf of current user","description":"Parameters:\n- `subject` (**string**) - email theme\n- `message` (**string**) - email content\n- `sendTo` (**string**) - emails TO listed via semicolon `;`\n- `copyTo` ? (**string**) - emails CC listed via semicolon `;`\n- `hiddenCopyTo` ? (**string**) - emails BCC listed via semicolon `;`\n- `replyTo` ? (**string**) - emails ReplyTo listed via semicolon `;` (it will replace `To` address when reply)\n- `isHtml` ? (**boolean**) - indicates if message in HTML format (default `False`)\n- `attachmentPath` ? (**string**) - path to the attachment file\n- `method` ? (**string**) - mailing method\n  - Show (default) - the email will be created in a new window, to be send manually\n  - Save - the email will be created in the Drafts folder, to be send manually\n  - Send - the email will be sent immediately\n- `importance` ? (**string**) - importance type in Outlook\n  - Low\n  - Medium (default)\n  - High\n\nReturns **void**","_keywords":"отправить письмо Outlook\nотправить email\nsend email\ncreate email\nsend mail\ncreate mail","usage":"Sub Example()\n    Dim subject$: subject = \"Some theme\"\n    Dim message$: message = \"Hello user1 and user2\"\n    Dim sendTo$: sendTo = \"user1@domain.com; user2@domain.com\"\n    Call CreateEmail(subject, message, sendTo)\nEnd Sub","file":"46.bas","demo":""},{"id":"47","updated_at":"2023-04-08","category":["Outlook"],"name":"CreateEvent","title":"Creates an event (reminder) in current user's Outlook calendar","description":"Parameters:\n- `subject` (**string**) - event theme\n- `body` (**string**) - event content\n- `startDate` (**date**) - event date (if `recurrenceType` is set this is the start date of the event series)\n- `recurrenceType` ? (**string**) - event reccurence type\n  - No (default)\n  - Daily\n  - Weekly\n  - Monthly\n  - Annual\n\nReturns **void**","_keywords":"создать событие в календаре Outlook\nсоздать напоминание в календаре Outlook\ncreate event in calendar Outlook\ncreate reminder in calendar Outlook","usage":"Sub Example()\n    Dim startDate As Date: startDate = CDate(\"12.07.2022\")\n    Dim recurrenceType$: recurrenceType = \"Monthly\"\n    Call CreateEvent(\"Some theme\", \"Some content\", startDate, recurrenceType)\nEnd Sub","file":"47.bas","demo":""},{"id":"48","updated_at":"2023-04-08","category":["Cells","Convert","Numbers"],"name":"FixNumbers","title":"Converts numbers stored as text to numbers","description":"Parameters:\n- `rng` (**range**) - instance of Range class\n\nConverts each cell in the specified range to number, for details please refer to [this article](https://support.microsoft.com/en-us/office/convert-numbers-stored-as-text-to-numbers-40105f2a-fe79-4477-a171-c5bad0f0a885)\n\nReturns **void**","_keywords":"конвертировать текст в число\nконвертация текст в число\nconvert number stored as text\ntransform number stored as text","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1:B3\")\n    Call FixNumbers(rng)\nEnd Sub","file":"48.bas","demo":""},{"id":"49","updated_at":"2023-04-08","category":["Numbers"],"name":"Round","title":"Rounds a float number to N digits after the decimal separator","description":"Parameters:\n- `strNumber` (**string**) - string representation of float number\n- `numDigits` (**long**) - number of digits after decimal separator\n\nReturns **string**","_keywords":"округлить число\nокругление числа\nдробь\nround number\nfloat double","usage":"Sub Example()\n    Debug.Print (Round(4.4, 0)) ' 4\n    Debug.Print (Round(4.8, 0)) ' 5\n    Debug.Print (Round(4.226, 2)) ' 4.23\n    Debug.Print (Round(4.45, 1)) ' 4.5\nEnd Sub","file":"49.bas","demo":""},{"id":"50","updated_at":"2023-04-08","category":["Numbers"],"name":"GetMax","title":"Finds the largest value from thе two","description":"Parameters:\n- `x` (**variant**) - 1st value\n- `y` (**variant**) - 2nd value\n\nReturns **variant**","_keywords":"получить максимальное значение\nget maximum value","usage":"Sub Example()\n    Debug.Print (GetMax(-5, 6)) ' 6\n    Debug.Print (GetMax(4.45, 4.5)) ' 4.5\nEnd Sub","file":"50.bas","demo":""},{"id":"51","updated_at":"2023-10-29","category":["Other"],"name":"TurnUpdatesOn","title":"Turns on / off Excel's interface updates","description":"Parameters:\n- `flag` (**boolean**) - toggles on / off Excel interface update\n  - `True` - turn on\n  - `False` - turn off\n\nIt affects formulas calculation, events, status bar, alerts.\n\nThis approach speeds up the execution of heavy or resource-consumption operations\n\nReturns **void**","_keywords":"отключить обновление\nвключить обновление\nturn updates on\nturn updates off\nturn on turn off","usage":"Sub Example()\n    Call TurnUpdatesOn(False) ' turn off updates of Excel interface\n    Call TurnUpdatesOn(True) ' turn it on\nEnd Sub","file":"51.bas","demo":""},{"id":"52","updated_at":"2023-04-08","category":["Cells","Notes"],"name":"AdjustNotes","title":"Adjusts all the notes on the worksheet to fit their content","description":"Parameters:\n- `ws` (**worksheet**) - instance of Worksheet class\n\nIt is handy to use after insert comments into cells using macros\n\nReturns **void**","_keywords":"ресайз комментариев\nresize notes\nadjust notes","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Call AdjustNotes(ws)\nEnd Sub","file":"52.bas","demo":""},{"id":"53","updated_at":"2023-04-08","category":["Assert","Cells"],"name":"HasValidation","title":"Checks if Data Validation was set up in the range","description":"Parameters:\n- `rng` (**range**) - instance of Range class (cell)\n\nReturns **boolean**","_keywords":"проверить наличие валидации в диапазоне\nпроверить наличие валидации в ячейке\ncheck if range has data validation\ncheck if cell has data validation\ncheck data validation","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Debug.Print (HasValidation(rng)) ' True if range has Data Validation set in it\nEnd Sub","file":"53.bas","demo":""},{"id":"54","updated_at":"2023-04-08","category":["Autofilter"],"name":"ClearFilters","title":"Clears all the worksheet's autofilters","description":"Parameters:\n- `ws` (**worksheet**) - instance of Worksheet class\n\nReturns **void**","_keywords":"снять фильтры с листа\nочистить фильтры на листе\nclear filters\nturn filters off\nturn off filters\nremove filters","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Call ClearFilters(ws)\nEnd Sub","file":"54.bas","demo":""},{"id":"55","updated_at":"2023-04-08","category":["Autofilter"],"name":"TurnFiltersOn","title":"Turns on / off the autofilters in the worksheet's header row","description":"Parameters:\n- `ws` (**worksheet**) - instance of Worksheet class\n- `headerRow` (**long**) - row number which contains table headers\n\nReturns **void**","_keywords":"включить фильтры\nактивировать фильтры\nturn filters on\nturn on filters","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim headerRow&: headerRow = 1\n    Call TurnFiltersOn(ws, headerRow)\nEnd Sub","file":"55.bas","demo":""},{"id":"56","updated_at":"2023-04-10","category":["Cells","Dropdown"],"name":"SetDropdown","title":"Sets a dropdown list in the range","description":"Parameters:\n- `rng` (**range**) - instance of Range class (cell)\n- `source` (**string**) - options source for dropdown list\n\nDropdown list - is `Data Validation` with `List` type\n\n`source` could be specified in different formats:\n- values listed via comma `,`\n- name of the range from `Name Manager`\n- column of `named table`: `table_name[column_name]`, see [ListObject](https://learn.microsoft.com/en-us/office/vba/api/excel.listobject)\n\nReturns **void**","_keywords":"установить выпадающий список\nset dropdown list\nset list\nadd dropdown\nadd list","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Call SetDropdown(rng, \"yes,no\") ' list of options listed via comma\n    Call SetDropdown(rng, \"my_list\") ' named range my_list\n    Call SetDropdown(rng, \"Options[Answers]\") ' column Answers from the named table Options\nEnd Sub","file":"56.bas","demo":""},{"id":"57","updated_at":"2023-04-08","category":["Rows and columns"],"name":"CopyRowFormulas","title":"Applies specified row's formulas to a range of rows (from ... to ...)","description":"Parameters:\n- `ws` (**worksheet**) - instance of Worksheet class\n- `fromCol` (**long**) - start column number\n- `toCol` (**long**) - end column number\n- `fromRow` (**long**) - row number (source)\n- `targetRowFrom` (**long**) - start row number (target)\n- `targetRowTo` (**long**) - end row number (target)\n\nReturns **void**","_keywords":"копировать формулы из строки\nкопировать формулы в строке\ncopy row formulas\ncopy rows formulas","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' copy formulas (columns from 3 to 4) from row 1\n    ' and apply them to the same columns but rows from 2 to 4\n    Call CopyRowFormulas(ws, 3, 4, 1, 2, 4)\nEnd Sub","file":"57.bas","demo":""},{"id":"58","updated_at":"2023-04-08","category":["Fetch data"],"name":"RefreshPQ","title":"Refreshes PowerQuery by the name of the query","description":"Parameters:\n- `queryName` (**string**) - query name in Power Query\n\nYou can execute other module immediately after refresh will be done (see the code)\n\nReturns **void**","_keywords":"обновить запрос Power Query\nrefresh query\nrefresh Power Query\nrefresh pq\nupdate query\nupdate Power Query\nupdate pq","usage":"Sub Example()\n    Call RefreshPQ(\"query_name\")\nEnd Sub","file":"58.bas","demo":""},{"id":"59","updated_at":"2023-04-08","category":["Workbooks and worksheets"],"name":"ProtectWs","title":"Protect / unprotect the specified worksheet","description":"Parameters:\n- `flag` (**boolean**) - toggles protect / unpotect worksheet\n  - `True` - protect (set password)\n  - `False` - unprotect (remove password)\n- `ws` (**worksheet**) - instance of Worksheet class\n- `password` (**string**) - worksheet's password\n\nReturns **void**","_keywords":"снять защиту с листа\nснять пароль с листа\nустановить пароль на лист\nprotect sheet\nprotect worksheet\nunprotect sheet\nunprotect worksheet","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Call ProtectWs(False, ws, \"qwerty\") ' unprotect worksheet\n    Call ProtectWs(True, ws, \"qwerty\")  ' protect worksheet\nEnd Sub","file":"59.bas","demo":""},{"id":"60","updated_at":"2023-04-08","category":["RegExp","Text"],"name":"GetRegExpMatches","title":"Gets all the pattern matches in the text","description":"Parameters:\n- `text` (**string**) - text in which to search\n- `pattern` (**string**) - see [documentation](https://docs.microsoft.com/en-us/previous-versions//f97kw5ka(v=vs.85))\n\nSee also [RegExp in VBA](https://docs.microsoft.com/en-us/previous-versions//yab2dx62(v=vs.85))\n\nReturns **string array** with all the matches","_keywords":"проверить текст регулярным выражением\nпроверить текст регуляркой\ncheck text by regular expression\ncheck text by regexp\ncheck text using regular expression\ncheck text using regexp","usage":"Sub Example()\n    Dim text$: text = \"user1@domain2.com; user2@domain2.com; user3@domain1.com\"\n    Dim pattern$: pattern = \"\\w+@domain2\\.\\w+\"\n    Dim matches(): matches = GetRegExpMatches(text, pattern)\n    Debug.Print (matches(0)) ' user1@domain2.com\n    Debug.Print (matches(1)) ' user2@domain2.com\nEnd Sub","file":"60.bas","demo":""},{"id":"61","updated_at":"2023-04-08","category":["RegExp","Text"],"name":"RegExpTest","title":"Checks if text matches the specified pattern","description":"Parameters:\n- `text` (**string**) - text in which to search\n- `pattern` (**string**) - see [documentation](https://docs.microsoft.com/en-us/previous-versions//f97kw5ka(v=vs.85))\n\nSee also [RegExp in VBA](https://docs.microsoft.com/en-us/previous-versions//yab2dx62(v=vs.85))\n\nReturns **boolean**","_keywords":"проверить текст регулярным выражением\nпроверить текст регуляркой\ncheck text by regular expression\ncheck text by regexp\ncheck text using regular expression\ncheck text using regexp","usage":"Sub Example()\n    Dim text$: text = \"user1@domain1.com\"\n    Dim pattern$: pattern = \"\\w+@domain1\\.\\w+\"\n    Debug.Print (RegExpTest(text, pattern)) ' True if text matched the pattern\nEnd Sub","file":"61.bas","demo":""},{"id":"62","updated_at":"2023-10-29","category":["RegExp","Text"],"name":"GetRegExpFirstMatch","title":"Gets the 1-st pattern match in the text","description":"Parameters:\n- `text` (**string**) - text in which to search\n- `pattern` (**string**) - see [documentation](https://docs.microsoft.com/en-us/previous-versions//f97kw5ka(v=vs.85))\n\nSee also [RegExp in VBA](https://docs.microsoft.com/en-us/previous-versions//yab2dx62(v=vs.85))\n\nReturns **string**","_keywords":"проверить текст регулярным выражением\nпроверить текст регуляркой\ncheck text by regular expression\ncheck text by regexp\ncheck text using regular expression\ncheck text using regexp","usage":"Sub Example()\n    Dim text$: text = \"user1@domain2.com; user2@domain2.com; user3@domain1.com\"\n    Dim pattern$: pattern = \"\\w+@domain2\\.\\w+\"\n    Debug.Print (GetRegExpFirstMatch(text, pattern)) ' user1@domain2.com\nEnd Sub","file":"62.bas","demo":""},{"id":"63","updated_at":"2023-04-08","category":["Rows and columns"],"name":"GetColumnName","title":"Gets column's name by its number","description":"Parameters:\n- `colNum` (**long**) - column number\n\nReturns **string**","_keywords":"получить букву по номеру колонки\nполучить букву по номеру столбца\nполучить букву по индексу колонки\nполучить букву по индексу столбца\nполучить имя колонки по номеру колонки\nполучить имя колонки по индексу колонки\nget column char by column index\nget column char by column number\nget column letter by column index\nget column letter by column number\nget column name by column index\nget column name by column number","usage":"Sub Example()\n    Debug.Print (GetColumnName(1)) ' A\n    Debug.Print (GetColumnName(3)) ' C\n    Debug.Print (GetColumnName(8)) ' H\nEnd Sub","file":"63.bas","demo":""},{"id":"64","updated_at":"2023-04-08","category":["Rows and columns"],"name":"GetLastRow","title":"Gets number of last not empty row","description":"Parameters:\n- `ws` (**worksheet**) - instance of Worksheet class\n- `colNum` ? (**long**) - column number to search last row (if not provided - returns the last used row on the sheet)\n\nReturns **long**","_keywords":"получить последнюю строку по номеру колонки\nнайти последнюю строку по номеру колонки\nполучить последнюю строку по индексу колонки\nнайти последнюю строку по индексу колонки\nполучить последнюю строку по номеру столбца\nнайти последнюю строку по номеру столбца\nполучить последнюю строку по индексу столбца\nнайти последнюю строку по индексу столбца\nget last row by column index\nget last row by column number\nfind last row by column index\nfind last row by column number","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim colNum&: colNum = 1\n    Debug.Print (GetLastRow(ws, colNum)) ' number of last not empty row\nEnd Sub","file":"64.bas","demo":""},{"id":"65","updated_at":"2023-04-08","category":["Rows and columns"],"name":"GetLastColumn","title":"Gets number of last not empty column","description":"Parameters:\n- `ws` (**worksheet**) - instance of Worksheet class\n- `rowNum` ? (**long**) - row number to search last column (if not provided - returns the last used column on the sheet)\n\nReturns **long**","_keywords":"получить последнюю колонку по номеру строки\nнайти последнюю колонку по номеру строки\nполучить последнюю колонку по индексу строки\nнайти последнюю колонку по индексу строки\nполучить последнюю колонку по номеру строки\nнайти последнюю колонку по номеру строки\nполучить последнюю колонку по индексу строки\nнайти последнюю колонку по индексу строки\nполучить последний столбец по номеру строки\nнайти последний столбец по номеру строки\nполучить последний столбец по индексу строки\nнайти последний столбец по индексу строки\nполучить последний столбец по номеру строки\nнайти последний столбец по номеру строки\nполучить последний столбец по индексу строки\nнайти последний столбец по индексу строки\nget last column by row index\nget last column by row number\nfind last column by row index\nfind last column by row number","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim rowNum&: rowNum = 1\n    Debug.Print (GetLastColumn(ws, rowNum)) ' number of last not empty column\nEnd Sub","file":"65.bas","demo":""},{"id":"66","updated_at":"2023-04-08","category":["Rows and columns"],"name":"GetEdgeRows","title":"Gets edge row numbers in the range (from ... to ...)","description":"Parameters:\n- `rng` (**range**) - instance of Range class\n\nReturns **long array** with 2 values:\n- `arr(0)` - first row in the range\n- `arr(1)` - last row in the range","_keywords":"получить номера крайних строк в диапазоне\nполучить индексы крайних строк в диапазоне\nнайти номера крайних строк в диапазоне\nнайти индексы крайних строк в диапазоне\nfind first row number in range\nfind last row number in range\nfind first row index in range\nfind last row index in range\nget edge rows in range\nfind edge rows in range","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1:B3\")\n    Dim arr() As Long: arr = GetEdgeRows(rng)\n    Debug.Print (arr(0)) ' 1\n    Debug.Print (arr(1)) ' 3\nEnd Sub","file":"66.bas","demo":""},{"id":"67","updated_at":"2023-04-08","category":["Rows and columns"],"name":"GetColumnByHeader","title":"Gets column number by value match in headers row","description":"Parameters:\n- `ws` (**worksheet**) - instance of Worksheet class\n- `headerValue` (**string**) - value to search in row with headers\n- `headerRow` (**long**) -  row number which contains table headers\n\nReturns **long** (if header value was not found in the specified row returns -1)","_keywords":"получить номер столбца\nполучить индекс столбца\nнайти номер столбца\nнайти индекс столбца\nполучить номер колонки\nполучить индекс колонки\nнайти номер колонки\nнайти индекс колонки\nget column number\nget column index\nfind column number\nfind column index","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim headerRow&: headerRow = 1\n    Debug.Print (GetColumnByHeader(ws, \"Total\", headerRow)) ' number of the column in row 1 on sheet 1 in which the word Total was found\nEnd Sub","file":"67.bas","demo":""},{"id":"68","updated_at":"2023-04-08","category":["Rows and columns"],"name":"GetRowByHeader","title":"Gets row number by value match in headers column","description":"Parameters:\n- `ws` (**worksheet**) - instance of Worksheet class\n- `headerValue` (**string**) - value to search in column with headers\n- `headerCol` (**long**) -  column number which contains table headers\n\nReturns **long** (if header value was not found in the specified column returns -1)","_keywords":"получить номер строки\nполучить индекс строки\nнайти номер строки\nнайти индекс строки\nget row number\nget row index\nfind row number\nfind row index","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim headerCol&: headerCol = 1\n    Debug.Print (GetRowByHeader(ws, \"Total\", headerCol)) ' number of the row in column 1 on sheet 1 in which the word Total was found\nEnd Sub","file":"68.bas","demo":""},{"id":"69","updated_at":"2023-04-08","category":["Assert","Text"],"name":"HasSubstring","title":"Checks if a string includes substring","description":"Parameters:\n- `str` (**string**) - string to search sub string in it\n- `subStr` (**string**) - sub string to be searched inside the string\n\nReturns **boolean**","_keywords":"проверить вхождение подстроки\nпроверить наличие подстроки\ncheck if string includes substring\ncheck if string includes another string","usage":"Sub Example()\n    Debug.Print (HasSubstring(\"username@domain.com\", \"username\")) ' True if string includes substring\nEnd Sub","file":"69.bas","demo":""},{"id":"70","updated_at":"2023-04-08","category":["Text"],"name":"GetFirstWordAfter","title":"Finds the 1-st word after the specified word in text","description":"Parameters:\n- `searchWord` (**string**) - word to be searched inside the string\n- `str` (**string**) - string to search specified word in it\n\nReturns **string**","_keywords":"получить первое слово после\nнайти первое слово после\nget first word after\nfind first word after","usage":"Sub Example()\n    Debug.Print (GetFirstWordAfter(\"like\", \"I like apples\")) ' apples\nEnd Sub","file":"70.bas","demo":""},{"id":"71","updated_at":"2023-04-08","category":["Arrays","Text"],"name":"SplitToChars","title":"Splits a string into array of symbols","description":"Parameters:\n- `str` (**string**) - string to be splitted into single symbols array\n\nReturns **string array**","_keywords":"разделить строку на символы\nразбить строку на символы\nsplit string to symbols\nsplit string to chars\nsplit string to characters","usage":"Sub Example()\n    Dim arr() As String: arr = SplitToChars(\"apple\")\n    Debug.Print (Join(arr, \", \")) ' a, p, p, l, e\nEnd Sub","file":"71.bas","demo":""},{"id":"72","updated_at":"2023-04-08","category":["Text"],"name":"SliceString","title":"Extracts a substring from the specified string","description":"Parameters:\n- `textString` (**string**) - string to be sliced\n- `beginIndex` (**long**) - start slicing from ... symbol\n- `endIndex` ? (**long**) - end slicing by the 1 symbol before ... symbol\n\nAnalog of the built-in function [MID](https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/mid-function), but character position starts from 1\n\nReturns **string**","_keywords":"извлечь подстроку\nизвлечить строку из другой строки\nslice string\nfind substring\nget substring","usage":"Sub Example()\n    Debug.Print (SliceString(\"I like apples\", 3, 7)) ' like\n    Debug.Print (SliceString(\"I like apples\", 8)) ' apples\nEnd Sub","file":"72.bas","demo":""},{"id":"73","updated_at":"2023-04-08","category":["Convert"],"name":"Rng2String","title":"Concatenates range's values using specified delimiter","description":"Parameters:\n- `rng` (**range**) - instance of Range class\n- `delimiter` (**string**) - what to place between range values\n- `fnName` ? (**string**) -  name of Function that will check every value in range, function must return `True` to include the value in the result\n\nReturns **string**","_keywords":"конвертация диапазона в текст\nконвертировать диапазон в текст\nконвертация диапазона в строку\nконвертировать диапазон в строку\nconvert range to text\ntransform range to text\nconvert range to string\ntransform range to string","usage":"Function IsValuePass(ByVal cellValue) As Boolean\n    ' callback function will check each cell in range\n    ' pass cells that contains value fits the format dd.mm.yyyy\n    IsValuePass = CBool(cellValue Like \"##.##.####\")\nEnd Function\n\nSub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1:A10\")\n    Dim result$: result = Rng2String(rng, Chr(10), \"IsValuePass\")\n    Debug.Print (result)\nEnd Sub","file":"73.bas","demo":""},{"id":"74","updated_at":"2023-04-08","category":["RegExp","Text"],"name":"RegExpReplace","title":"Replaces all the string occurrences in the original string","description":"Parameters:\n- `text` (**string**) - text in which to search\n- `replacePattern` (**string**) - see [documentation](https://docs.microsoft.com/en-us/previous-versions//f97kw5ka(v=vs.85))\n- `replaceValue` (**string**) - value to replace all `replacePattern` matches\n\n Analog of the built-in function [REPLACE](https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/replace-function), but replace is performed using a regular expression\n\nSee also [RegExp in VBA](https://docs.microsoft.com/en-us/previous-versions//yab2dx62(v=vs.85))\n\nReturns **string**","_keywords":"заменить все\nзаменить всё\nreplace all","usage":"Sub Example()\n    Debug.Print (RegExpReplace(\"$ncrypt$d t$xt\", \"$\", \"e\")) ' encrypted text\nEnd Sub","file":"74.bas","demo":""},{"id":"75","updated_at":"2022-10-18","category":["Classes","Date and time","Macro progress"],"name":"ClassTimer","title":"Counts the execution time of the functions / procedures","description":"Class instance methods:\n- `Start` - starts counting\n- `Finish` - stops counting\n- `GetTime` - returns execution time string `hh:mm:ss`","_keywords":"запуск таймера\nостановить таймер\nвремя выполнения\nrun timer\nstop timer\ncalc execution time\nclass timer","usage":"Sub Example()\n    Dim myTimer As ClassTimer: Set myTimer = New ClassTimer\n    Call myTimer.Start\n    Application.Wait (Now + TimeValue(\"00:01:15\"))\n    Call myTimer.Finish\n    MsgBox \"Script execution time: \" & myTimer.GetTime(), vbInformation\nEnd Sub","file":"75.cls","demo":""},{"id":"76","updated_at":"2023-04-08","category":["Text","User defined functions"],"name":"CONCATIF","title":"Conditional concatenation of range's values","description":"Parameters:\n- `rngToCheck` (**range**) - instance of Range class, range to be checked by pattern (column)\n- `rngToConcat` (**range**) - instance of Range class, range to be concatenated (column)\n- `pattern` (**string**) - pattern with which values from `rngToCheck` should match, see [documentation](https://docs.microsoft.com/ru-ru/dotnet/visual-basic/language-reference/operators/like-operator#pattern-options)\n- `separator` ? (**string**) - what will be inserted between `rngToConcat` items, space by default\n\nAnalog of the built-in function [CONCAT](https://support.microsoft.com/en-us/office/concat-function-9b1a9a3f-94ff-41af-9736-694cbd6b4ca2#:~:text=The%20CONCAT%20function%20combines%20the,with%20earlier%20versions%20of%20Excel.) with conditional concatenation\n\nReturns **string**","_keywords":"сцепить если\nконкатенация по условию\nconcatenate if\nconcat if\nconditional concatenation","usage":"' concatenate all company names which were registered in 2020\n\"=CONCATIF(Companies[Registration date], Companies[Name], \"##.##.2020\",\", \")\"","file":"76.bas","demo":""},{"id":"77","updated_at":"2023-04-08","category":["Date and time","User defined functions"],"name":"GETWORKDAYS","title":"Counts days number between 2 dates (except holidays)","description":"Parameters:\n- `startDate` (**date**) - start of period\n- `endDate` (**date**) - end of period\n\nThe named range with dates that will be excluded when calculating the difference between 2 dates should be called `Holidays`\n\nReturns **long**","_keywords":"получить количество рабочих дней между датами\nвычислить кол-во рабочих дней между датами\nget workdays\nget dates diff","usage":"' workdays count in January 2022 (ut all January holidays in Holidays named range)\n\"=GETWORKDAYS(\" & Cdate(\"01.01.2022\") & \", \" & Cdate(\"30.01.2022\") & \")\"","file":"77.bas","demo":""},{"id":"78","updated_at":"2023-04-08","category":["User input"],"name":"ValidateInput","title":"Prompts to enter a value with verifying the input using pattern","description":"Parameters:\n- `textRequest` (**string**) - message to show on dialog\n- `checkPattern` (**string**) - pattern to check input, see [documentation](https://docs.microsoft.com/ru-ru/dotnet/visual-basic/language-reference/operators/like-operator#pattern-options)\n- `textPattern` (**string**) - pattern description\n- `textWarning` ? (**string**) - additional dialog message\n- `defaultInput` ? (**string**) - default input value\n\nReturns the entered data (**string**) if entered value matches the pattern","_keywords":"проверка корректности ввода\nпроверка ввода на соответствие шаблону\ncheck if input valid\ncheck if input match pattern","usage":"Sub Example()\n    Dim inputDate$\n    inputDate = ValidateInput(\"Enter a date\", \"##/##/####\", \"mm/dd/yyyy\", \"Follow the format\", Date)\nEnd Sub","file":"78.bas","demo":""},{"id":"79","updated_at":"2023-04-08","category":["Export"],"name":"ExportPictures","title":"Exports all the pictures from the worksheet","description":"Parameters:\n- `ws` (**worksheet**) - instance of Worksheet class\n- `pathToSave` (**string**) - path to the folder where pictures will be saved\n\nAll pictures will be saved to the specified folder as `.jpg` files\n\nReturns **void**","_keywords":"выгрузить изображения\nвыгрузить картинки\nсохранить изображения\nсохранить картинки\nexport pictures\nexport images\nsave pictures\nsave images","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim pathToSave$: pathToSave = \"C:\\folder\\\"\n    Call ExportPictures(ws, pathToSave)\nEnd Sub","file":"79.bas","demo":""},{"id":"80","updated_at":"2023-04-08","category":["Other"],"name":"CompareTables","title":"Compares values in two same structured tables","description":"Tables must have the same headers and order of columns\n\nIf difference found cell will be colored in red, diff value will be added to cell's note","_keywords":"сравнить таблицы\nсопоставить таблицы\ncompare tables","usage":"","file":"80.bas","demo":""},{"id":"81","updated_at":"2023-04-08","category":["Arrays","Convert"],"name":"Collection2Array","title":"Converts a collection to an array","description":"Parameters:\n- `coll` (**object**) - instance of Collection class\n\nReturns **variant array**","_keywords":"конвертация коллекции в массив\nконвертировать коллекцию в массив\nconvert collection to array\ntransform collection to array","usage":"Sub Example()\n    Dim coll As New Collection\n    coll.Add item:=120, Key:=\"Company 1\"\n    coll.Add item:=210, Key:=\"Company 2\"\n    Dim arr() As String: arr = Collection2Array(coll)\n    Debug.Print (Join(arr, \", \")) ' 120, 210\nEnd Sub","file":"81.bas","demo":""},{"id":"82","updated_at":"2023-05-13","category":["Dropdown","Forms"],"name":"DropdownForm","title":"Drop-down list with autocomplete","description":"This solution works on top of [native drop-down lists](https://support.microsoft.com/en-us/office/create-a-drop-down-list-7693307a-59ef-400a-b769-c5402dce407b)\n\nDrop down list - is `Data Validation` with `List` type\n\nAutocomplete allows you to find an option from a large drop-down list as you print\n\nYou can select the option from list using keyboard: `↑↓`, `Tab`, `Enter`\n\nConvenient to use with long drop-down lists.","_keywords":"выпадающий список с автокомплитом\nвыпадающий список с автозаполнением\nвыпадающий список с поиском\ndropdown с автокомплитом\ndropdown с автозаполнением\ndropdown с поиском\ndropdown\ndropdown with autocomplete\nlist with autocomplete","usage":"Private Sub Worksheet_SelectionChange(ByVal Target As Range)\n    ' If empty cell selected\n    ' And it contains a native drop-down list (data validation with type = list)\n    ' The DropdownForm will be shown\n    If Selection.count = 1 And HasValidation(Target) Then ' @dependency: 53.bas\n        If Target.Validation.Type = 3 Then DropdownForm.Show\n    End If\nEnd Sub","file":"82.zip","demo":"82.gif"},{"id":"83","updated_at":"2022-09-30","category":["Forms","Macro progress"],"name":"ProgressBar","title":"Shows popup with persentage scale and message","description":"Parameters of `Update` method:\n- `percent` (**long**) - % of task completion progress (0 - 100)\n- `message` (**string**) - text message","_keywords":"прогресс бар\nстатус выполнения\n% выполнения\nпроцент выполнения\nprogress bar","usage":"Sub Example()\n    Call ProgressBar.Update(25, \"Start...\")\n    Application.Wait (Now + TimeValue(\"00:00:02\"))\n    Call ProgressBar.Update(50, \"Half of work done...\")\n    Application.Wait (Now + TimeValue(\"00:00:02\"))\n    Call ProgressBar.Update(75, \"Almost done...\")\n    Application.Wait (Now + TimeValue(\"00:00:02\"))\n    Call ProgressBar.Update(100, \"Done\")\n    Application.Wait (Now + TimeValue(\"00:00:01\"))\n    Unload ProgressBar\nEnd Sub","file":"83.zip","demo":"83.gif"},{"id":"84","updated_at":"2023-10-29","category":["Other"],"name":"InsertData2XmlTemplate","title":"Fills in the template with data","description":"Returns a template text (eg. XML) filled with data.\n\nIn the template text, you need to put `%stubs%` in place where you want to insert data.\n\nThe data to be filled in the template must be collected in a dictionary.\n\nValues from the dictionary are converts to a string and inserted into the template instead of `%stubs%`.\n\nThe stub has the format `%key%`, where `key` is the name of the key in the dictionary.\n\nThe root dictionary with data could contains:\n\n- **string values**\n\n  The stubs `%key%` will be replaced with the corresponding values from the root dictionary.\n\n  ```\n  <Node attr1=\"%key1%\" attr2=\"%key2%\" >%key3%</Node>\n  ```\n\n  `key1`, `key2`, `key3` - root dictionary key, contains a string values\n\n- **array of dictionaries** with string values\n\n  Use this if you need to insert several identical blocks, but with different data inside.\n\n  Use *LOOP* block with stubs to indicate the beginning and end of the loop.\n\n  The node inside the *LOOP* block will be repated with the data of each array element (dictionary).\n\n  ```\n  <!-- LOOP EACH %key0% -->\n  <Node attr1=\"%key1%\" attr2=\"%key2%\" >%key3%</Node>\n  <!-- STOP LOOP %key0% -->\n  ```\n  \n  `key0` - root dictionary key, must contains an array of dictionaries with string values\n\n  `key1`, `key2`, `key3` - key of nested dictionary (each elemet of array), contains a string values\n\n- **dictionary** with string values\n\n  Use this if you need to insert any block depending on condition.\n\n  Use *IF* with stubs to indicate the beginning and end of the condition.\n\n  The node inside the *IF* block will be added to the result if root dictionary has the key `key0`.\n\n  ```\n  <!-- IF HAS %key0% -->\n  <Node attr1=\"%key1%\" attr2=\"%key2%\" >%key3%</Node>\n  <!-- END IF %key0% -->\n  ``` \n\n  `key0` - root dictionary key, must contains a dictionary with string values\n\n  `key1`, `key2`, `key3` - key of nested dictionary, contains a string values","_keywords":"заполнить XML шаблон данными\nзаполнение XML шаблона данными\nвставка данных вместо заглушек\nвставить данные вместо заглушек\nвставка данных в шаблон\nвставить данные в шаблон\npaste data to XML template\ninsert data into XML template\ncreate XML","usage":"Const QUOTE_CHR$ = \"&quot;\"\n\n' xml-template.txt\n\n' <?xml version=\"1.0\" encoding=\"windows-1251\"?>\n' <File>\n'     <Document DocId=\"%id%\" DocDate=\"%date%\">\n'         <!-- IF HAS %orderObj% -->\n'         <Order Num=\"%number%\">\n'             <!-- LOOP EACH %itemsArr% -->\n'             <OrderPosition Product=\"%item%\"/>\n'             <!-- STOP LOOP %itemsArr% -->\n'         </Order>\n'         <!-- END IF %orderObj% -->\n'     </Document>\n' </File>\n\nFunction GetMap() As Object\n    ' Returns map with data to fill in the XML template\n\n    Dim map As Object, obj1 As Object, obj2 As Object\n    Dim arr() As Object, i&\n    \n    Set map = New Scripting.Dictionary\n\n    map(\"id\") = \"1152026\"\n    map(\"date\") = \"30.03.2021\"\n    \n    Set obj1 = New Scripting.Dictionary\n    obj1(\"number\") = \"O-456123\"\n    \n    For i = 1 To 3\n        Set obj2 = New Scripting.Dictionary\n        \n        obj2(\"item\") = \"Product \" & i\n        \n        If i = 1 Then\n            ReDim arr(0)\n        Else\n            ReDim Preserve arr(UBound(arr) + 1)\n        End If\n        \n        Set arr(UBound(arr)) = obj2\n    Next i\n    \n    obj1(\"itemsArr\") = arr\n    Set map(\"orderObj\") = obj1\n\n    Set GetMap = map\nEnd Function\n\nSub Example()\n    Dim sep$: sep = Application.PathSeparator\n    Dim templatePath$: templatePath = ThisWorkbook.Path\n    Dim saveToPath$: saveToPath = ThisWorkbook.Path\n    \n    ' Get XML template\n    Dim template$: template = ReadTxtFile(templatePath & sep & \"xml-template.txt\") ' @dependency: 26.bas\n    ' Get %stubs% array from the template\n    Dim stubsArr(): stubsArr = GetStubsArr(template)\n    ' Get data\n    Dim dataMap As Object: Set dataMap = GetMap()\n    ' Insert data into template\n    Dim result$: result = InsertData2XmlTemplate(template, stubsArr, dataMap)\n    ' Remove technical and empty lines\n    result = CleanResult(result)\n    ' Save result to the XML file\n    Call SaveToTxtFile(result, saveToPath, \"result.xml\", \"windows-1251\") ' @dependency: 28.bas\n    \n    MsgBox \"XML file has been created:\" & vbLf & vbLf & saveToPath, vbInformation\nEnd Sub","file":"84.bas","demo":""},{"id":"85","updated_at":"2023-04-08","category":["Cells","Notes"],"name":"SetNote","title":"Sets a note in the specified cell","description":"Parameters:\n- `rng` (**range**) - instance of Range class\n- `flag` (**boolean**) - toggles add / remove mode\n  - `True` - add note\n  - `False` - remove note\n- `comment` ? (**string**) - note content\n- `isVisible` ? (**boolean**) - toggles note's visibility\n  - `True` - always visible\n  - `False` - visible on hover (default)\n\nReturns **void**","_keywords":"добавить комментарий к ячейке\nустановить комментарий в ячейке\nвставить комментарий к ячейке\nвставка комментария в ячейку\nубрать комментарий к ячейке\nудалить комментарий из ячейки\nadd note to cell\ninsert note to cell\nset note to cell\nremove note from cell\nreset note in cell\nset comment in cell\nadd comment to cell","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"C1\")\n    Call SetNote(rng, True, \"This is cell С1\", True) ' sets note in the C1 cell on sheet 1\n    Call SetNote(rng, False) ' removes note\nEnd Sub","file":"85.bas","demo":""},{"id":"86","updated_at":"2023-04-08","category":["VB project"],"name":"CopyVBProject","title":"Copies VBProject modules from one Excel file to another","description":"Parameters:\n- `srcWb` (**workbook**) - instance of Workbook class (source)\n- `wb` (**workbook**) - instance of Workbook class (target)\n\nFile in which we are copy should be opened\n\nReturns **void**","_keywords":"копировать VB проект\nкопировать макросы\ncopy VB project\ncopy macros","usage":"Sub Example()\n    Dim wb As Workbook: Set wb = Workbooks.Add\n    Call CopyVBProject(ThisWorkbook, wb)\nEnd Sub","file":"86.bas","demo":""},{"id":"87","updated_at":"2023-04-08","category":["Other"],"name":"BreakLinks","title":"Breaks links in the specified workbook","description":"Parameters:\n- `wb` (**workbook**) - instance of Workbook class\n\nYou can find workbook's links in `Data` → `Edit Links`\n\nReturns **void**","_keywords":"удалить связи\nудалить ссылки\nbreak links\nremove links","usage":"Sub Example()\n    Call BreakLinks(ThisWorkbook)\nEnd Sub","file":"87.bas","demo":""},{"id":"88","updated_at":"2023-04-08","category":["Assert","Date and time"],"name":"IsDateBetween","title":"Checks if the specified date is included in a date range","description":"Parameters:\n- `testDate` (**date**) - date to be checked\n- `startDate` (**date**) - range start\n- `endDate` (**date**) - range end\n\nReturns **boolean**","_keywords":"проверить вхождение даты в диапазон\ncheck if date between two dates\ncheck if range includes date","usage":"Sub Example()\n    Dim testDate As Date: testDate = DateSerial(2022, 3, 3) ' 3 March 2022\n    Call IsDateBetween(testDate, DateSerial(2022, 3, 2), DateSerial(2022, 3, 4)) ' True\nEnd Sub","file":"88.bas","demo":""},{"id":"89","updated_at":"2023-04-08","category":["Arrays"],"name":"Filter2DArr","title":"Filters 2-dim array using callback checker-function","description":"Parameters:\n- `arr` (**variant array**) - 2-dim array\n- `fnName` (**string**) -  name of Function that will check every value (row) in array, function must return `True` to include the value (row) in the result\n- `elementPos` ? (**long**) - number of column to filter array / item's number in a row\n\nReturns **2-dim variant array** with all the rows passed the filtering","_keywords":"фильтрация массива с помощью функции\nотфильтровать массив через функцию\nфильтрация массива\nотфильтровать массив\nfilter array with callback\nfilter array through callback\nfilter array using callback\nfilter array","usage":"Function IsValuePass(ByVal arrValue) As Boolean\n    ' callback function will check each item in array\n    IsValuePass = CBool(CStr(arrValue) = \"Ivan\")\nEnd Function\n\nSub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' column A contains names: \"Ivan\", \"Alex\", \"Ivan\"\n    ' column B contants birth dates: \"10.01.1992\", \"25.03.1991\", \"13.02.1994\"\n     Dim arr(): arr = ws.Range(\"A1:B3\")\n\n    ' filtering 2-dimensional array (range) base on values in 2nd column\n    ' we want to get only rows with all men with name Ivan\n    Dim filteredArr(): filteredArr = Filter2DArr(arr, \"IsValuePass\", 2)\n \n    ' 2 rows match criteria\n    Dim count&: count = GetArrLength(filteredArr) ' @dependency: 2.bas\n    Debug.Print (count) ' 2\n    \n    ' paste filtered array on the worksheet\n    Range(\"D1\").Resize(UBound(filteredArr, 1), UBound(filteredArr, 2)).Value = filteredArr\nEnd Sub","file":"89.bas","demo":""},{"id":"90","updated_at":"2023-04-08","category":["Arrays","Text"],"name":"SplitToChunks","title":"Splits a string into a string array of a given length","description":"Parameters:\n- `text` (**string**) - string to be chunked\n- `numOfChars` (**long**) - chunk's size\n\nReturns **string array**","_keywords":"разделить строку на части равно длины\nразбить строку на части равно длины\nsplit string to chunks fixed length\nsplit string to chunks fixed length\nsplit string to parts","usage":"Sub Example()\n    Dim arr() As String: arr = SplitToChunks(\"1234567890\", 2)\n    Debug.Print (Join(arr, \", \")) ' 12, 34, 56, 78, 90\nEnd Sub","file":"90.bas","demo":""},{"id":"91","updated_at":"2023-04-08","category":["Rows and columns"],"name":"GetColumnNumber","title":"Gets column's number by its name","description":"Parameters:\n- `colName` (**string**) - name (letter index) of the column\n\nReturns **long**","_keywords":"получить номер столбца по имени столбца\nполучить номер столбца по букве столбца\nполучить номер колонки по букве колонки\nполучить номер колонки по имени колонки\nполучить индекс колонки по букве колонки\nполучить индекс колонки по имени колонки\nget column index by column char\nget column number by column char\nget column index by column letter\nget column number by column letter\nget column index by column name\nget column number by column name","usage":"Sub Example()\n    Debug.Print (GetColumnNumbe(\"A\")) ' 1\n    Debug.Print (GetColumnNumbe(\"C\")) ' 3\n    Debug.Print (GetColumnNumbe(\"H\")) ' 8\nEnd Sub","file":"91.bas","demo":""},{"id":"92","updated_at":"2023-04-08","category":["Workbooks and worksheets"],"name":"CreateWs","title":"Creates a new worksheet in the current workbook","description":"Parameters:\n- `tabName` ? (**string**) - name of worksheet to be created\n- `tabColor` ? (**long**) - color of workseet's tab\n- `afterWs` ? (**worksheet**) - instance of Worksheet class, sheet after which a new sheet will be added (after the last sheet by default)\n- `needRecreate` ? (**boolean**) - toggles whether need to recreate sheet if its already exists, `False` by default\n\nReturns **instance** of Worksheet class","_keywords":"создать вкладку\nсоздать рабочий лист\nвставить рабочий лист\nвставить вкладку\nadd sheet\nadd worksheet\nadd ws\nadd tab\ncreate sheet\ncreate worksheet\ncreate ws\ncreate tab","usage":"Sub Example()\n   Dim ws As Worksheet: Set ws = CreateWs(\"New sheet\", RGB(255, 0, 0), , True)\nEnd Sub","file":"92.bas","demo":""},{"id":"93","updated_at":"2023-04-08","category":["Arrays"],"name":"CombineArrays","title":"Combines 2 arrays together","description":"Parameters:\n- `arr1` (**variant array**) - array 1\n- `arr2` (**variant array**) - array 2\n\nReturns combined **array** `arr1` + `arr2`","_keywords":"объединить массивы\nсцепить массивы\nmerge arrays\nconcatenate arrays\nconcat arrays","usage":"Sub Example()\n   Dim arr(): arr = CombineArrays(Array(1,2,3), Array(4,5))\n   Dim arrLength&: arrLength = GetArrLength(arr) ' @dependency: 2.bas\n   Debug.Print(arrLength) ' 5\nEnd Sub","file":"93.bas","demo":""},{"id":"94","updated_at":"2023-04-08","category":["Classes","Tests"],"name":"VBA tests","title":"Testing library for VBA","description":"Author: [tim.hall.engr@gmail.com](mailto:tim.hall.engr@gmail.com)\n\nRepository: [https://github.com/VBA-tools/vba-test](https://github.com/VBA-tools/vba-test)\n\nLicense: [MIT](http://www.opensource.org/licenses/mit-license.php)","_keywords":"тестирование vba\nтесты vba\ntesting vba\ntest for vba\ntests","usage":"","file":"94.bas","demo":""},{"id":"95","updated_at":"2023-04-08","category":["File system","Macro progress"],"name":"Logger","title":"Write logs to Immediate Window (can attach multiple loggers with callbacks)","description":"Author: [tim.hall.engr@gmail.com](mailto:tim.hall.engr@gmail.com)\n\nRepository: [https://github.com/VBA-tools/VBA-Log](https://github.com/VBA-tools/VBA-Log)\n\nLicense: [MIT](http://www.opensource.org/licenses/mit-license.php)","_keywords":"логгирование\nзапись сообщения в лог файл\nзаписать сообщение в лог файл\nwrite message to log\nlog message\nwrite logs","usage":"","file":"95.bas","demo":""},{"id":"96","updated_at":"2023-04-08","category":["Fetch data"],"name":"GetHtmlTable","title":"Retrieves table data from a website to Excel sheet","description":"Author: [Jerus Mallari Aquino](https://github.com/Eru-js)\n\nRepository: [https://github.com/Eru-js/vba-webdata](https://github.com/Eru-js/vba-webdata)\n\nLicense: unknown","_keywords":"парсинг html таблицы с web сайта\nparse html table from web","usage":"","file":"96.bas","demo":""},{"id":"97","updated_at":"2023-04-12","category":["Other"],"name":"ClearDebugConsole","title":"Clears Immediate Window","description":"<u>Note:</u> it's a workaround cause it's not actually clears the console but shifts down previously printed debug lines","_keywords":"очистка консоли\nочистка debug окна\nочистка immediate window\nclear console\nclear debug window\nclear debug console\nclear immediate window","usage":"Sub Example()\n   Call ClearDebugConsole\nEnd Sub","file":"97.bas","demo":""},{"id":"98","updated_at":"2023-04-08","category":["RegExp","Text"],"name":"GetRegExpSubMatches","title":"Gets all the pattern sub matches in the text","description":"Parameters:\n- `text` (**string**) - text in which to search\n- `pattern` (**string**) - see [documentation](https://docs.microsoft.com/en-us/previous-versions//f97kw5ka(v=vs.85))\n- `keepFirstSub` ? (**boolean**) - toggles whether need to return only 1st sub matches for each match, `True` by default\n\nSee also [RegExp in VBA](https://docs.microsoft.com/en-us/previous-versions//yab2dx62(v=vs.85))\n\nReturns **string array** with all the <u>sub</sub> matches","_keywords":"проверить текст регулярным выражением\nпроверить текст регуляркой\ncheck text by regular expression\ncheck text by regexp\ncheck text using regular expression\ncheck text using regexp","usage":"Sub Example()\n    Dim htmlText$: htmlText = \"\" _\n    & \"<ul>\" & vbLf _\n    & \"\" _\n    & \"<article>\" & vbLf _\n    & \"<h2>Article 1</h2>\" & vbLf _\n    & \"<img src=\"\"https://site.com/image/1.png\"\" width=\"\"100\"\" />\" & vbLf _\n    & \"</article>\" & vbLf _\n    & \"\" _\n    & \"<article>\" & vbLf _\n    & \"<h2>Article 2</h2>\" & vbLf _\n    & \"<img src=\"\"https://site.com/image/2.png\"\" width=\"\"200\"\" />\" & vbLf _\n    & \"</article>\" & vbLf _\n    & \"\" _\n    & \"</ul>\"\n    Dim pattern$: pattern = \"<img\\s*.*width=\"\"(\\d*)\"\".*\\/?>\"\n    Dim subMatches(): subMatches = GetRegExpMatches(htmlText:=text, pattern:=\"<img\\s*.*width=\"\"(\\d*)\"\".*\\/?>\", keepFirstSub:=False)\n    Debug.Print (subMatches(0)(0)) ' 100\n    Debug.Print (subMatches(1)(0)) ' 200\nEnd Sub","file":"98.bas","demo":""},{"id":"99","updated_at":"2023-04-08","category":["Date and time"],"name":"GetTimeStamp","title":"Gets current timestamp string","description":"A timestamp has the following format: `yyyy-mm-dd hh:mm:ss:mss`\n\nReturns **string**","_keywords":"метка времени\nтекущая дата и время\ntimestamp\ncurrent date and time","usage":"Sub Example()\n    Dim t$: t = GetTimeStamp()\n    Debug.Print (t) ' 2022-12-05 12:23:58:835\nEnd Sub","file":"99.bas","demo":""},{"id":"100","updated_at":"2023-04-08","category":["Environment"],"name":"GetDisplayResolution","title":"Gets current display's resolution (width x height)","description":"Returns **long array** with 2 values:\n- `arr(0)` - X axis size\n- `arr(1)` - Y axis size","_keywords":"разрешение экрана\nразрешение дисплея\nразмер экрана\nразмер дисплея\nscreen resolution\nscreen size","usage":"Sub Example()\n    Dim res() As Long: res = GetDisplayResolution()\n    Debug.Print (res(0) & \" x \" & res(1)) ' 1680 x 1050\nEnd Sub","file":"100.bas","demo":""},{"id":"101","updated_at":"2023-05-09","category":["Other","VB project"],"name":"ConfigSheet","title":"Way to keep VB project config on a separate worksheet","description":"Author: [ArtCapCorn](https://habr.com/ru/users/ArtCapCorn)\n\nHabr post: [https://habr.com/ru/post/690298](https://habr.com/ru/post/690298)\n\nConvenient  if you'd like to allow user to adjust configuration without necessary change a macros.\n\nThe code must be placed inside the Worksheet object.\n\nIn the example `Config` is the Name attribute of the Worksheet.","_keywords":"конфигурация vb project\nvba config sheet","usage":"Sub Example()\n    ' Get the value by key\n    Debug.Print(Config.Key(\"MY_KEY\")) ' my value\n    ...\n    ' Override previous value\n    Config.Key(\"MY_KEY\") = \"my value new\"\nEnd Sub","file":"101.cls","demo":""},{"id":"102","updated_at":"2023-09-07","category":["Arrays","Classes","Data structures"],"name":"ClassArray","title":"Stack / queue / list implementation","description":"Class instance properties:\n- `Values` (**variant array**) - array's elements\n\nClass instance methods:\n- `Reset` - removes all elements from the array\n- `GetLenght` - returns the number of elements in array\n- `Push` - adds element to the end\n- `Pop` - removes and returns tail element\n- `Shift` - removes and returns head element, shift `←` others\n- `Unshift` - adds head element, shift `→` others\n- `Includes` - checks if the element is in array, returns `boolean`\n- `PushFromRng` - adds elements from the range\n- `PasteToRng` - paste array elements to the range\n- `RemoveDuplicates` - keeps only unique elements\n- `Combine` - merges 2 arrays together, returns merged `array`\n- `Sort` - sort array in-place (`asc` order is default)\n- `Filter` - filter array by value, returns filtered `array`\n- `Filter2` - filters array using callback function, returns filtered `array`\n- `IndexOf` - returns the index of element in array or `-1` if it wasn't found\n\nData structure is based on VBA 1-dim arrays","_keywords":"класс для работы с массивами\nclass array","usage":"Function AssertElement(ByVal element As Variant) As Boolean\n    ' callback function will check each item from array\n    ' pass numbers which contains digit 5\n    AssertElement = CBool(CStr(element) Like \"*5*\")\nEnd Function\n\nSub Example()\n\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n\n    Dim a As New ClassArray\n    Dim b As New ClassArray\n    Dim c As New ClassArray\n    Dim d As New ClassArray\n    \n    ' Push (add element to the end)\n    a.Push element:=Array(1, 2)\n    a.Push element:=\"123\"\n    a.Push element:=0\n    a.Push element:=\"123\"\n    \n    ' Pop (remove tail element)\n    Dim lastElem: lastElem = a.Pop() ' Array(1, 2)\n    \n    ' Shift (remove head element and shift <- others)\n    Dim firstElem: firstElem = a.Shift() ' \"123\"\n    \n    ' Unshift (add head element and shift -> others)\n    a.Unshift element:=\"3\"\n    Debug.Print (a.Values(0)) ' 3\n    \n    ' Check if the element is in array\n    Debug.Print (a.Includes(\"12\")) ' False\n    Debug.Print (a.Includes(\"123\")) ' True\n    \n    ' Add elements from the range\n    a.PushFromRng rng:=ws.Range(\"A1:C1\")\n    \n    ' Keep only unique elements\n    a.RemoveDuplicates\n    \n    ' Reassign values\n    a.Values = Array(5, 6, \"55\", 6)\n    Debug.Print (a.GetLenght()) ' 4\n    \n    ' Find index of element\n    Debug.Print (a.IndexOf(element:=\"55\")) ' 2\n    \n    ' Merge 2 arrays together\n    b.Values = a.Combine(arr:=Array(1, 0, 1))\n    Debug.Print (b.GetLenght()) ' 7\n    \n    ' Sort / Filter\n    a.Sort isDesc:=True\n    c.Values = a.Filter(filterValue:=6) ' [6, 6]\n    Debug.Print (c.GetLenght()) ' 2\n    d.Values = a.Filter2(assertFunc:=\"AssertElement\") ' [\"55\", 5]\n    Debug.Print (d.GetLenght()) ' 2\n    \n    ' Paste array elements to the range\n    c.PasteToRng rng:=ws.Range(\"A1\"), inRow:=True ' row orientation (range A1:C1 contains [6, 6])\n    d.PasteToRng rng:=ws.Range(\"A3\") ' column orientation (range A3:A4 contains [\"55\", 5])\n    \nEnd Sub","file":"102.cls","demo":""},{"id":"103","updated_at":"2023-04-08","category":["Active Directory"],"name":"GetADInfo","title":"Gets info from Active Directory","description":"Parameters:\n- `objectClass` (**string**) - AD class of object (e.g. users, groups, computers)\n- `searchByAttr` (**string**) - attribute that we search by\n- `searchString` (**string**) - search parameter\n- `returnAttr` (**string**) - attribute to retrieve\n\nDon't forget to change `LDAP_DOMAIN` constant inside the function.\n\nLDAP attributes mapping: [link 1](https://activedirectorypro.com/ad-ldap-field-mapping), [link 2](https://social.technet.microsoft.com/wiki/contents/articles/6822.active-directory-attributes-in-the-aduc-gui-tool.aspx), [link 3](https://www.computerperformance.co.uk/logon/active-directory-attributes), [link 4](https://www.rlmueller.net/UserAttributes.htm)\n\nReturns one of the following:\n- **variant** (desired attribute from the first match)\n- **array of variant** (desired attribute from all matches)","_keywords":"поиск в Active Directory\nпоиск аккаунтов в Active Directory\nпоиск групп в Active Directory\nget active directory attribute\nget active directory field\nget active directory property\nget ad attribute\nget ad field\nget ad property\nsearch accounts\nsearch groups","usage":"Sub Example()\n    Dim objectClass$: objectClass = \"users\"\n    Dim searchByAttr$: searchByAttr = \"mail\"\n    Dim returnAttr$: returnAttr = \"samAccountName\"\n    Dim userLogin$: userLogin = GetADInfo(objectClass, searchByAttr, \"john.doe@example.com\", returnAttr)\n    Debug.Print(userLogin) ' john.doe\nEnd Sub","file":"103.bas","demo":""},{"id":"104","updated_at":"2023-04-08","category":["Environment"],"name":"GetCurrentUserLogin","title":"Gets current user's login","description":"The function uses built-in [Environ](https://excelvba.ru/code/environ) function to get the current user's login\n\nUsually login is the same as [samAccountName](https://social.technet.microsoft.com/wiki/contents/articles/6822.active-directory-attributes-in-the-aduc-gui-tool.aspx#User_Account_tab) attribute from Active Directory\n\nReturns **string**","_keywords":"получить имя текущего пользоватля\nполучить логин текущего пользователя\nполучить имя текущего юзера\nполучить логин текущего юзера\nполучить имя пользователя\nполучить логин пользователя\nполучить имя юзера\nполучить логин юзера\nget current user login\nget current user name\nget user login\nget user name","usage":"Sub Example()\n    Debug.Print(GetCurrentUserLogin()) ' john.doe\nEnd Sub","file":"104.bas","demo":""},{"id":"105","updated_at":"2023-10-29","category":["Rows and columns"],"name":"ExpandCollapseRowCol","title":"Expandes / collapses grouped rows and columns on the sheet","description":"Parameters:\n- `ws` (**worksheet**) - instance of Worksheet class\n- `mode` ? (**string**) - allows to specify the operation to perform\n  - `expand` - show (open) grouped rows and columns\n  - `collapse` - hide (close) grouped rows and columns\n\nIf `mode` is not passed then it works as a toggle button: you can use one macro to both (expand / collapse) operations in turn\n\nReturns **void**","_keywords":"скрыть / открыть колонки\nскрыть / открыть строки\nсвернуть / развернуть строки\nсвернуть / развернуть колонки\nсгруппировать / разгрупировать колонки\nсгруппировать / разгрупировать строки\nexpand / collapse columns\nexpand / collapse rows\ngroup / ungroup columns\ngroup / ungroup rows","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(\"Sheet1\")\n\n    Call ExpandCollapseRowCol(ws, mode:=\"expand\")  ' Expand\n    Call ExpandCollapseRowCol(ws, mode:=\"collapse\") ' Collapse\n\n    Call ExpandCollapseRowCol(ws)   ' toggle Expand / Collapse\nEnd Sub","file":"105.bas","demo":""},{"id":"106","updated_at":"2023-04-05","category":["Errors","Forms"],"name":"ErrorHandling","title":"Way to manage errors (aka exceptions)","description":"This macros intended to handline errors aka exceptions in you VBA project.\n\nSupports raising (throwing) your own custom errors specific to your project as well as general Excel errors.\n\n1. Extract  the `.zip` and import the files to you VBA project:\n   - `ErrorCustom` module\n   - `ErrorHandler` module\n   - `ErrorForm` form\n2. Describe your custom errors in `ErrorCustom` module\n   - `ErrorCustomCodes` enum - your custom <u>error codes</u> (whatever)\n   - `ErrorCustomProblems` dictionary - your custom <u>error descriptions</u> (whats wrong)\n   - `ErrorCustomSolutions` dictionary - your custom <u>error solutions</u> (what user should do)\n3. Put Tech Support contact person in `SUPPORT_PERSON_EMAIL` const in `ErrorForm` form\n4. Now you're ready to use custom error handling\n5. Call the `RaiseErr` Sub in other project modules when you want to display custom error\n6. Make sure the module where you call `RaiseErr` Sub has proper error handling (see the example of usage below)","_keywords":"обработка ошибок\nобработка исключений\nerror handling\nraise error\nraise exception\nthrow error\nthrow exception","usage":"Sub Example()\n    \n    On Error GoTo ErrorHandler\n\n    ' ... Some other module code ...\n\n    Dim value&: value = 101\n\n    ' Check the value and raise (throw) a custom error\n\n    Dim isValidValue As Boolean: isValidValue  = Cbool(value < 100)\n\n    If Not isValidValue Then\n        Call ErrorCustom.RaiseErr( _\n            ErrorCustomCodes.InvalidValue, _\n            \"The value didn't pass the check\" _\n            & vbLf & \"Workbook: \" & Thisworkbook.Name _\n            & vbLf & \"Sheet: \" & ActiveSheet.Name _\n            & vbLf & \"Value: \" & value _\n            & vbLf & \"Valiation rule: \" & \"Must be < 100\", _\n            \"Module|Sub|Operation: ModuleName|Example|Check the value\" _\n        )\n    End If\n\n    ' ... Some other module code ...\n\n    ' General Excel errors will be caught by ErrorHandler\n\n    value = value / 0\n\nExitSub:\n\n    ' Put here any always-executed (cleanup) code\n    ' This is something like Finally block\n\n    Exit Sub\n\nErrorHandler:\n\n    ErrObj.code = Err.Number\n    ErrObj.problem = Err.Description\n    ErrObj.source = Err.Source\n        \n    Select Case ErrorHandler.HandleErr(ErrObj)\n        Case ERR_FORM_CMD_RETRY\n            Resume\n        Case ERR_FORM_CMD_DEBUG\n            Stop\n            Resume\n        Case ERR_FORM_CMD_END\n            Err.Clear\n            Resume ExitSub\n    End Select\n\nEnd Sub","file":"106.zip","demo":"106.png"},{"id":"107","updated_at":"2023-04-08","category":["Rows and columns"],"name":"GetSelectedRows","title":"Gets number array of currently selected rows","description":"You can choose multiple rows on a sheet and get an array of selected rows (only visible rows)\n\nReturns **array of variant**","_keywords":"получить выбранные строки на листе\nполучить выделенные строки на листе\nget selected rows on a sheet\nget rows from selection","usage":"Sub Example()\n    Debug.Print(Join(GetSelectedRows(), \", \")) ' 1, 2, 5, 6, 10\nEnd Sub","file":"107.bas","demo":""},{"id":"108","updated_at":"2023-04-05","category":["Active Directory","Forms"],"name":"SearchADInfoForm","title":"Searches accounts and groups within Active Directory","description":"You can choose:\n- What to search in AD: accounts or groups\n- What AD attribute to use as a search query: `CN` or `samAccountName`\n- How to search: approximate or exact match\n- What AD attribute to retrieve as a result: `samAccountName` or `CN`","_keywords":"поиск в Active Directory\nпоиск аккаунтов в Active Directory\nпоиск групп в Active Directory\nget active directory attribute\nget active directory field\nget active directory property\nget ad attribute\nget ad field\nget ad property\nsearch accounts\nsearch groups","usage":"Sub Example()\n    SearchADInfoForm.Show\nEnd Sub","file":"108.zip","demo":"108.png"},{"id":"109","updated_at":"2023-04-08","category":["Other"],"name":"OpenUrl","title":"Opens any website in default browser","description":"Parameters:\n- `url` (**string**) - URL address to be opened\n\nReturns **void**","_keywords":"открыть сслыку в барузере\nоткрыть адрес в браузере\nopen link\nopen url\nopen browser","usage":"Sub Example()\n    Call OpenUrl(\"https://google.com\")\nEnd Sub","file":"109.bas","demo":""},{"id":"110","updated_at":"2023-03-12","category":["Forms","User input"],"name":"SelectRngForm","title":"Range picker","description":"Allows to select a range from the sheet","_keywords":"выбрать диапазон\nвыбор диапазона\nвыбор ячейки\nвыбор ячеки\nselect range\nrange picker","usage":"Sub Example()\n    SelectRngForm.Show\nEnd Sub","file":"110.zip","demo":"110.gif"},{"id":"111","updated_at":"2023-10-29","category":["Date and time","Forms","User input"],"name":"CalendarForm","title":"Date picker (calendar)","description":"Allows to select a date from calendar form","_keywords":"выбор даты\nкалендарь\nselect date\ndate picker\ncalendar","usage":"Sub Example()\n    CalendarForm.Show vbModeless\nEnd Sub","file":"111.zip","demo":"111.gif"},{"id":"112","updated_at":"2023-04-08","category":["File system"],"name":"UnzipFile","title":"Extracts all files from a ZIP archive","description":"Parameters:\n- `zippedFilePath` (**string**) - path to `.zip` file\n\nReturns **string** (path to the extracted files)\n\nFile will be saved into the `%temp%` folder","_keywords":"извлечь файлы из zip архива\nизвлечь файлы из зип архива\nраспаковать zip архив\nраспаковать зип архив\nunpack zip archive\nextract files from zip archive","usage":"Sub Example()\n    Debug.Print (UnzipFile(\"C:\\folder\\archive.zip\")) ' C:\\Users\\user\\AppData\\Local\\Temp\\new_folder_with_files\nEnd Sub","file":"112.bas","demo":""},{"id":"113","updated_at":"2023-04-08","category":["Assert","VB project"],"name":"IsVBModuleExists","title":"Checks if VBProject contains specified module","description":"Parameters:\n- `vbModuleName` (**string**) - name of the VB project module\n- `wb` (**workbook**) - instance of Workbook class\n\nReturns **boolean**","_keywords":"проверить наличие модуля в проекте VBA\nпроверить есть ли модуль в проекте VBA\nпроверить импортирован ли модуль в проект VBA\ncheck if module exists in VB project\ncheck if module was already imported in VB project","usage":"Sub Example()\n    Debug.Print (IsVBModuleExists(\"MyModule.bas\", ThisWorkbook)) ' True if module exists in specified workbook\nEnd Sub","file":"113.bas","demo":""},{"id":"114","updated_at":"2023-04-08","category":["Fetch data","File system"],"name":"DownloadFile","title":"Downloads a file from internet","description":"Parameters:\n- `url` (**string**) - URL address to file\n\nReturns **string** (path to saved file)\n\nFile will be saved into the `%temp%` folder","_keywords":"скачать файл из интернета\nскачать файл с сети\ndownload the file from the internet\ndownload the file from the web","usage":"Sub Example()\n    Debug.Print (DownloadFile(\"https://example.com/files/filename.txt\")) ' C:\\Users\\user\\AppData\\Local\\Temp\\filename.txt\nEnd Sub","file":"114.bas","demo":""},{"id":"115","updated_at":"2023-04-12","category":["Text"],"name":"RepeatStrNTimes","title":"Repeats a string several times","description":"Parameters:\n- `str` (**string**) - text to be concatenated `n` times\n- `n` (**long**) - number of times to repeat the `str`\n\nReturns **string**","_keywords":"повторить строку несколько раз\nсцепить строку несколько раз\nумножить строку несколько раз\nrepeats string several times\nconcatenate string several times\nconcat string several times\nmultiplu string","usage":"Sub Example()\n    Debug.Print(RepeatStrNTimes(\"~\", 5)) ' ~~~~~\nEnd Sub","file":"115.bas","demo":""},{"id":"116","updated_at":"2023-09-07","category":["File system","User input"],"name":"GetFileFromDialog","title":"Allows to selected an Excel file in dialog","description":"Parameters:\n- `titleMessage` (**string**) - title indicates what file to select\n\nReturns **instance of Workbook class**","_keywords":"открыть файл\nвыбрать эксель файл в диалоговом окне\nget Excel workbook instance from dialog\nselect Excel workbook\nselect Excel file\nchoose Excel workbook\nchoose Excel file","usage":"Sub Example()\n   Dim wb As Workbook: Set wb = GetFileFromDialog(\"Select file with data\")\n   Debug.Print(wb.Name) ' data.xlsx\nEnd Sub","file":"116.bas","demo":""},{"id":"117","updated_at":"2023-05-13","category":["Text"],"name":"CountString","title":"Counts the substring occurrences","description":"Parameters:\n- `text` (**string**) - original string\n- `str` (**string**) - substring which occurrences will be counted\n\nReturns **number**","_keywords":"посчитать число вхождений строки в другую строку\nпосчитать количество вхождений подстроки в исходную строку\ncount substring occurrences\ncount number of string occurrences\ncount string duplicates","usage":"Sub Example()\n    Debug.Print(CountString(\"apple berry apple banana\", \"apple\")) ' 2\nEnd Sub","file":"117.bas","demo":""},{"id":"118","updated_at":"2023-09-07","category":["Assert"],"name":"IsNamedRangeExists","title":"Checks if named range exists or not","description":"Parameters:\n- `ws` (**worksheet**) - instance of Worksheet class to look the named range for\n- `rngName` (**string**) - name of the range (the same as in `Name Manager`)\n\nReturns **boolean**","_keywords":"проверить наличие именованного диапазона\nпроверить наличие имени\ncheck if named range exists\ncheck if name exists","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Debug.Print(IsNamedRangeExists(ws, \"my_named_range\")) ' True\nEnd Sub","file":"118.bas","demo":""},{"id":"119","updated_at":"2023-09-07","category":["Cells","Other"],"name":"AddLinkToWs","title":"Puts a link to the sheet in specified cell","description":"Parameters:\n- `linkRng` (**range**) - instance of Range class to put a link inside\n- `wsName` (**string**) - sheet's name on which the link must lead to\n\nReturns **void**","_keywords":"добавить ссылку на лист\nдобавить гиперссылку на лист\nвставить ссылку на лист\nвставить гиперссылку на лист\nссылка на лист\nгиперссылка на лист\nadd link to sheet\nadd link to worksheet\nadd hyperlink to sheet\nadd hyperlink to worksheet","usage":"Sub Example()\n    Dim ws1 As Worksheet: Set ws1 = ThisWorkbook.Sheets(1)\n    Dim ws2 As Worksheet: Set ws2 = ThisWorkbook.Sheets(2)\n    Call AddLinkToWs(ws1.Range(\"C3\"), ws2.Name)\nEnd Sub","file":"119.bas","demo":""},{"id":"120","updated_at":"2023-10-29","category":["File system"],"name":"ReadClosedExcelFile","title":"Reads single cell value from Excel file without openning it","description":"Parameters:\n- `wbPath` (**string**) - path to Excel file\n- `wbName` (**string**) - name of Excel file (including extension)\n- `wsName` (**string**) - sheet's name containing the cell\n- `cellAddress` (**string**) - cell's address (e.g. A1)\n\nReturns **variant**","_keywords":"считать значение из закрытого Excel файла\nсчитать значение из закрытой Excel книги\nпрочитать закрытый Excel файл\nпрочитать закрытую Excel книгу\nread closed Excel file\nread closed Excel workbook\nread cell from closed Excel file\nread cell from closed Excel workbook","usage":"Sub Example()\n   Dim val: val = ReadClosedExcelFile _\n      wbPath:=\"C:\\folder\", _\n      wbName:=\"my file.xlsx\", _\n      wsName:=\"Sheet1\", _\n      cellAddress:=\"A1\"\n   Debug.Print(val)\nEnd Sub","file":"120.bas","demo":""},{"id":"121","updated_at":"2023-10-29","category":["Workbooks and worksheets"],"name":"CopyWs","title":"Creates a copy of the sheet","description":"Parameters:\n- `wsToCopy` (**worksheet**) - instance of Worksheet class which will be copied\n- `afterWs` (**worksheet**) - instance of Worksheet class after which copy will be placed\n- `copiedWsName` (**string**) - sheet's name of the copy\n\nReturns **void**","_keywords":"скопировать лист\nкопирование листа\nскопировать вкладку\nкопирование вкладки\ncopy sheet\ncopy worksheet","usage":"Sub Example()\n    Dim ws1 As Worksheet: Set ws1 = ThisWorkbook.Sheets(1)\n    Dim ws2 As Worksheet: Set ws2 = ThisWorkbook.Sheets(2)\n    Call CopyWs( _\n        wsToCopy:=ws1, _\n        afterWs:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count), _\n        copiedWsName:=\"This sheet is a copy of ws1\" _\n    )\nEnd Sub","file":"121.bas","demo":""},{"id":"122","updated_at":"2023-09-07","category":["Classes","Data structures"],"name":"ClassTable","title":"Makes it easier to work with tables","description":"Class instance properties:\n- `TableName` (**string**) - table's name\n- `Range` (**range**) - instance of Range class, whole range of the table\n- `Sheet` (**worksheet**) - instance of Worksheet class on which table is placed\n- `LastColumnNum` (**long**) - number of last column\n- `HeadersRow` (**range**) - instance of Range class, only header row\n- `Rows` (**range**) - instance of Range, body of the table (without header row)\n- `RowsVisible` (**range**) - instance of Range, rows of the table those not hidden (on which a filter applied)\n\nClass instance methods:\n- `Reset` - removes the table from `Name Manager`\n- `Create` - creates the table in `Name Manager`\n- `GetCell` - searches table's cell in specified table's column using filter in the following format `column::value` (or exact row index), returns the first found table's cell (range)\n- `SetValue` - the same as `GetCell` but sets new value in the found cell\n- `ClearFilters` - resets all the filters in the table\n- `SetFilters` - sets few filters specified in the following format `column1::value;column2::value;...`\n- `AddRow` - adds a new empty row in the end of the table, returns the range of added row\n- `AddColumn` - adds a new empty column with specified name in the end of the table, returns the range of added column\n- `DeleteRows` - deletes rows matches specified criteria, returns the number of deleted rows, criteria for deletion could be: by cells's value (=|<>|>|<|>=|<=) or by cell's background color (Long or HEX)\n- `GetColumn` - returns a range of specified table's column, optionally the header cell could be excluded\n- `GetColumnValues` - returns an array of values from specified table's column\n\nData structure is based on built-in tables, see [ListObject](https://learn.microsoft.com/en-us/office/vba/api/excel.listobject)","_keywords":"класс для работы таблицами\nclass table\nlist object\nnamed table","usage":"Sub Example()\n    \n    ' Range(A1:C4) contains a simple table:\n    \n    ' Name, Surname, Age\n    ' John, Wick, 32\n    ' Peter, X, 31\n    ' Sarah, Konor, 33\n    \n    ' X - cell has background color #00b050\n\n    Dim t As ClassTable\n    \n    ' Init table fro, the range\n    Set t = New ClassTable\n    t.Create sourceRng:=ThisWorkbook.Sheets(\"test\").Range(\"A1:C4\")\n    \n    ' Search a cell by condition or exact row index\n    Debug.Print (t.GetCell(colName:=\"Name\", rowFilter:=\"Surname::Wick\").value) ' John\n    Debug.Print (t.GetCell(colName:=\"Name\", rowIndex:=2).value) ' Peter\n    \n    ' Change cell's value (replace X in table)\n    Call t.SetValue( _\n       value:=\"Parker\", _\n       setCol:=\"Surname\", _\n       rowIndex:=2 _\n    )\n    \n    Dim rowIndex&, rowRng\n    \n    ' Loop over all the table's rows\n    For rowIndex = 1 To t.Rows.Count\n\n    Next rowIndex\n    \n    ' Loop over all the visible table's rows (not hidden = filtered)\n    For Each rowRng In t.RowsVisible\n    \n        rowIndex = rowRng.Row - t.HeadersRow.Row\n    \n    Next rowRng\n    \n    ' Delete rows by criteria\n    Debug.Print (t.DeleteRows(colName:=\"Age\", criteria:=\">=32\")) ' 2 (Wick, Conor)\n    Debug.Print (t.DeleteRows(colName:=\"Surname\", criteria:=\"color:#00b050\")) ' 1 (Parker)\n\nEnd Sub","file":"122.cls","demo":""},{"id":"123","updated_at":"2023-10-23","category":["Cells","Other"],"name":"AddHyperLink","title":"Puts a hyperlink in specified cell","description":"Parameters:\n- `linkRng` (**range**) - instance of Range class to put a link inside\n- `url` (**string**) - external URL address\n- `displayText` (**string**) - text to display in hyperlink's cell\n\nReturns **void**","_keywords":"вставить ссылку в ячейку\nдобавить ссылку в ячейку\nadd hyperlink into the cell\nset hyperlink in the cell","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Call AddHyperLink(ws.Range(\"C3\"), \"https://example.com\", \"link to example.com\")\nEnd Sub","file":"123.bas","demo":""},{"id":"124","updated_at":"2023-10-23","category":["Cells","Formats"],"name":"RemoveCondFormatting","title":"Removes condition formatting from rng","description":"Parameters:\n- `rng` (**range**) - instance of Range class to remove all condition formatting from\n\nReturns **void**","_keywords":"удалить условное форматирование\nубрать условное форматирование\nremove conditional formatting\ndelete conditional formatting","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Call RemoveCondFormatting(rng.Range(\"A1:B10\"))\nEnd Sub","file":"124.bas","demo":""},{"id":"125","updated_at":"2023-10-23","category":["Cells","Formats"],"name":"SetCondFormatting","title":"Set red / green condition formating","description":"Parameters:\n- `rng` (**range**) - instance of Range class to set condition formatting in\n- `compareOperator` (**string**) - one of the following: `>`, `<`, `>=`, `<=`, `=`\n- `criteriaValue` (**double**) - value to compare with\n- `isRed` ? (**boolean**) - red / green condition formatting mode\n  - true\n  - false (default)\n\nReturns **void**","_keywords":"добавить условное форматирование\nустановить условное форматирование\nadd conditional formatting\nset conditional formatting","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Call SetCondFormatting(rng.Range(\"A1:B10\"), \">\", 2.5, isRed:=True) ' cells > 2.5 will be colored in red\nEnd Sub","file":"125.bas","demo":""}]