[{"id":"1","category":["Массивы"],"name":"AddToArr","title":"Ф-ция добавляет новый элемент в 1 мерный массив","description":"","_keywords":"добавить элемент в массив\nadd element to array\nadd item to array\npush element to array\npush item to array","usage":"Sub Example()\n    Dim arr(): arr = Array(\"item1\", \"item2\")\n    Call AddToArr(arr, \"item3\")\n    Debug.Print(arr(2)) ' item3\nEnd Sub","file":"1.bas"},{"id":"2","category":["Массивы"],"name":"GetArrLength","title":"Ф-ция возвращает длину массива","description":"","_keywords":"получить длину массива\nполучить количество элементов в массиве\nполучить количество элементов массива\nget array length\nget length of array\nget array size","usage":"Sub Example()\n    Dim arr(): arr = Array(\"item1\", \"item2\")\n    Debug.Print(GetArrLength(arr)) ' 2\nEnd Sub","file":"2.bas"},{"id":"3","category":["Конвертация","Массивы"],"name":"Rng2Array","title":"Ф-ция возвращает 1 мерный массив, заполненный значениями из диапазона","description":"Все значения приводятся к строке","_keywords":"конвертировать диапазон в массив\nконвертация диапазона в массив\nconvert range to array","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim rng As Range: Set rng = ws.Range(\"A1:A10\")\n    Dim arr() As String: arr = Rng2Array(rng)\n    ' ...\n    ' вставка массива на лист\n    ws.Range(\"A1\").Resize(Ubound(arr) + 1, 1).Value = Application.Transponse(arr)\nEnd Sub","file":"3.bas"},{"id":"4","category":["Массивы"],"name":"IsInArray","title":"Ф-ция проверяет наличие элемента в 1 мерном массиве","description":"Возвращает `True` или `False`","_keywords":"проверить наличие элемента в массиве\ncheck if element exist in array\ncheck if item exist in array\ncheck if array includes element\ncheck if array includes item","usage":"Sub Example()\n    Dim arr(): arr = Array(\"item1\", \"item2\")\n    Debug.Print(IsInArray(arr, \"item2\")) ' True\n    Debug.Print(IsInArray(arr, \"item3\")) ' False\nEnd Sub","file":"4.bas"},{"id":"5","category":["Массивы"],"name":"FilterArr","title":"Ф-ция фильтрует 1 или 2 мерный массив на соответствие переданному элементу","description":"В результирующий массив попадут все значения из исходного массива, которые `=` переданному элементу\n\nВозвращает 1 мерный массив с отфильтрованными значениями из исходного массива","_keywords":"фильтрация массива\nотфильтровать массив\nfilter array","usage":"Sub Example()\n    Dim arr(), filteredArr()\n\n    arr = Array(1, 2, 3, 1, 1, 2)\n    ' фильтруем 1 мерный массив\n    filteredArr = FilterArr(arr, 1)\n    Debug.Print (Join(filteredArr, \", \")) ' 1, 1, 1\n\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' столбец B содержит цифры 1, 3, 1\n    arr = ws.Range(\"A1:B3\")\n\n    ' фильтруем 2-ой столбец 2 мерного массива (range)\n    filteredArr = FilterArr(arr, 1, 2)\n    Debug.Print (Join(filteredArr, \", \")) ' 1, 1\nEnd Sub","file":"5.bas"},{"id":"6","category":["Массивы"],"name":"FilterArr","title":"Ф-ция фильтрует 1 или 2 мерный массив с помощью ф-ции-чекера","description":"Ф-ция `CheckItem` будет вызвана с каждым эл-том массива в кач-ве единственного параметра\n\nЕсли ф-ция `CheckItem` вернет `True`, элемент попадет в результирующий массив\n\nВозвращает 1 мерный массив с отфильтрованными значениями из исходного массива","_keywords":"фильтрация массива с помощью функции\nотфильтровать массив через функцию\nфильтрация массива\nотфильтровать массив\nfilter array with callback\nfilter array through callback\nfilter array using callback\nfilter array","usage":"Function CheckItem(ByVal item) As Boolean\n    ' ф-ция для проверки эл-тов массива\n    ' отбирает цифрцы от 2 до 4\n    CheckItem = CBool(item >= 2 And item <= 4)\nEnd Function\n\nSub Example()\n    Dim arr(), filteredArr()\n\n    arr = Array(1, 0, 1, 2, 4, 5, 10, 3, 1)\n    ' фильтруем 1 мерный массив\n    filteredArr = FilterArr(arr, \"CheckItem\")\n    Debug.Print (Join(filteredArr, \", \")) ' 2, 4, 3\n\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' столбец B содержит цифры 1, 3, 1\n    arr = ws.Range(\"A1:B3\")\n\n    ' фильтруем 2-ой столбец 2 мерного массива (range)\n    filteredArr = FilterArr(arr, \"CheckItem\", 2)\n    Debug.Print (Join(filteredArr, \", \")) ' 3\nEnd Sub","file":"6.bas"},{"id":"7","category":["Массивы"],"name":"Filter2DArr","title":"Ф-ция фильтрует 2 мерный массив с произвольным кол-вом критериев фильтрации","description":"В результирующий массив попадут все строки исходного 2 мерного массива, у которых значения в столбцах соответствуют всем переданным критериям сортировки\n\nКаждый критерий сортировки это строка в следующем формате:\n\n`номер столбца&=&паттерн`, например, `2=##.01.####`\n\nФормат паттерна см. в [документации](https://docs.microsoft.com/ru-ru/dotnet/visual-basic/language-reference/operators/like-operator#pattern-options)\n\nВозвращает 2 мерный массив с отфильтрованными строками из исходного массива","_keywords":"фильтрация массива\nотфильтровать массив\nfilter array","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' столбец A содержит имена: \"Иван\", \"Алексей\", \"Иван\"\n    ' столбец B содержит даты рождения: \"10.01.1992\", \"25.03.1991\", \"13.02.1994\"\n     Dim arr(): arr = ws.Range(\"A1:B3\")\n\n    ' фильтруем 2 мерный массив (range)\n    ' хотим получить строки с Иванами, у которых ДР в январе\n    Dim filteredArr(): filteredArr = Filter2DArr(arr, \"1=Иван\", \"2=##.01.####\")\n\n    Dim count&: count = GetArrLength(filteredArr) ' @(id 2)\n    Debug.Print (count) ' 1 строка соответствует всем критериям\nEnd Sub","file":"7.bas"},{"id":"8","category":["Массивы"],"name":"SortArr","title":"Ф-ция сортирует 1 мерный массив","description":"`desc` - по убыванию, от большего к меньшему (`<`)\n\n`asc` - по возрастанию, от меньшего к большему (`>`)","_keywords":"сортировка массива\nотсортировать массив\nsort array","usage":"Sub Example()\n    Dim arr(): arr = Array(-5, 3, 18, 1, 0, 4, 1, 5)\n    Dim isDesc As Boolean: isDesc = True\n     ' сортируем по убыванию 1 мерный массив\n    Call SortArr(arr, isDesc)\n    Debug.Print(Join(arr, \", \")) ' 18, 5, 4, 3, 1, 1, 0, -5\nEnd Sub","file":"8.bas"},{"id":"9","category":["Массивы"],"name":"SortArr","title":"Ф-ция сортирует 2 мерный массив по столбцу N","description":"`desc` - по убыванию, от большего к меньшему (`<`)\n\n`asc` - по возрастанию, от меньшего к большему (`>`)","_keywords":"сортировка массива\nотсортировать массив\nsort array","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' столбец A содержит Имена студентов: \"Иван\", \"Алексей\", \"Петр\"\n    ' столбец B содержит Средний балл 4.4, 4.2, 4.3\n    Dim arr(): arr = ws.Range(\"A1:B3\")\n\n    Dim isDesc As Boolean: isDesc = True\n    ' сортируем по убыванию 2 мерный массив (range) по 2 столбцу (ср. балл) \n    Call SortArr(arr, 2, isDesc)\n\n    ' вставка отсортированного массива на лист\n    ws.Range(\"A1\").Resize(UBound(arr, 1), UBound(arr, 2)).Value = arr\nEnd Sub","file":"9.bas"},{"id":"10","category":["Массивы"],"name":"GetUniqueArr","title":"Ф-ция возвращает копию 1 мерного массива без дубликатов","description":"","_keywords":"получить массив без повторов\nполучить массив без дубликатов\nполучить массив без дублей\nget array without duplicates\nget unique array","usage":"Sub Example()\n    Dim arr(): arr = Array(1, 2, 3, 1, 1, 2)\n    ' фильтруем 1 мерный массив\n    Dim uniqueArr(): uniqueArr = GetUniqueArr(arr)\n    Debug.Print (Join(uniqueArr, \", \")) ' 1, 2, 3\nEnd Sub","file":"10.bas"},{"id":"11","category":["Массивы"],"name":"GetIndexOf","title":"Ф-ция возвращает индекс элемента в 1 мерном массиве","description":"Ф-ция возвращает `-1`, если элемента нет в массиве","_keywords":"найти индекс элемента в массиве\nполучить индекс элемента в массиве\nget element position in array\nget element index in array\nget position of element in array\nget index of element in array","usage":"Sub Example()\n    Dim arr(): arr = Array(1, 2, 3, 1, 1, 2)\n    Debug.Print (GetIndexOf(arr, 3)) ' 2\nEnd Sub","file":"11.bas"},{"id":"12","category":["Работа с книгами и листами"],"name":"IsWbOpen","title":"Ф-ция проверяет открыта ли книга Excel по ее имени","description":"Возвращает `True` или `False`","_keywords":"проверить открыта ли книга\nпроверить открыт ли файл\ncheck if workbook open\ncheck if file open","usage":"Sub Example()\n    Debug.Print (IsWbOpen(\"data.xlsx\")) ' True, если книга открыта\nEnd Sub","file":"12.bas"},{"id":"13","category":["Работа с книгами и листами"],"name":"IsWsExists","title":"Ф-ция проверяет наличие листа в книге Excel по его имени","description":"Возвращает `True` или `False`","_keywords":"проверить существует ли вкладка\nпроверить наличие листа в книге\nпроверить наличие листа в файле\ncheck if sheet exist\ncheck if worksheet exist","usage":"Sub Example()\n    Debug.Print (IsWsExists(ThisWorkbook, \"Sheet1\")) ' True, если лист существует\nEnd Sub","file":"13.bas"},{"id":"14","category":["Пользовательский ввод","Оптимизация"],"name":"VerifyPassword","title":"Ф-ция запрашивает ввод пароля и проверяет его корректность","description":"Пароль хранится прямо в макросе и **НЕ** является секретом.\n\nЦель проверки - предотвратить запуск макроса при случайном вызове\n\nВозвращает `True` или `False`","_keywords":"ввод пароля\nпроверить пароль\nverify password input\ncheck password input","usage":"Sub Example()\n    If VerifyPassword() Then\n        Debug.Print (\"Продолжаем выполнение\")\n    End If\nEnd Sub","file":"14.bas"},{"id":"15","category":["Работа с датой и временем"],"name":"GetDateSeparator","title":"Ф-ция возвращает разделитель дат","description":"Разделитель определяется в зависимости от региональных настроек пользователя (локаль)","_keywords":"получить разделитель дат\nget date separator\nget date delimiter","usage":"Sub Example()\n    Dim separator$: separator = GetDateSeparator()\n    Debug.Print (separator) ' точка / слеш\nEnd Sub","file":"15.bas"},{"id":"16","category":["Работа с датой и временем"],"name":"GetMonthName","title":"Ф-ция возвращает имя месяца по номеру месяца в году","description":"","_keywords":"получить имя месяца по номеру\nполучить название месяца по номеру\nget month by index\nget month by number\nget month name by index\nget month name by number","usage":"Sub Example()\n    Debug.Print (GetMonthName(5)) ' Май\nEnd Sub","file":"16.bas"},{"id":"17","category":["Работа с датой и временем"],"name":"GetMonthNum","title":"Ф-ция возвращает номер месяца в году по его имени","description":"","_keywords":"получить номер месяца по имени\nполучить индекс месяца по имени\nget month index by name\nget month number by name","usage":"Sub Example()\n    Debug.Print (GetMonthNum(\"Май\")) ' 5\nEnd Sub","file":"17.bas"},{"id":"18","category":["Работа с датой и временем"],"name":"GetWeekday","title":"Ф-ция возвращает название дня недели по дате","description":"","_keywords":"получить день недели по дате\nполучить номер дня недели по дате\nget weekday by date\nget day name by date","usage":"Sub Example()\n    Dim weekdayName$: weekdayName = GetWeekday(CDate(\"11.07.2022\"))\n    Debug.Print (weekdayName) ' понедельник\nEnd Sub","file":"18.bas"},{"id":"19","category":["Работа с датой и временем"],"name":"GetWeekNum","title":"Ф-ция возвращает номер недели в году по дате","description":"","_keywords":"получить номер недели по дате\nget week index by date\nget week number by date","usage":"Sub Example()\n    Dim weekNum&: weekNum = GetWeekNum(CDate(\"11.07.2022\"))\n    Debug.Print (weekNum) ' 29\nEnd Sub","file":"19.bas"},{"id":"20","category":["Работа с датой и временем"],"name":"GetDateByDayNum","title":"Ф-ция возвращает текстовое представление даты в указанном формате по порядковому номеру дня в году","description":"","_keywords":"получить дату по номеру дня в году\nget date by day index\nget date by day number","usage":"Sub Example()\n    Dim num&: num = 32\n    Dim year&: year = 2022\n    Dim d As Date: d = CStr(GetDateByDayNum(num, year, \"dd.mm.yyyy\"))\n    Debug.Print (d) ' 01.02.2022\nEnd Sub","file":"20.bas"},{"id":"21","category":["Конвертация","Работа с датой и временем"],"name":"UnixTime2Date","title":"Ф-ция конвертирует Unix 13-digit time string в дату","description":"","_keywords":"конвертировать unix time в дату\nконвертация unix time в дату\nконвертировать юникс время в дату\nконвертация юникс время в дату\nconvert unix time to date","usage":"Sub Example()\n    Dim d As Date: d = UnixTime2Date(\"1443852054000\")\n    Debug.Print (d) ' 03.10.2015 6:00:54\nEnd Sub","file":"21.bas"},{"id":"22","category":["Файловая система"],"name":"CreateFolder","title":"Ф-ция создает папку с указанным именем в указанной дирректории","description":"Если такая папка уже существует, новая не создается\n\nВозвращает `True` или `False`","_keywords":"создать папку\nсоздать дирректорию\ncreate folder\ncreate directory","usage":"Sub Example()\n    Dim hasCreated As Boolean\n    hasCreated = CreateFolder(ThisWorkbook.path, \"New folder\")\n    Debug.Print (hasCreated) ' True\nEnd Sub","file":"22.bas"},{"id":"23","category":["Файловая система","Пользовательский ввод"],"name":"GetFilePaths","title":"Ф-ция открывает диалоговое окно для выбора файлов","description":"Возвращает массив с путями к выбранным файлам\n\nЕсли ничего не выбрано вернет пустой массив","_keywords":"получить путь к файлу\nвыбрать файл в диалоговом окне\nget file path from dialog\nselect file\nchoose file","usage":"Sub Example()\n    Dim allowMulti As Boolean: allowMulti = True\n    Dim paths() As String\n    paths = GetFilePaths(\"Выбери файлы\", \"*.xlsm; *.xlsb\", , allowMulti)\n    Debug.Print (paths(0)) ' путь к 1-му файл\n    Debug.Print (paths(1)) ' путь ко 2-му файлу\nEnd Sub","file":"23.bas"},{"id":"24","category":["Готовые макросы"],"name":"ExportVBProject","title":"Ф-ция экспортирует VBProject модули из выбранного Excel файла","description":"Модули VBProject сохраняются в папку `macros` рядом с выбранным файлом","_keywords":"сохранить VB проект\nэкспортировать VB\nсохранить макрос\nэкспортировать макрос\nsave VB project\nexport VB project\nsave VBA\nexport VBA","usage":"Sub Example()\n    Call ExportVBProject()\nEnd Sub","file":"24.bas"},{"id":"25","category":["Файловая система","Пользовательский ввод"],"name":"GetFolderPath","title":"Ф-ция открывает диалоговое окно для выбора папки","description":"Возвращает путь к выбранной папке\n\nЕсли ничего не выбрано вернет пустую строку","_keywords":"получить путь к папке\nвыбрать папку в диалоговом окне\nget folder path from dialog\nget directory path from dialog\nselect folder\nchoose folder\nselect directory\nchoose directory","usage":"Sub Example()\n    Dim path$: path = GetFolderPath(\"Выбери папку\")\n    Debug.Print (path)\nEnd Sub","file":"25.bas"},{"id":"26","category":["Файловая система"],"name":"ReadTxtFile","title":"Ф-ция считывает txt файл и возвращает его содержимое","description":"","_keywords":"получить содержимое файла\nполучить содержимое txt файла\nпрочитать файл\nпрочитать txt файл\nread file\nread txt file","usage":"Sub Example()\n    Dim content$: content = ReadTxtFile(\"C:\\folder\\filename.txt\")\n    Debug.Print (content)\nEnd Sub","file":"26.bas"},{"id":"27","category":["Файловая система"],"name":"ReadTxtFile","title":"Ф-ция считывает txt файл в указанной кодировке и возвращает его содержимое","description":"","_keywords":"получить содержимое файла в определенной кодировке\nполучить содержимое txt файла в определенной кодировке\nпрочитать файл в определенной кодировке\nпрочитать txt файл в определенной кодировке\nread file in particular encoding\nread txt file in particular encoding","usage":"Sub Example()\n    Dim content$: content = ReadTxtFile(\"C:\\folder\\filename.txt\", \"windows-1251\")\n    Debug.Print (content)\nEnd Sub","file":"27.bas"},{"id":"28","category":["Файловая система"],"name":"SaveToTxtFile","title":"Ф-ция записывает текст в txt файл и сохраняет его в указанную папку в указанной кодировке","description":"Кодировка `utf-8` по умолчанию","_keywords":"сохранить текст в файл\nсохранить текст в txt файл\nзаписать текст в файл\nзаписать текст в txt файл\nwrite text to file\nwrite text to txt file","usage":"Sub Example()\n    Call SaveToTxtFile(\"текст\", ThisWorkbook.Path, \"filename.txt\", \"windows-1251\")\nEnd Sub","file":"28.bas"},{"id":"29","category":["Файловая система"],"name":"GetFileName","title":"Ф-ция извлекает имя с расширением из пути к файлу","description":"","_keywords":"получить имя файла из пути к нему\nизвлечь имя файла из пути к нему\nget file name form path","usage":"Sub Example()\n    Debug.Print (GetFileName(\"C:\\folder\\filename.txt\")) ' filename.txt\nEnd Sub","file":"29.bas"},{"id":"30","category":["Форматирование"],"name":"AddBorders","title":"Ф-ция добавляет диапазону границы","description":"","_keywords":"добавить границы у диапазона\nдобавить границы ячейке\nadd borders to range\nadd borders to cell","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1:B3\")\n    Call AddBorders(rng)\nEnd Sub","file":"30.bas"},{"id":"31","category":["Форматирование"],"name":"IsColored","title":"Ф-ция проверят окрашен ли диапазон","description":"Диапазон окрашен, если цвет заливки или текста или цвет текста `≠` дефолт\n\nВозвращает `True` или `False`","_keywords":"проверить окрашен ли диапазон\nпроверить цвет заливки\nпроверить цвет текста\nпроверить дефолт\ncheck if range has not default color\ncheck if cell has not default color\ncheck if range colored\ncheck if cell colored","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Debug.Print (IsColored(rng)) ' True, если цвет заливки или текста <> дефолт\nEnd Sub","file":"31.bas"},{"id":"32","category":["Форматирование"],"name":"SetFontColor","title":"Ф-ция устанавливает цвет текста в диапазоне","description":"Параметр `color` может быть передан как:\n- Excel Long\n- [Rgb](https://ru.wikipedia.org/wiki/RGB)\n- [Hex](https://ru.wikipedia.org/wiki/HTML-%D1%86%D0%B2%D0%B5%D1%82%D0%B0)","_keywords":"покрасить текст в диапазоне\nпокрасить текст в ячейке\nset font color in range\nset text color in range\nset font color in cell\nset text color in cell","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Call SetFontColor(rng, 10140829) ' Long\n    Call SetFontColor(rng, RGB(157, 188, 154)) ' Rgb\n    Call SetFontColor(rng, \"#9dbc9a\") ' Hex\nEnd Sub","file":"32.bas"},{"id":"33","category":["Форматирование"],"name":"SetBackColor","title":"Ф-ция устанавливает цвет заливки (фона) в диапазоне","description":"Параметр `color` может быть передан как:\n- Excel Long\n- [Rgb](https://ru.wikipedia.org/wiki/RGB)\n- [Hex](https://ru.wikipedia.org/wiki/HTML-%D1%86%D0%B2%D0%B5%D1%82%D0%B0)","_keywords":"изменить фон диапазона\nизменить фон ячейки\nset fore color in range\nset fore color in cell\nset background color in range\nset background color in cell","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Call SetBackColor(rng, 10140829) ' Long\n    Call SetBackColor(rng, RGB(157, 188, 154)) ' Rgb\n    Call SetBackColor(rng, \"#9dbc9a\") ' Hex\nEnd Sub","file":"33.bas"},{"id":"34","category":["Форматирование"],"name":"CopyRowFormat","title":"Ф-ция копирует формат из указанной строки и применяет его к диапазону строк (от… до …)","description":"","_keywords":"копировать формат строки\ncopy row formatting\ncopy rows formatting","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' на 1 листе копируем формат с 1 строки на 2 - 4 строки\n    Call CopyRowFormat(ws, 1, ws, 2, 4)\nEnd Sub","file":"34.bas"},{"id":"35","category":["Форматирование"],"name":"CopyColumnFormat","title":"Ф-ция копирует формат из указанного столбца и применяет его к диапазону столбцов (от… до …)","description":"","_keywords":"копировать формат столбца\nкопировать формат колонки\ncopy column formatting\ncopy columns formatting","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' на 1 листе копируем формат с 1 столбца на 2 - 4 столбцы\n    Call CopyColumnFormat(ws, 1, ws, 2, 4)\nEnd Sub","file":"35.bas"},{"id":"36","category":["Форматирование"],"name":"IsColoredLike","title":"Ф-ция проверяет окрашен ли фон у диапазона (цвет заливки) в указанный цвет","description":"Параметр `color` может быть передан как:\n- Excel Long\n- [Rgb](https://ru.wikipedia.org/wiki/RGB)\n- [Hex](https://ru.wikipedia.org/wiki/HTML-%D1%86%D0%B2%D0%B5%D1%82%D0%B0)\n\nВозвращает `True` или `False`","_keywords":"проверить окрашен ли диапазон\nпроверить цвет заливки\ncheck if range colored\ncheck range color\ncheck range background color\ncheck cell color\ncheck cell background color","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Debug.Print (IsColoredLike(rng, 10140829)) ' Long\n    Debug.Print (IsColoredLike(rng, RGB(157, 188, 154))) ' Rgb\n    Debug.Print (IsColoredLike(rng, \"#9dbc9a\")) ' Hex\nEnd Sub","file":"36.bas"},{"id":"37","category":["Конвертация","Форматирование"],"name":"Rgb2Long","title":"Ф-ция конвертирует значение RGB цвета в Long формат Excel","description":"Полный аналог встроенной ф-ции [RGB](https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/rgb-function)","_keywords":"конвертировать rgb в long\nконвертация rgb в long\nконвертировать rgb в number\nконвертация rgb в number\nconvert rgb to long\nconvert rgb to number","usage":"Sub Example()\n    Debug.Print (Rgb2Long(157, 188, 154)) ' 10140829\n    Debug.Print(RGB(157, 188, 154)) ' 10140829\nEnd Sub","file":"37.bas"},{"id":"38","category":["Конвертация","Форматирование"],"name":"Hex2Long","title":"Ф-ция конвертирует значение HEX цвета в Long формат Excel","description":"","_keywords":"конвертировать hex в rgb\nconvert hex to rgb","usage":"Sub Example()\n    Debug.Print (Hex2Long(\"#9dbc9a\")) ' 10140829\nEnd Sub","file":"38.bas"},{"id":"39","category":["Работа с формами"],"name":"GetSelectedRadioBtn","title":"Ф-ция находит в форме по имени frame выбранный переключатель (radio button)","description":"Возвращает инстанс класса `MSforms.OptionButton`","_keywords":"получить выбранную радиокнопку\nнайти выбранную радиокнопку\nнайти выбранный переключатель\nget selected radiobutton in frame\nget selected radiobutton in form\nget active radiobutton in frame\nget active radiobutton in form","usage":"Private Sub CommandButton1_Click()\n    Dim radio As MSforms.OptionButton: Set radio = GetSelectedRadioBtn(\"Frame1\")\n    Debug.Print (radio.Name) ' OptionButton1\n    Unload Me\nEnd Sub","file":"39.bas"},{"id":"40","category":["HTTP"],"name":"HttpQuery","title":"Ф-ция выполняет HTTP запрос","description":"Параметры:\n- `url` (string) - адрес запроса\n- `method?` (string) - HTTP метод\n  - GET (default)\n  - POST\n- `contentType?` (string) - тип контента (см. подробнее на [MDN](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type))\n- `reqBody?` (string) - тело запроса (для метода POST)\n\nВозвращает ответ сервера в виде текста или коллекции JSON объектов","_keywords":"выполнить http запрос к API\nвыполнить сетевой запрос к API\nhttp query to API\nget post http query","usage":"Sub Example()\n    Const API_URL$ = \"https://jsonplaceholder.typicode.com/todos\"\n    Dim res As Object, json As Object\n        \n    Set res = HttpQuery(API_URL, \"application/json\")\n\n    If res Is Nothing Or res.Count = 0 Then\n        Debug.Print (\"Пустой ответ сервера\")\n        Exit Sub\n    End If\n\n    Select Case TypeName(res)\n        Case \"Collection\"\n            For Each json In res\n                Debug.Print (\"ID: \" & json(\"id\") & \", Title: \" & json(\"title\") & \", Done: \" & json(\"completed\"))\n            Next json\n        Case \"Dictionary\"\n            Set json = res\n            Debug.Print (\"ID: \" & json(\"id\") & \", Title: \" & json(\"title\") & \", Done: \" & json(\"completed\"))\n        Case Else\n            Debug.Print(res)\n     End Select\nEnd Sub","file":"40.bas"},{"id":"41","category":["Интерфейс Excel"],"name":"ShowInterface","title":"Ф-ция показывает / скрывает пользовательский интерфейс Excel","description":"","_keywords":"скрыть интерфейс\nпоказать интерфейс\nhide interface\nshow interface","usage":"Sub Example()\n    Call ShowInterface(False) ' скрыть интерфейс Excel\n    Call ShowInterface(True) ' показать интерфейс Excel\nEnd Sub","file":"41.bas"},{"id":"42","category":["Конвертация","JSON","Готовые макросы"],"name":"JsonConverter","title":"Парсинг JSON (конвертация в Dictionary)","description":"Author: Tim Hall [tim.hall.engr@gmail.com](mailto:tim.hall.engr@gmail.com)\n\nRepo: [https://github.com/VBA-tools/VBA-JSON](https://github.com/VBA-tools/VBA-JSON)\n\nLicense: [MIT](http://www.opensource.org/licenses/mit-license.php)","_keywords":"конвертировать json\nконвертация json\nпарсинг json","usage":"","file":"42.bas"},{"id":"43","category":["Интерфейс Excel","Оптимизация"],"name":"ShowProcessing","title":"Ф-ция показывает / скрывает сообщение о выполнении операции в статус баре Excel","description":"","_keywords":"скрыть сообщение\nпоказать сообщение\nстатус-бар\nhide message\nshow message\nstatus-bar","usage":"Sub Example()\n    Call ShowProcessing(True)\n    ' ...\n    Call ShowProcessing(False)\nEnd Sub","file":"43.bas"},{"id":"44","category":["Файловая система"],"name":"LogInfo","title":"Ф-ция записывает сообщение в логфайл с указанием текущей даты и времени","description":"Перед каждым сообщением указывается штамп времени в формате `dd.mm.yyyy hh:mm:ss`\n\nСообщение записывается в файл `Log.txt` рядом с текущим файлом\n\nЕсли файла `Log.txt` нет, он будет создан","_keywords":"логгирование\nзапись сообщения в лог файл\nзаписать сообщение в лог файл\nwrite message to log\nlog message","usage":"Sub Example()\n    Call LogInfo(\"Выполнено действие X\")\n    ' ...\n    Call LogInfo(\"Выполнено действие Y\")\nEnd Sub","file":"44.bas"},{"id":"45","category":["Outlook"],"name":"GetCurrentUserEmail","title":"Ф-ция возвращает email текущего пользователя в Outlook","description":"","_keywords":"получить адрес почты\nполучить email адрес текущего пользователя\nget email\nget current user email","usage":"Sub Example()\n    Debug.Print (GetCurrentUserEmail()) ' user@domain.com\nEnd Sub","file":"45.bas"},{"id":"46","category":["Outlook"],"name":"SendEmail","title":"Ф-ция отправляет письмо в Outlook от лица текущего пользователя","description":"Параметры:\n- `subject` (string) - тема письма\n- `body` (string) текст письма\n- `sendTo` (string) - адреса получателей через `;`\n- `copyTo?` (string) - адреса в копию через `;`\n- `attachmentPath?` (string) - путь до файла-вложения\n- `method?` (string) - метод отправки\n  - Показать (default) - письмо будет создано в новом окне, отправка вручную\n  - Сохранить - письмо будет создано в папке Черновки, отправка вручную\n  - Отправить - письмо будет сразу же отправлено\n- `importanceType?` (string) - важность\n  - Низкая (default)\n  - Средняя\n  - Высокая","_keywords":"отправить письмо\nотправить email\nsend email\ncreate email","usage":"Sub Example()\n    Dim sendTo$: sendTo = \"user1@domain.com; user2@domain.com\"\n    Dim method$: method = \"Показать\"\n    Call SendEmail(\"Тема письма\", \"Текст письма\", sendTo, , , method)\nEnd Sub","file":"46.bas"},{"id":"47","category":["Outlook"],"name":"CreateAppointment","title":"Ф-ция создает в календаре Outlook текущего пользователя новое событие","description":"Параметры:\n- `subject` (string) - заголовок события\n- `body` (string) - текст события\n- `startDate` (date) - дата события (в случае наличия `recurrenceType` - дата старта серии событий)\n- `recurrenceType?` (string) - повторяемость события\n  - No (default)\n  - Daily\n  - Weekly\n  - Monthly\n  - Annual","_keywords":"создать событие в календаре\nсоздать событие в календаре\ncreate appointment in calendar\ncreate event in calendar","usage":"Sub Example()\n    Dim startDate As Date: startDate = CDate(\"12.07.2022\")\n    Dim recurrenceType$: recurrenceType = \"Monthly\"\n    Call CreateAppointment(\"Тема события\", \"Текст события\", startDate, recurrenceType)\nEnd Sub","file":"47.bas"},{"id":"48","category":["Конвертация","Работа с числами"],"name":"FixNumbers","title":"Ф-ция исправляет ошибку number stored as text","description":"Ф-ция преобразует каждую ячейку из диапазона в число","_keywords":"конвертировать текст в число\nконвертация текст в число\nconvert number stored as text","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1:B3\")\n    Call FixNumbers(rng)\nEnd Sub","file":"48.bas"},{"id":"49","category":["Работа с числами"],"name":"Round","title":"Ф-ция округляет переданное дробное число до N знаков после разделителя","description":"","_keywords":"округлить число\nокругление числа\nдробь\nround number\nfloat double","usage":"Sub Example()\n    Debug.Print (Round(4.4, 0)) ' 4\n    Debug.Print (Round(4.8, 0)) ' 5\n    Debug.Print (Round(4.226, 2)) ' 4.23\n    Debug.Print (Round(4.45, 1)) ' 4.5\nEnd Sub","file":"49.bas"},{"id":"50","category":["Работа с числами"],"name":"GetMax","title":"Ф-ция возвращает максимальное значение из 2-х переданных","description":"","_keywords":"получить максимальное значение\nget maximum","usage":"Sub Example()\n    Debug.Print (GetMax(-5, 6)) ' 6\n    Debug.Print (GetMax(4.45, 4.5)) ' 4.5\nEnd Sub","file":"50.bas"},{"id":"51","category":["Интерфейс Excel","Оптимизация"],"name":"TurnUpdatesOn","title":"Ф-ция вкл / выкл обновление экрана, пересчет формул, события, статус-бар, алерты","description":"Данный подход ускоряет выполнение ресурсоемких операций","_keywords":"отключить обновление\nвключить обновление\nturn updates on\nturn updates off\nturn on turn off","usage":"Sub Example()\n    Call TurnUpdatesOn(False) ' выкл обновления\n    ' ...\n    Call TurnUpdatesOn(True) ' вкл обновления\nEnd Sub","file":"51.bas"},{"id":"52","category":["Комментарии к ячейкам"],"name":"FitComments","title":"Ф-ция подгоняет размер комментариев к ячейкам на листе под размер их содержимого","description":"Ф-ция необходима при вставке комментариев к ячейкам через макрос","_keywords":"ресайз комментариев\nresize comments\nfit comments","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Call FitComments(ws)\nEnd Sub","file":"52.bas"},{"id":"53","category":["Data Validation"],"name":"HasValidation","title":"Ф-ция проверяет наличие Data Validation в диапазоне","description":"Возвращает `True` или `False`","_keywords":"проверить наличие валидации в диапазоне\nпроверить наличие валидации в ячейке\ncheck if range has data validation\ncheck if cell has data validation\ncheck data validation","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Debug.Print (HasValidation(rng)) ' True, если в ячейке есть Data Validation\nEnd Sub","file":"53.bas"},{"id":"54","category":["Фильтры"],"name":"RemoveFilters","title":"Ф-ция снимает установленные фильтры на листе","description":"","_keywords":"снять фильтры с листа\nremove filters\nturn filters off\nturn off filters","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Call RemoveFilters(ws)\nEnd Sub","file":"54.bas"},{"id":"55","category":["Фильтры"],"name":"TurnFiltersOn","title":"Ф-ция активирует на листе фильтры в строке с заголовками","description":"","_keywords":"включить фильтры\nактивировать фильтры\nturn filters on\nturn on filters","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim headerRow&: headerRow = 1\n    Call TurnFiltersOn(ws, headerRow)\nEnd Sub","file":"55.bas"},{"id":"56","category":["Data Validation"],"name":"SetDropDownList","title":"Ф-ция устанавливает в диапазоне выпадающий список","description":"Выпадающий список - это `Data Validation` с типом `List`\n\nПараметр `source` может быть передан как:\n- список вариантов через `,`\n- именованный диапазон из диспетчера имен\n- столбец таблицы из диспетчера имен","_keywords":"установить выпадающий список\nset dropdown list\nset list\nadd dropdown\nadd list","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1\")\n    Call SetDropDownList(rng, \"да,нет\") ' список вариантов через ,\n    Call SetDropDownList(rng, \"my_list\") ' именованный диапазон из диспетчера имен\n    Call SetDropDownList(rng, \"Options[Answers]\") ' столбец Answers из таблицы Options\nEnd Sub","file":"56.bas"},{"id":"57","category":["Формулы"],"name":"CopyRowFormulas","title":"Ф-ция копирует формулы из указанной строки и применяет их к диапазону строк (от… до …)","description":"","_keywords":"копировать формулы из строки\nкопировать формулы в строке\ncopy row formulas\ncopy rows formulas","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' на 1 листе копируем формулы из 1 строки в 2 - 4 строки с 3-го по 4-й столбец\n    Call CopyRowFormulas(ws, 1, 2, 4, 3, 4)\nEnd Sub","file":"57.bas"},{"id":"58","category":["Power Query"],"name":"RefreshPQ","title":"Ф-ция обновляет запрос Power Query","description":"","_keywords":"обновить запрос Power Query\nrefresh query\nrefresh Power Query\nupdate query\nupdate Power Query","usage":"Sub Example()\n    Call RefreshPQ(\"query_name\")\nEnd Sub","file":"58.bas"},{"id":"59","category":["Работа с книгами и листами"],"name":"ProtectWs","title":"Ф-ция ставит / снимает пароль с листа","description":"","_keywords":"снять защиту с листа\nснять пароль с листа\nустановить пароль на лист\nprotect sheet\nprotect worksheet\nunprotect sheet\nunprotect worksheet","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Call ProtectWs(False, ws, \"qwerty\") ' снимает пароль с листа\n    ' …\n    Call ProtectWs(True, ws, \"qwerty\") ' ставит пароль на лист\nEnd Sub","file":"59.bas"},{"id":"60","category":["Работа с текстом","Регулярные выражения"],"name":"GetRegExpMatches","title":"Ф-ция проверяет текст с помощью регулярного выражения и возвращает массив со всеми совпадениями","description":"Параметры:\n- `text` (string) - строка для поиска регулярным выражением\n- `pattern` (string) - паттерн регулярного выражения (формат см. [в документации](https://docs.microsoft.com/en-us/previous-versions//f97kw5ka(v=vs.85)))\n\n[Документация по RegExp в VBA](https://docs.microsoft.com/en-us/previous-versions//yab2dx62(v=vs.85))","_keywords":"проверить текст регулярным выражением\nпроверить текст регуляркой\ncheck text by regular expression\ncheck text by regexp\ncheck text using regular expression\ncheck text using regexp","usage":"Sub Example()\n    Dim text$: text = \"user1@domain2.com; user2@domain2.com; user3@domain1.com\"\n    Dim pattern$: pattern = \"\\w+@domain2\\.\\w+\"\n    Dim matches(): matches = GetRegExpMatches(text, pattern)\n    Debug.Print (matches(0)) ' user1@domain2.com\n    Debug.Print (matches(1)) ' user2@domain2.com\nEnd Sub","file":"60.bas"},{"id":"61","category":["Работа с текстом","Регулярные выражения"],"name":"RegExpTest","title":"Ф-ция проверяет текст с помощью регулярного выражения","description":"Параметры:\n- `text` (string) - строка для поиска регулярным выражением\n- `pattern` (string) - паттерн регулярного выражения (формат см. [в документации](https://docs.microsoft.com/en-us/previous-versions//f97kw5ka(v=vs.85)))\n\n[Документация по RegExp в VBA](https://docs.microsoft.com/en-us/previous-versions//yab2dx62(v=vs.85))\n\nВозвращает `True` или `False`","_keywords":"проверить текст регулярным выражением\nпроверить текст регуляркой\ncheck text by regular expression\ncheck text by regexp\ncheck text using regular expression\ncheck text using regexp","usage":"Sub Example()\n    Dim text$: text = \"user1@domain1.com\"\n    Dim pattern$: pattern = \"\\w+@domain1\\.\\w+\"\n    Debug.Print (RegExpTest(text, pattern)) ' True\nEnd Sub","file":"61.bas"},{"id":"62","category":["Работа с текстом","Регулярные выражения"],"name":"GetFirstRegExpMatch","title":"Ф-ция проверяет текст с помощью регулярного выражения и возвращает первое совпадение","description":"Параметры:\n- `text` (string) - строка для поиска регулярным выражением\n- `pattern` (string) - паттерн регулярного выражения (формат см. [в документации](https://docs.microsoft.com/en-us/previous-versions//f97kw5ka(v=vs.85)))\n\n[Документация по RegExp в VBA](https://docs.microsoft.com/en-us/previous-versions//yab2dx62(v=vs.85))","_keywords":"проверить текст регулярным выражением\nпроверить текст регуляркой\ncheck text by regular expression\ncheck text by regexp\ncheck text using regular expression\ncheck text using regexp","usage":"Sub Example()\n    Dim text$: text = \"user1@domain2.com; user2@domain2.com; user3@domain1.com\"\n    Dim pattern$: pattern = \"\\w+@domain2\\.\\w+\"\n    Debug.Print (GetFirstRegExpMatch(text, pattern)) ' user1@domain2.com\nEnd Sub","file":"62.bas"},{"id":"63","category":["Строки и столбцы"],"name":"GetColumnLeter","title":"Ф-ция возвращает букву столбца по его порядковому номеру","description":"","_keywords":"получить букву по номеру колонки\nполучить букву по номеру столбца\nполучить букву по индексу колонки\nполучить букву по индексу столбца\nget column char by column index\nget column char by column number\nget column letter by column index\nget column letter by column number","usage":"Sub Example()\n    Debug.Print (GetColumnLeter(1)) ' A\n    Debug.Print (GetColumnLeter(3)) ' C\n    Debug.Print (GetColumnLeter(8)) ' H\nEnd Sub","file":"63.bas"},{"id":"64","category":["Строки и столбцы"],"name":"GetLastRow","title":"Ф-ция возвращает номер последней заполненной (не пустой) строки в указанном столбце","description":"","_keywords":"получить последнюю строку по номеру колонки\nнайти последнюю строку по номеру колонки\nполучить последнюю строку по индексу колонки\nнайти последнюю строку по индексу колонки\nполучить последнюю строку по номеру столбца\nнайти последнюю строку по номеру столбца\nполучить последнюю строку по индексу столбца\nнайти последнюю строку по индексу столбца\nget last row by column index\nget last row by column number\nfind last row by column index\nfind last row by column number","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Debug.Print (GetLastRow(ws, 1)) ' номер последней не пустой строки в 1 столбце на листе ws\nEnd Sub","file":"64.bas"},{"id":"65","category":["Строки и столбцы"],"name":"GetLastColumn","title":"Ф-ция возвращает номер последнего заполненного (не пустого) столбца в указанной строке","description":"","_keywords":"получить последнюю колонку по номеру строки\nнайти последнюю колонку по номеру строки\nполучить последнюю колонку по индексу строки\nнайти последнюю колонку по индексу строки\nполучить последнюю колонку по номеру строки\nнайти последнюю колонку по номеру строки\nполучить последнюю колонку по индексу строки\nнайти последнюю колонку по индексу строки\nполучить последний столбец по номеру строки\nнайти последний столбец по номеру строки\nполучить последний столбец по индексу строки\nнайти последний столбец по индексу строки\nполучить последний столбец по номеру строки\nнайти последний столбец по номеру строки\nполучить последний столбец по индексу строки\nнайти последний столбец по индексу строки\nget last column by row index\nget last column by row number\nfind last column by row index\nfind last column by row number","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Debug.Print (GetLastColumn(ws, 1)) ' номер последнего не пустого столбца в 1 строке на листе ws\nEnd Sub","file":"65.bas"},{"id":"66","category":["Строки и столбцы"],"name":"GetEdgeRows","title":"Ф-ция находит номера крайних строк в диапазоне (от … до …)","description":"Возвращает массив из двух значений:\n\n`arr(0)` - первая строка диапазона\n\n`arr(1)` - последняя строка диапазона","_keywords":"получить номера крайних строк в диапазоне\nполучить индексы крайних строк в диапазоне\nнайти номера крайних строк в диапазоне\nнайти индексы крайних строк в диапазоне\nfind first row number in range\nfind last row number in range\nfind first row index in range\nfind last row index in range","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1:B3\")\n    Dim arr() As Long: arr = GetEdgeRows(rng)\n    Debug.Print (arr(0)) ' 1\n    Debug.Print (arr(1)) ' 3\nEnd Sub","file":"66.bas"},{"id":"67","category":["Строки и столбцы"],"name":"GetColumnByHeader","title":"Ф-ция ищет текст в указанной строке и возвращает номер столбца, в котором он найден","description":"","_keywords":"получить номер столбца\nполучить индекс столбца\nнайти номер столбца\nнайти индекс столбца\nполучить номер колонки\nполучить индекс колонки\nнайти номер колонки\nнайти индекс колонки\nget column number\nget column index\nfind column number\nfind column index","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim headerRow&: headerRow = 1\n    Debug.Print (GetColumnByHeader(ws, \"Итого\", headerRow)) ' номер столбца в 1 строке, в котором найдено слово Итого\nEnd Sub","file":"67.bas"},{"id":"68","category":["Строки и столбцы"],"name":"GetRowByHeader","title":"Ф-ция ищет текст в указанном столбце и возвращает номер строки, в которой он найден","description":"","_keywords":"получить номер строки\nполучить индекс строки\nнайти номер строки\nнайти индекс строки\nget row number\nget row index\nfind row number\nfind row index","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim headerCol&: headerCol = 1\n    Debug.Print (GetRowByHeader(ws, \"Итого\", headerCol)) ' номер строки в 1 столбце, в которой найдено слово Итого\nEnd Sub","file":"68.bas"},{"id":"69","category":["Работа с текстом"],"name":"Includes","title":"Ф-ция проверяет наличие подстроки в исходной строке","description":"Возвращает `True` или `False`","_keywords":"проверить вхождение подстроки\nпроверить наличие подстроки\ncheck if string includes substring\ncheck if string includes another string","usage":"Sub Example()\n    Debug.Print (Includes(\"username@domain.com\", \"username\")) ' True\nEnd Sub","file":"69.bas"},{"id":"70","category":["Работа с текстом"],"name":"GetFirstWordAfter","title":"Ф-ция ищет слово в строке и возвращает первое слово после искомого","description":"","_keywords":"получить первое слово после\nнайти первое слово после\nget first word after\nfind first word after","usage":"Sub Example()\n    Debug.Print (GetFirstWordAfter(\"люблю\", \"Я люблю яблоки\")) ' яблоки\nEnd Sub","file":"70.bas"},{"id":"71","category":["Работа с текстом","Массивы"],"name":"SplitToChars","title":"Ф-ция разбивает строку на массив символов / букв","description":"","_keywords":"разделить строку на символы\nразбить строку на символы\nsplit string to symbols\nsplit string to chars\nsplit string to characters","usage":"Sub Example()\n    Dim arr() As String: arr = SplitToChars(\"яблоко\")\n    Debug.Print (Join(arr, \", \")) ' я, б, л, о, к, о\nEnd Sub","file":"71.bas"},{"id":"72","category":["Работа с текстом"],"name":"SliceString","title":"Ф-ция извлекает подстроку из исходной строки","description":"Аналог встроенной ф-ции [MID](https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/mid-function), но нумерация начинается с `1`","_keywords":"извлечь подстроку\nизвлечить строку из другой строки\nslice string\nfind substring\nget substring","usage":"Sub Example()\n    Debug.Print (SliceString(\"Я люблю яблоки\", 3, 8)) ' люблю\n    Debug.Print (SliceString(\"Я люблю яблоки\", 9)) ' яблоки\nEnd Sub","file":"72.bas"},{"id":"73","category":["Конвертация","Работа с текстом"],"name":"Rng2String","title":"Ф-ция склеивает все значения из диапазона в текстовую строку через разделитель","description":"","_keywords":"конвертация диапазона в текст\nконвертировать диапазон в текст\nконвертация диапазона в строку\nконвертировать диапазон в строку\nconvert range to text\nconvert range to string","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"A1:C1\")\n    Debug.Print (Rng2String(rng, \", \")) ' Номер, Продукт, Итого\nEnd Sub","file":"73.bas"},{"id":"74","category":["Работа с текстом","Регулярные выражения"],"name":"RegExpReplace","title":"Ф-ция выполняет замену всех вхождений подстроки в исходную строку","description":"Аналог встроенной ф-ции [REPLACE](https://docs.microsoft.com/en-us/office/vba/language/reference/user-interface-help/replace-function), но поиск и замена выполняются с помощью регулярного выражения\n\nПараметры:\n- `text` (string) - строка для поиска регулярным выражением\n- `replacePattern` (string) - паттерн регулярного выражения (формат см. [в документации](https://docs.microsoft.com/en-us/previous-versions//f97kw5ka(v=vs.85)))\n- `replaceValue` (string) - значение, на которое будут заменены все совпадения с `replacePattern`\n\n[Документация по RegExp в VBA](https://docs.microsoft.com/en-us/previous-versions//yab2dx62(v=vs.85))","_keywords":"заменить все\nзаменить всё\nreplace all","usage":"Sub Example()\n    Debug.Print (RegExpReplace(\"Зашифр@ванн@е сл@в@\", \"@\", \"о\")) ' Зашифрованное слово\nEnd Sub","file":"74.bas"},{"id":"75","category":["Готовые макросы","Оптимизация"],"name":"RunTimer","title":"Ф-ция считает время выполнения ф-ций / процедур","description":"","_keywords":"запуск таймера\nостановить таймер\nвремя выполнения\nrun timer\nstop timer\nexecution time","usage":"Sub Example()\n    Call RunTimer(True)\n    ' ...\n    Application.Wait (Now + TimeValue(\"00:00:05\"))\n    ' ...\n    Debug.Print (\"Время выполнения скрипта: \" & RunTimer(False))\nEnd Sub","file":"75.bas"},{"id":"76","category":["Готовые макросы","User Defined Functions UDF","Работа с текстом"],"name":"CONCATIF","title":"Ф-ция выполняет конкатенацию по условию","description":"Аналог встроенной ф-ции [CONCAT](https://support.microsoft.com/en-us/office/concat-function-9b1a9a3f-94ff-41af-9736-694cbd6b4ca2#:~:text=The%20CONCAT%20function%20combines%20the,with%20earlier%20versions%20of%20Excel.), но с возможностью задать условие конкатенации\n\nПараметры:\n- `rngToCheck` (range) - диапазон для проверки паттерном (столбец)\n- `rngToConcat` (range) - диапазон для конкатенации (столбец)\n- `pattern` (string) - паттерн, с которым будет происходить сверка значений из `rngToCheck` (формат см. в [документации](https://docs.microsoft.com/ru-ru/dotnet/visual-basic/language-reference/operators/like-operator#pattern-options))\n- `separator?` (string) - разделитель, по умолчанию пробел","_keywords":"специть если\nконкатенация по условию\nconcatenate if\nconcat if\nconditional concat","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"C1\")\n    rng.Formula = \"=CONCATIF(Организации[Наименование],Организации[ИНН], \"ООО *\",\", \")\"\nEnd Sub","file":"76.bas"},{"id":"77","category":["Готовые макросы","User Defined Functions UDF","Работа с датой и временем"],"name":"GETWORKDAYS","title":"Ф-ция вычисляет кол-во дней между 2-мя датами за вычетом дней-исключений","description":"Именованный диапазон с датами, которые будут исключены при подсчете разницы между 2-мя датами должен называться `Праздники`","_keywords":"получить количество рабочих дней между датами\nвычислить кол-во рабочих дней между датами\nget workdays\nget dates diff","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"C1\")\n    rng.Formula = \"=GETWORKDAYS(\" & Cdate(\"30.01.2022\") & \", \" & Cdate(\"01.01.2022\") & \")\"\nEnd Sub","file":"77.bas"},{"id":"78","category":["Пользовательский ввод","Data Validation","Оптимизация"],"name":"ValidateInput","title":"Ф-ция запрашивает ввод пользователя и проверяет его на соответствие паттерну","description":"Формат паттерна см. в [документации](https://docs.microsoft.com/ru-ru/dotnet/visual-basic/language-reference/operators/like-operator#pattern-options\n\nЕсли проверка пройдена, возвращает введенные данные","_keywords":"проверка корректности ввода\nпроверка ввода на соответствие шаблону\ncheck if input valid\ncheck if input match pattern","usage":"Sub Example()\n    Dim inputDate$\n    inputDate = ValidateInput(\"Введите дату\", \"##.##.####\", \"дд.мм.гггг\", \"Соблюдайте формат\", Date)\nEnd Sub","file":"78.bas"},{"id":"79","category":["Готовые макросы"],"name":"ExportPictures","title":"Ф-ция экспортирует все картинки с листа Excel в указанную папку","description":"","_keywords":"выгрузить изображения\nвыгрузить картинки\nсохранить изображения\nсохранить картинки\nexport pictures\nexport images\nsave pictures\nsave images","usage":"Sub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    Dim pathToSave$: pathToSave = \"C:\\folder\\\"\n    Call ExportPictures(ws, pathToSave)\nEnd Sub","file":"79.bas"},{"id":"80","category":["Готовые макросы"],"name":"CompareTables","title":"Сверка 2-х одинаковых по структуре таблиц (одинаковые заголовки, кол-во и расположение столбцов)","description":"Ячейки, в которых найдены разлиия красятся в красный цвет, а в комментарий проставляется значение разницы","_keywords":"сравнить таблицы\nсопоставить таблицы\ncompare tables","usage":"","file":"80.bas"},{"id":"81","category":["Конвертация","Массивы"],"name":"Collection2Array","title":"Ф-ция конвертирует коллекцию в массив","description":"","_keywords":"конвертация коллекции в массив\nконвертировать коллекцию в массив\nconvert collection to array","usage":"Sub Example()\n    Dim coll As New Collection\n    coll.Add item:=120, Key:=\"Company 1\"\n    coll.Add item:=210, Key:=\"Company 2\"\n    Dim arr() As String: arr = Collection2Array(coll)\n    Debug.Print (Join(arr, \", \")) ' 120, 210\nEnd Sub","file":"81.bas"},{"id":"82","category":["Готовые макросы","Data Validation","Работа с формами"],"name":"DropdownForm","title":"Выпадающий список с автокомплитом","description":"Работает поверх [стандартных выпадающих списков](https://support.microsoft.com/en-us/office/create-a-drop-down-list-7693307a-59ef-400a-b769-c5402dce407b)\n\nАвтокомплит позволяет найти вариант из большого выпадающего списка по мере печати\n\nВыбор варианта осуществляется с клавиатуры: `↑↓`, `Tab`, `Enter`","_keywords":"выпадающий список с автокомплитом\nвыпадающий список с автозаполнением\nвыпадающий список с поиском\ndropdown с автокомплитом\ndropdown с автозаполнением\ndropdown с поиском\ndropdown\ndropdown with autocomplete\nlist with autocomplete","usage":"Private Sub Worksheet_SelectionChange(ByVal Target As Range)\n    ' при выборе пустой ячейки с нативным выпадающим списком (Data Validation List)\n    ' показываем DropdownForm с вариантами из этого листа\n    If Selection.count = 1 And HasValidation(Target) Then ' @(id 53)\n        If Target.Validation.Type = 3 Then DropdownForm.Show\n    End If\nEnd Sub","file":"82.zip"},{"id":"83","category":["Готовые макросы","Работа с формами","Оптимизация"],"name":"ProgressBar","title":"Шкала прогресса (прогресс бар)","description":"Отображет процесс выполнения задачи в % + текстовое сообщение","_keywords":"прогресс бар\nстатус выполнения\n% выполнения\nпроцент выполнения\nprogress bar","usage":"Sub Example()\n    Call ProgressBar.Update(1, \"Начинаем...\")\n    ' ... \n    Call ProgressBar.Update(50, \"В процессе...\")\n    ' ... \n    Call ProgressBar.Update(99, \"Почти все...\")\n    ' ...\n    Call ProgressBar.Update(100, \"Готово\")\n    Unload ProgressBar\nEnd Sub","file":"83.zip"},{"id":"84","category":["Готовые макросы","Работа с текстом"],"name":"FillTemplateWithData","title":"Заполнение шаблона данными","description":"Возвращает шаблонный текст заполненный данными.\n\nВ тексте шаблона нужно проставить `%заглушки%`, на место которых макрос вставит данные.\n\nДанные для заполнения шаблона должны быть собраны в словарь (*Dictionary*).\n\nЗначения из словаря приводятся к строке и вставляются в шаблон вместо `%заглушек%`.\n\nЗаглушка имеет формат `%key%`, где `key` - это имя ключа в словаре.\n\nВ словаре могут быть:\n\n- Просто **строковые значения**\n\n  Заглушка `%key%` будет заменена на соответствующее значение из словаря.\n\n  ```\n  <Элемент атрибут1=\"%key1%\" атрибут2=\"%key2%\" >%key3%</элемент>\n  ```\n\n  `key1`, `key2`, `key3` - ключ основного словаря, содержит строковое значение для атрибутов и содержимого эл-та\n\n- **Массив словарей** со строковыми значениями\n\n  Если требуется вставка нескольких одинаковых блоков, но с разными данными.\n  \n  При наличии в ключе `key0` массива, блок внутри цикла будет заполнен данными каждого эл-та массива (словаря).\n  \n  Размещаем один блок с заглушками между строками, обозначающими начало и конец цикла (*LOOP*):\n\n  ```\n  <!-- LOOP EACH %key0% -->\n  <Элемент атрибут1=\"%key1%\" атрибут2=\"%key2%\" >%key3%</элемент>\n  <!-- STOP LOOP %key0% -->\n  ```\n\n  `key0` - ключ основного словаря, содержит массив, каждый эл-т которого это словарь со строковыми значениями\n\n  `key1`, `key2`, `key3` - ключ словаря из массива, содержит строковое значение для атрибутов и содержимого эл-та\n\n- **Словарь** со строковыми значениями\n\n  Если требуется вставка какого-либо блока, в зависимости от условия.\n\n  При наличии в ключе `key0` словаря, блок внутри условия будет заполнен данными словаря.\n\n  Размещаем блок с заглушками между строками, обозначающими начало и конец условия (*IF*):\n\n  ```\n  <!-- IF HAS %key0% -->\n  <Элемент атрибут1=\"%key1%\" атрибут2=\"%key2%\" >%key3%</элемент>\n  <!-- END IF %key0% -->\n  ```\n\n  `key0` - ключ основного словаря, содержит словарь со строковыми значениями\n\n  `key1`, `key2`, `key3` - ключ вложенного словаря, содержит строковое значение для атрибутов и содержимого эл-та","_keywords":"заполнить шаблон данными\nзаполнение шаблона данными\nвставка данных вместо заглушек\nвставить данные вместо заглушек\nвставка данных в шаблон\nвставить данные в шаблон","usage":"Const QUOTE_CHR$ = \"&quot;\"\n\n' xml-template.txt\n\n' <?xml version=\"1.0\" encoding=\"windows-1251\"?>\n' <Файл>\n'     <Документ ИдДок=\"%id%\" ДатаДок=\"%date%\">\n'         <!-- IF HAS %orderObj% -->\n'         <Заказ Номер=\"%number%\">\n'             <!-- LOOP EACH %itemsArr% -->\n'             <ПозицияЗаказа Товар=\"%item%\"/>\n'             <!-- STOP LOOP %itemsArr% -->\n'         </Заказ>\n'         <!-- END IF %orderObj% -->\n'     </Документ>\n' </Файл>\n\nFunction GetMap() As Object\n    ' Ф-ция возвращает map с данными для подстановки в шаблон\n    Dim map As Object, obj1 As Object, obj2 As Object\n    Dim arr() As Object, i&\n    \n    Set map = New Scripting.Dictionary\n\n    map(\"id\") = \"1152026\"\n    map(\"date\") = \"30.03.2021\"\n    \n    Set obj1 = New Scripting.Dictionary\n    obj1(\"number\") = \"O-456123\"\n    \n    For i = 1 To 3\n        Set obj2 = New Scripting.Dictionary\n        \n        obj2(\"item\") = \"Товар \" & i\n        \n        If i = 1 Then\n            ReDim arr(0)\n        Else\n            ReDim Preserve arr(UBound(arr) + 1)\n        End If\n        \n        Set arr(UBound(arr)) = obj2\n    Next i\n    \n    obj1(\"itemsArr\") = arr\n    Set map(\"orderObj\") = obj1\n\n    Set GetMap = map\nEnd Function\n\nSub Example()\n    Dim templatePath$: templatePath = ThisWorkbook.Path & Application.PathSeparator & \"xml-template.txt\"\n    Dim savePath$: savePath = ThisWorkbook.Path\n    \n    ' Получаем шаблон с заглушками\n    Dim template$: template = ReadTxtFile(templatePath) ' @(id 26)\n    ' Получаем %заглушки% из шаблона\n    Dim plugsArr(): plugsArr = GetPlugsArr(template)\n    ' Получаем данные для подстановки в шаблон\n    Dim dataMap As Object: Set dataMap = GetMap()\n    ' Заполняем шаблон данными\n    Dim result$: result = FillTemplateWithData(template, plugsArr, dataMap)\n    ' Сохраняем результат в файл\n    Call SaveToTxtFile(result, savePath, \"file.xml\", \"windows-1251\") ' @(id 28)\n    \n    MsgBox \"Файл создан:\" & vbNewLine & vbNewLine & savePath, vbInformation\nEnd Sub","file":"84.bas"},{"id":"85","category":["Комментарии к ячейкам"],"name":"SetComment","title":"Ф-ция устанавливает / очищает комментарий в ячейке","description":"Параметры:\n- `rng` (range) - ячейка\n- `flag` (boolean)\n  - `True` - добавить комментарий\n  - `False` - удалить комментарий\n- `comment?` (string) - текст комментария\n- `isVisible?` (boolean) - разделитель, по умолчанию пробел\n  - `True` - всегда виден\n  - `False` - виден при наведении курсора на ячейку (default)","_keywords":"добавить комментарий к ячейке\nустановить комментарий в ячейке\nвставить комментарий к ячейке\nвставка комментария в ячейку\nубрать комментарий к ячейке\nудалить комментарий из ячейки\nadd comment to cell\ninsert comment to cell\nset comment to cell\nremove comment from cell\nreset comment in cell","usage":"Sub Example()\n    Dim rng As Range: Set rng = ThisWorkbook.Sheets(1).Range(\"C1\")\n    Call SetComment(rng, True, \"Это ячейка С1\", True)\n    ' ..\n    Call SetComment(rng, False)\nEnd Sub","file":"85.bas"},{"id":"86","category":["Готовые макросы"],"name":"CopyVBProject","title":"Ф-ция копирует VBProject модули из одного Excel файла в другой","description":"","_keywords":"копировать VB проект\nкопировать макросы\ncopy VB project\ncopy macros","usage":"Sub Example()\n    Dim wb As Workbook: Set wb = Workbooks.Add\n    Call CopyVBProject(ThisWorkbook, wb)\nEnd Sub","file":"86.bas"},{"id":"87","category":["Работа с книгами и листами"],"name":"BreakLinks","title":"Ф-ция удаляет связи (Edit Links) из переданной Excel книги","description":"","_keywords":"удалить связи\nудалить ссылки\nbreak links\nremove links","usage":"Sub Example()\n    Call BreakLinks(ThisWorkbook)\nEnd Sub","file":"87.bas"},{"id":"88","category":["Работа с датой и временем"],"name":"IsDateBetween","title":"Ф-ция проверяет находится ли дата в определенном диапазоне","description":"Параметры:\n- `testDate` (date) - дата, которую проверяем\n- `startDate` (date) - начало диапазона\n- `endDate` (date) - конец диапазона\n\nВозвращает `True` или `False`","_keywords":"","usage":"Sub Example()\n    Dim testDate As Date: testDate = DateSerial(2022, 3, 3) ' 3 March 2022\n    Call IsDateBetween(testDate, DateSerial(2022, 3, 2), DateSerial(2022, 3, 4)) ' True\nEnd Sub","file":"88.bas"},{"id":"89","category":["Массивы"],"name":"Filter2DArr","title":"Ф-ция фильтрует 2 мерный массив с помощью ф-ции-чекера","description":"Ф-ция `CheckItem` будет вызвана с каждым эл-том массива (строкой)\n\nВ кач-ве единственного параметра в ф-цию `CheckItem` будет передан эл-т строки из столбца под номером `elementPos`\n\nЕсли ф-ция `CheckItem` вернет `True`, элемент попадет в результирующий массив\n\nВозвращает 2 мерный массив с отфильтрованными строками из исходного массива","_keywords":"фильтрация массива с помощью функции\nотфильтровать массив через функцию\nфильтрация массива\nотфильтровать массив\nfilter array with callback\nfilter array through callback\nfilter array using callback\nfilter array","usage":"Function CheckItem(ByVal item) As Boolean\n    ' ф-ция для проверки эл-тов массива\n    CheckItem = CBool(CStr(item) = \"Иван\")\nEnd Function\n\nSub Example()\n    Dim ws As Worksheet: Set ws = ThisWorkbook.Sheets(1)\n    ' столбец A содержит имена: \"Иван\", \"Алексей\", \"Иван\"\n    ' столбец B содержит даты рождения: \"10.01.1992\", \"25.03.1991\", \"13.02.1994\"\n     Dim arr(): arr = ws.Range(\"A1:B3\")\n\n    ' фильтруем 2 мерный массив (range)\n    ' хотим получить строки с Иванами\n    Dim filteredArr(): filteredArr = Filter2DArr(arr, \"CheckItem\", 2)\n\n    Dim count&: count = GetArrLength(filteredArr) ' @(id 2)\n    Debug.Print (count) ' 2 строки прошли проверку ф-цией CheckItem\n    \n    ' вставка отфильтрованного массива на лист\n    Range(\"D1\").Resize(UBound(filteredArr, 1), UBound(filteredArr, 2)).Value = filteredArr\nEnd Sub","file":"89.bas"},{"id":"90","category":["Работа с текстом","Массивы"],"name":"SplitToChunks","title":"Ф-ция разбивает строку на массив строк заданной длины","description":"","_keywords":"разделить строку на части равно длины\nразбить строку на части равно длины\nsplit string to chunks fixed length\nsplit string to chunks fixed length\nsplit string to parts","usage":"Sub Example()\n    Dim arr() As String: arr = SplitToChunks(\"1234567890\", 2)\n    Debug.Print (Join(arr, \", \")) ' 12, 34, 56, 78, 90\nEnd Sub","file":"90.bas"},{"id":"91","category":["Строки и столбцы"],"name":"GetColumnNumber","title":"Ф-ция возвращает номер столбца по его букве","description":"","_keywords":"получить номер столбца по букве столбца\nget column number by column char","usage":"Sub Example()\n    Debug.Print (GetColumnNumbe(\"A\")) ' 1\n    Debug.Print (GetColumnNumbe(\"C\")) ' 3\n    Debug.Print (GetColumnNumbe(\"H\")) ' 8\nEnd Sub","file":"91.bas"},{"id":"92","category":["Работа с книгами и листами"],"name":"CreateWs","title":"Ф-ция создает новый лист в текущей рабочей книге","description":"Параметры:\n- `tabName?` (string) - имя нового листа\n- `tabColor?` (long) - цвет вкладки\n- `afterWs?` (worksheet) - лист, после которого добавить новый лист (по-умолчанию в конец)\n- `needRecreate?` (boolean) - перезапись (по-умолчанию False)\n\nВозвращает объект нового листа","_keywords":"создать вкладку\nсоздать рабочий лист\nвставить рабочий лист\nвставить вкладку\nadd sheet\nadd worksheet\nadd tab\ncreate sheet\ncreate worksheet\ncreate tab","usage":"Sub Example()\n   Dim ws As Worksheet\n   Set ws = CreateWs(\"New sheet\", RGB(255, 0, 0), , True)\nEnd Sub","file":"92.bas"},{"id":"93","category":["Массивы"],"name":"MergeArrays","title":"Ф-ция объединяет массивы и возвращает объединенный массив","description":"Параметры:\n- `arr1` (variant array) - массив 1\n- `arr2` (variant array) - массив 2\n\nВозвращает новый объединенный массив `arr1` + `arr2`","_keywords":"объединить массивы\nсцепить массивы\nmerge arrays\nconcatenate arrays\nconcat arrays","usage":"Sub Example()\n   Dim arr(): arr = MergeArrays(Array(1,2,3), Array(4,5))\n   Dim arrLength&: arrLength = GetArrLength(arr) ' @(id 2)\n   Debug.Print(arrLength) ' 5\nEnd Sub","file":"93.bas"}]